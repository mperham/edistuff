package com.webify.shared.edi.model.hipaa997.beans;

import com.webify.shared.edi.model.*;
import java.io.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class SegmentAK9 implements EDIElement {
	private static final Log log = LogFactory.getLog(SegmentAK9.class);

	public static final String SEGMENT_NAME = "AK9";
	public static final int FIELD_COUNT = 9;

	private int lineNumber = 0;
	public int getLineNumber() { return lineNumber; }
	/** Do NOT use this method - it is not public by choice... */
	public void setLineNumber(int foo) { lineNumber = foo; }

	private int ordinal = 0;
	public int getOrdinal() { return ordinal; }
	void setOrdinal(int ord) { ordinal = ord; }

	// Fields
	private String Ak901;
	public String getAk901() { return Ak901; }
	public void setAk901(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'AK901' may not be null");
		}
		if (Field715.validateValue(val)) {
			Ak901 = val;
		} else {
			throw new IllegalArgumentException("Field 'AK901' cannot have value: " + val);
		}
	}

	private Integer Ak902;
	public Integer getAk902() { return Ak902; }
	public void setAk902(Integer val) { Ak902 = val; }

	private Integer Ak903;
	public Integer getAk903() { return Ak903; }
	public void setAk903(Integer val) { Ak903 = val; }

	private Integer Ak904;
	public Integer getAk904() { return Ak904; }
	public void setAk904(Integer val) { Ak904 = val; }

	private String Ak905;
	public String getAk905() { return Ak905; }
	public void setAk905(String val) {
		if (Field716.validateValue(val)) {
			Ak905 = val;
		} else {
			throw new IllegalArgumentException("Field 'AK905' cannot have value: " + val);
		}
	}

	private String Ak906;
	public String getAk906() { return Ak906; }
	public void setAk906(String val) {
		if (Field716.validateValue(val)) {
			Ak906 = val;
		} else {
			throw new IllegalArgumentException("Field 'AK906' cannot have value: " + val);
		}
	}

	private String Ak907;
	public String getAk907() { return Ak907; }
	public void setAk907(String val) {
		if (Field716.validateValue(val)) {
			Ak907 = val;
		} else {
			throw new IllegalArgumentException("Field 'AK907' cannot have value: " + val);
		}
	}

	private String Ak908;
	public String getAk908() { return Ak908; }
	public void setAk908(String val) {
		if (Field716.validateValue(val)) {
			Ak908 = val;
		} else {
			throw new IllegalArgumentException("Field 'AK908' cannot have value: " + val);
		}
	}

	private String Ak909;
	public String getAk909() { return Ak909; }
	public void setAk909(String val) {
		if (Field716.validateValue(val)) {
			Ak909 = val;
		} else {
			throw new IllegalArgumentException("Field 'AK909' cannot have value: " + val);
		}
	}


	public void parse(EDIInputStream eis) throws IOException {
		lineNumber = eis.getCurrentSegmentNumber();
		if (log.isDebugEnabled()) log.debug("Starting segment AK9 on line " + lineNumber);
		String[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);
		Ak901 = eis.getStringValue(fields, 1, 1, 1, true);
		Field715.validateInputValue(eis, "AK901", Ak901, ordinal, 1);
		if (Ak901 == null || "".equals(fields[1].trim())) {
			eis.addError("Field 'AK901' missing");
		}
		Ak902 = eis.getIntegerValue(fields, 2, true);
		if (Ak902 == null || "".equals(fields[2].trim())) {
			eis.addError("Field 'AK902' missing");
		}
		Ak903 = eis.getIntegerValue(fields, 3, true);
		if (Ak903 == null || "".equals(fields[3].trim())) {
			eis.addError("Field 'AK903' missing");
		}
		Ak904 = eis.getIntegerValue(fields, 4, true);
		if (Ak904 == null || "".equals(fields[4].trim())) {
			eis.addError("Field 'AK904' missing");
		}
		Ak905 = eis.getStringValue(fields, 5, 1, 3, false);
		Field716.validateInputValue(eis, "AK905", Ak905, ordinal, 5);
		Ak906 = eis.getStringValue(fields, 6, 1, 3, false);
		Field716.validateInputValue(eis, "AK906", Ak906, ordinal, 6);
		Ak907 = eis.getStringValue(fields, 7, 1, 3, false);
		Field716.validateInputValue(eis, "AK907", Ak907, ordinal, 7);
		Ak908 = eis.getStringValue(fields, 8, 1, 3, false);
		Field716.validateInputValue(eis, "AK908", Ak908, ordinal, 8);
		Ak909 = eis.getStringValue(fields, 9, 1, 3, false);
		Field716.validateInputValue(eis, "AK909", Ak909, ordinal, 9);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startSegment("AK9");
		if (Ak901 == null) {
			eos.addError("Emitting null mandatory field 'AK901'");
		}

		eos.writeField(Ak901);
		if (Ak902 == null) {
			eos.addError("Emitting null mandatory field 'AK902'");
		}

		eos.writeField(Ak902);
		if (Ak903 == null) {
			eos.addError("Emitting null mandatory field 'AK903'");
		}

		eos.writeField(Ak903);
		if (Ak904 == null) {
			eos.addError("Emitting null mandatory field 'AK904'");
		}

		eos.writeField(Ak904);
		eos.writeField(Ak905);
		eos.writeField(Ak906);
		eos.writeField(Ak907);
		eos.writeField(Ak908);
		eos.writeField(Ak909);
		eos.endSegment();
	}

	public EDIElement createCopy() {
		SegmentAK9 copy = new SegmentAK9();
		copy.setLineNumber(this.lineNumber);
		copy.Ak901 = this.Ak901;
		copy.Ak902 = this.Ak902;
		copy.Ak903 = this.Ak903;
		copy.Ak904 = this.Ak904;
		copy.Ak905 = this.Ak905;
		copy.Ak906 = this.Ak906;
		copy.Ak907 = this.Ak907;
		copy.Ak908 = this.Ak908;
		copy.Ak909 = this.Ak909;
		return copy;
	}
}
