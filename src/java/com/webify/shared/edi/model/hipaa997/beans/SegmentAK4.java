package com.webify.shared.edi.model.hipaa997.beans;

import com.webify.shared.edi.model.*;
import java.io.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class SegmentAK4 implements EDIElement {
	private static final Log log = LogFactory.getLog(SegmentAK4.class);

	public static final String SEGMENT_NAME = "AK4";
	public static final int FIELD_COUNT = 4;

	private int lineNumber = 0;
	public int getLineNumber() { return lineNumber; }
	/** Do NOT use this method - it is not public by choice... */
	public void setLineNumber(int foo) { lineNumber = foo; }

	private int ordinal = 0;
	public int getOrdinal() { return ordinal; }
	void setOrdinal(int ord) { ordinal = ord; }

	// Fields
	private CompositeC030 Ak401;
	public CompositeC030 getAk401() { return Ak401; }
	public void setAk401(CompositeC030 val) { Ak401 = val; }

	private Integer Ak402;
	public Integer getAk402() { return Ak402; }
	public void setAk402(Integer val) { Ak402 = val; }

	private String Ak403;
	public String getAk403() { return Ak403; }
	public void setAk403(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'AK403' may not be null");
		}
		if (Field723.validateValue(val)) {
			Ak403 = val;
		} else {
			throw new IllegalArgumentException("Field 'AK403' cannot have value: " + val);
		}
	}

	private String Ak404;
	public String getAk404() { return Ak404; }
	public void setAk404(String val) { Ak404 = val; }


	public void parse(EDIInputStream eis) throws IOException {
		lineNumber = eis.getCurrentSegmentNumber();
		if (log.isDebugEnabled()) log.debug("Starting segment AK4 on line " + lineNumber);
		String[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);
		if (eis.checkBounds(fields, 1, true)) {
			Ak401 = new CompositeC030();
			Ak401.setOrdinal(ordinal + "-" + 1);
			Ak401.parse(eis, fields[1]);
		}
		if (Ak401 == null || "".equals(fields[1].trim())) {
			eis.addError("Field 'AK401' missing");
		}
		Ak402 = eis.getIntegerValue(fields, 2, false);
		Ak403 = eis.getStringValue(fields, 3, 1, 3, true);
		Field723.validateInputValue(eis, "AK403", Ak403, ordinal, 3);
		if (Ak403 == null || "".equals(fields[3].trim())) {
			eis.addError("Field 'AK403' missing");
		}
		Ak404 = eis.getStringValue(fields, 4, 1, 99, false);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startSegment("AK4");
		if (Ak401 == null) {
			eos.addError("Emitting null mandatory field 'AK401'");
		}

		if (Ak401 != null) {
			Ak401.emit(eos);
		} else {
			eos.writeNullField();
		}
		eos.writeField(Ak402);
		if (Ak403 == null) {
			eos.addError("Emitting null mandatory field 'AK403'");
		}

		eos.writeField(Ak403);
		eos.writeField(Ak404);
		eos.endSegment();
	}

	public EDIElement createCopy() {
		SegmentAK4 copy = new SegmentAK4();
		copy.setLineNumber(this.lineNumber);
		if (getAk401() != null) copy.setAk401((CompositeC030)getAk401().createCopy());
		copy.Ak402 = this.Ak402;
		copy.Ak403 = this.Ak403;
		copy.Ak404 = this.Ak404;
		return copy;
	}
}
