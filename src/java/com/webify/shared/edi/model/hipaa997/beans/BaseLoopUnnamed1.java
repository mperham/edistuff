package com.webify.shared.edi.model.hipaa997.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa997.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoopUnnamed1 extends EDILoop {

	private static final Log log = LogFactory.getLog(LoopUnnamed1.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentAK3 Ak3;
	public SegmentAK3 getAk3() { return Ak3; }
	public void setAk3(SegmentAK3 seg) { Ak3 = seg; }

	private List Ak4;
	public SegmentAK4 getAk4(int idx) { 
		if (Ak4 == null || idx >= Ak4.size()) {
			throw new ArrayIndexOutOfBoundsException("Ak4");
		}
		return (SegmentAK4) Ak4.get(idx);
	}
	public List getAk4() {
		return Ak4;
	}
	public void setAk4(List segs) { Ak4 = segs; }


	// Loops

	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop Unnamed1");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (eis.peekSegment("AK3")) {
			Ak3 = new SegmentAK3();
			Ak3.setOrdinal(4);
			Ak3.parse(eis);
		}

		while (eis.peekSegment("AK4")) {
			if (Ak4 == null) Ak4 = new ArrayList();
			SegmentAK4 tmp = new SegmentAK4();
			tmp.setOrdinal(5);
			tmp.parse(eis);
			Ak4.add(tmp);
			if (Ak4.size() > 99) {
				eis.addError("Segment AK4 has too many instances.  It can only repeat 99 times");
				eis.eatSegments("AK4");
				break;
			}
		}

		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Ak3 != null) {
			Ak3.emit(eos);
		}

		if (Ak4 != null) {
			int idx = 0, size = Ak4.size();
			while (idx < size) {
				getAk4(idx++).emit(eos);
			}
		}

	}

	public EDIElement createCopy() {
		LoopUnnamed1 thisCopy = new LoopUnnamed1();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Ak3 != null) {
			thisCopy.setAk3((SegmentAK3)Ak3.createCopy());
		}

		if (Ak4 != null) {
			thisCopy.setAk4(new ArrayList());
			int idx = 0, size = Ak4.size();
			while (idx < size) {
				thisCopy.getAk4().add(getAk4(idx++).createCopy());
			}
		}

		return thisCopy;
	}

}
