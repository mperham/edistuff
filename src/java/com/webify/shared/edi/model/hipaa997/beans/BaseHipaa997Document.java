package com.webify.shared.edi.model.hipaa997.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa997.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public abstract class BaseHipaa997Document extends EDITransaction {

	public static final String DOCUMENT_ID = "997";
	public static final List STANDARDS_IDS = new ArrayList();

	static {
		STANDARDS_IDS.add("004010,997");
	}


	private static final Log log = LogFactory.getLog(Hipaa997Document.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentST St;
	public SegmentST getSt() { return St; }
	public void setSt(SegmentST seg) { St = seg; }

	private SegmentAK1 Ak1;
	public SegmentAK1 getAk1() { return Ak1; }
	public void setAk1(SegmentAK1 seg) { Ak1 = seg; }

	private SegmentAK9 Ak9;
	public SegmentAK9 getAk9() { return Ak9; }
	public void setAk9(SegmentAK9 seg) { Ak9 = seg; }

	private SegmentSE Se;
	public SegmentSE getSe() { return Se; }
	public void setSe(SegmentSE seg) { Se = seg; }


	// Loops
	private List loopUnnamed0;
	public LoopUnnamed0 getLoopUnnamed0(int idx) { 
		if (loopUnnamed0 == null || idx >= loopUnnamed0.size()) {
			throw new ArrayIndexOutOfBoundsException("loopUnnamed0");
		}
		return (LoopUnnamed0) loopUnnamed0.get(idx);
	}
	public List getLoopUnnamed0() {
		return loopUnnamed0;
	}
	public void setLoopUnnamed0(List loop) { loopUnnamed0 = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 997");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (!eis.peekSegment("ST")) {
			eis.addError("A single instance of Segment ST is required.");
		} else {
			St = new SegmentST();
			St.setOrdinal(1);
			St.parse(eis);
		}

		if (!eis.peekSegment("AK1")) {
			eis.addError("A single instance of Segment AK1 is required.");
		} else {
			Ak1 = new SegmentAK1();
			Ak1.setOrdinal(2);
			Ak1.parse(eis);
		}

		while (true) {
			if (eis.peekSegment("AK2")) {
				if (loopUnnamed0 == null) loopUnnamed0 = new ArrayList();
				LoopUnnamed0 tmp = new LoopUnnamed0();
				tmp.parse(eis);
				loopUnnamed0.add(tmp);
			}
			else {
				break;
			}
		}

		if (loopUnnamed0 != null && loopUnnamed0.size() > 16959) {
			eis.addError("Loop Unnamed0 has too many instances.  It can repeat only 16959 times");
		}
		if (!eis.peekSegment("AK9")) {
			eis.addError("A single instance of Segment AK9 is required.");
		} else {
			Ak9 = new SegmentAK9();
			Ak9.setOrdinal(7);
			Ak9.parse(eis);
		}

		if (!eis.peekSegment("SE")) {
			eis.addError("A single instance of Segment SE is required.");
		} else {
			Se = new SegmentSE();
			Se.setOrdinal(8);
			Se.parse(eis);
		}

		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (St != null) {
			St.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'ST'");
		}

		if (Ak1 != null) {
			Ak1.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'AK1'");
		}

		if (loopUnnamed0 != null) {
			int idx = 0, size = loopUnnamed0.size();
			while (idx < size) {
				getLoopUnnamed0(idx++).emit(eos);
			}
		}

		if (Ak9 != null) {
			Ak9.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'AK9'");
		}

		if (Se != null) {
			Se.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'SE'");
		}

	}

	public EDIElement createCopy() {
		Hipaa997Document thisCopy = new Hipaa997Document();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (St != null) {
			thisCopy.setSt((SegmentST)St.createCopy());
		}

		if (Ak1 != null) {
			thisCopy.setAk1((SegmentAK1)Ak1.createCopy());
		}

		if (loopUnnamed0 != null) {
			thisCopy.setLoopUnnamed0(new ArrayList());
			int idx = 0, size = loopUnnamed0.size();
			while (idx < size) {
				thisCopy.getLoopUnnamed0().add(getLoopUnnamed0(idx++).createCopy());
			}
		}

		if (Ak9 != null) {
			thisCopy.setAk9((SegmentAK9)Ak9.createCopy());
		}

		if (Se != null) {
			thisCopy.setSe((SegmentSE)Se.createCopy());
		}

		return thisCopy;
	}

}
