package com.webify.shared.edi.model.hipaa997.beans;

import com.webify.shared.edi.model.*;
import java.io.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class SegmentAK5 implements EDIElement {
	private static final Log log = LogFactory.getLog(SegmentAK5.class);

	public static final String SEGMENT_NAME = "AK5";
	public static final int FIELD_COUNT = 6;

	private int lineNumber = 0;
	public int getLineNumber() { return lineNumber; }
	/** Do NOT use this method - it is not public by choice... */
	public void setLineNumber(int foo) { lineNumber = foo; }

	private int ordinal = 0;
	public int getOrdinal() { return ordinal; }
	void setOrdinal(int ord) { ordinal = ord; }

	// Fields
	private String Ak501;
	public String getAk501() { return Ak501; }
	public void setAk501(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'AK501' may not be null");
		}
		if (Field717.validateValue(val)) {
			Ak501 = val;
		} else {
			throw new IllegalArgumentException("Field 'AK501' cannot have value: " + val);
		}
	}

	private String Ak502;
	public String getAk502() { return Ak502; }
	public void setAk502(String val) {
		if (Field718.validateValue(val)) {
			Ak502 = val;
		} else {
			throw new IllegalArgumentException("Field 'AK502' cannot have value: " + val);
		}
	}

	private String Ak503;
	public String getAk503() { return Ak503; }
	public void setAk503(String val) {
		if (Field718.validateValue(val)) {
			Ak503 = val;
		} else {
			throw new IllegalArgumentException("Field 'AK503' cannot have value: " + val);
		}
	}

	private String Ak504;
	public String getAk504() { return Ak504; }
	public void setAk504(String val) {
		if (Field718.validateValue(val)) {
			Ak504 = val;
		} else {
			throw new IllegalArgumentException("Field 'AK504' cannot have value: " + val);
		}
	}

	private String Ak505;
	public String getAk505() { return Ak505; }
	public void setAk505(String val) {
		if (Field718.validateValue(val)) {
			Ak505 = val;
		} else {
			throw new IllegalArgumentException("Field 'AK505' cannot have value: " + val);
		}
	}

	private String Ak506;
	public String getAk506() { return Ak506; }
	public void setAk506(String val) {
		if (Field718.validateValue(val)) {
			Ak506 = val;
		} else {
			throw new IllegalArgumentException("Field 'AK506' cannot have value: " + val);
		}
	}


	public void parse(EDIInputStream eis) throws IOException {
		lineNumber = eis.getCurrentSegmentNumber();
		if (log.isDebugEnabled()) log.debug("Starting segment AK5 on line " + lineNumber);
		String[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);
		Ak501 = eis.getStringValue(fields, 1, 1, 1, true);
		Field717.validateInputValue(eis, "AK501", Ak501, ordinal, 1);
		if (Ak501 == null || "".equals(fields[1].trim())) {
			eis.addError("Field 'AK501' missing");
		}
		Ak502 = eis.getStringValue(fields, 2, 1, 3, false);
		Field718.validateInputValue(eis, "AK502", Ak502, ordinal, 2);
		Ak503 = eis.getStringValue(fields, 3, 1, 3, false);
		Field718.validateInputValue(eis, "AK503", Ak503, ordinal, 3);
		Ak504 = eis.getStringValue(fields, 4, 1, 3, false);
		Field718.validateInputValue(eis, "AK504", Ak504, ordinal, 4);
		Ak505 = eis.getStringValue(fields, 5, 1, 3, false);
		Field718.validateInputValue(eis, "AK505", Ak505, ordinal, 5);
		Ak506 = eis.getStringValue(fields, 6, 1, 3, false);
		Field718.validateInputValue(eis, "AK506", Ak506, ordinal, 6);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startSegment("AK5");
		if (Ak501 == null) {
			eos.addError("Emitting null mandatory field 'AK501'");
		}

		eos.writeField(Ak501);
		eos.writeField(Ak502);
		eos.writeField(Ak503);
		eos.writeField(Ak504);
		eos.writeField(Ak505);
		eos.writeField(Ak506);
		eos.endSegment();
	}

	public EDIElement createCopy() {
		SegmentAK5 copy = new SegmentAK5();
		copy.setLineNumber(this.lineNumber);
		copy.Ak501 = this.Ak501;
		copy.Ak502 = this.Ak502;
		copy.Ak503 = this.Ak503;
		copy.Ak504 = this.Ak504;
		copy.Ak505 = this.Ak505;
		copy.Ak506 = this.Ak506;
		return copy;
	}
}
