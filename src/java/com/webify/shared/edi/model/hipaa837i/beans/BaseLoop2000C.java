package com.webify.shared.edi.model.hipaa837i.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa837i.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoop2000C extends EDILoop {

	private static final Log log = LogFactory.getLog(Loop2000C.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	public static final String[] TRIGGER_VALUES = new String[] {
		"23"
	};

	private Loop2000B parent;
	public Loop2000B getParent() { return parent; }
	public void setParent(Loop2000B dad) { parent = dad; }

	// Segments
	private SegmentHL_2 Hl;
	public SegmentHL_2 getHl() { return Hl; }
	public void setHl(SegmentHL_2 seg) { Hl = seg; }

	private SegmentPAT_2 Pat;
	public SegmentPAT_2 getPat() { return Pat; }
	public void setPat(SegmentPAT_2 seg) { Pat = seg; }


	// Loops
	private Loop2010CA loop2010CA;
	public Loop2010CA getLoop2010CA() { return loop2010CA; }
	public void setLoop2010CA(Loop2010CA loop) { loop2010CA = loop; }

	private List loop2300;
	public Loop2300 getLoop2300(int idx) { 
		if (loop2300 == null || idx >= loop2300.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2300");
		}
		return (Loop2300) loop2300.get(idx);
	}
	public List getLoop2300() {
		return loop2300;
	}
	public void setLoop2300(List loop) { loop2300 = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 2000C");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (eis.peekSegment("HL")) {
			Hl = new SegmentHL_2();
			Hl.setOrdinal(160);
			Hl.parse(eis);
		}

		if (!eis.peekSegment("PAT")) {
			eis.addError("A single instance of Segment PAT is required.");
		} else {
			Pat = new SegmentPAT_2();
			Pat.setOrdinal(161);
			Pat.parse(eis);
		}

		while (true) {
			if (eis.peekSegment("NM1")) {
				if (loop2010CA != null) {
					eis.addError("Only one instance of Loop 2010CA is allowed.");
				} else {
					loop2010CA = new Loop2010CA();
					loop2010CA.parse(eis);
				}
			}
			else if (eis.peekSegment("CLM")) {
				if (loop2300 == null) loop2300 = new ArrayList();
				Loop2300 tmp = new Loop2300();
				tmp.parse(eis);
				loop2300.add(tmp);
			}
			else {
				break;
			}
		}

		if (loop2010CA == null) {
			eis.addError("An instance of Loop 2010CA is required.");
		}
		if (loop2300 == null) {
			eis.addError("Loop 2300 must be used.");
		}
		if (loop2300 != null && loop2300.size() > 100) {
			eis.addError("Loop 2300 has too many instances.  It can repeat only 100 times");
		}
		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Hl != null) {
			Hl.emit(eos);
		}

		if (Pat != null) {
			Pat.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'PAT'");
		}

		if (loop2010CA != null) {
			loop2010CA.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'LOOP2010CA'");
		}

		if (loop2300 != null) {
			int idx = 0, size = loop2300.size();
			while (idx < size) {
				getLoop2300(idx++).emit(eos);
			}
		} else {
			eos.addError("Missing mandatory segment 'LOOP2300'");
		}

	}

	public EDIElement createCopy() {
		Loop2000C thisCopy = new Loop2000C();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Hl != null) {
			thisCopy.setHl((SegmentHL_2)Hl.createCopy());
		}

		if (Pat != null) {
			thisCopy.setPat((SegmentPAT_2)Pat.createCopy());
		}

		if (loop2010CA != null) {
			thisCopy.setLoop2010CA((Loop2010CA)loop2010CA.createCopy());
		}

		if (loop2300 != null) {
			thisCopy.setLoop2300(new ArrayList());
			int idx = 0, size = loop2300.size();
			while (idx < size) {
				thisCopy.getLoop2300().add(getLoop2300(idx++).createCopy());
			}
		}

		return thisCopy;
	}

}
