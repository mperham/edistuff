package com.webify.shared.edi.model.hipaa837i.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa837i.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoop2010AA extends EDILoop {

	private static final Log log = LogFactory.getLog(Loop2010AA.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	public static final String[] TRIGGER_VALUES = new String[] {
		"85"
	};

	// Segments
	private SegmentNM1_2 Nm1;
	public SegmentNM1_2 getNm1() { return Nm1; }
	public void setNm1(SegmentNM1_2 seg) { Nm1 = seg; }

	private SegmentN3_1 N3;
	public SegmentN3_1 getN3() { return N3; }
	public void setN3(SegmentN3_1 seg) { N3 = seg; }

	private SegmentN4_1 N4;
	public SegmentN4_1 getN4() { return N4; }
	public void setN4(SegmentN4_1 seg) { N4 = seg; }

	private List Ref01;
	public SegmentREF_1 getRef01(int idx) { 
		if (Ref01 == null || idx >= Ref01.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref01");
		}
		return (SegmentREF_1) Ref01.get(idx);
	}
	public List getRef01() {
		return Ref01;
	}
	public void setRef01(List segs) { Ref01 = segs; }

	private List Ref02;
	public SegmentREF_1 getRef02(int idx) { 
		if (Ref02 == null || idx >= Ref02.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref02");
		}
		return (SegmentREF_1) Ref02.get(idx);
	}
	public List getRef02() {
		return Ref02;
	}
	public void setRef02(List segs) { Ref02 = segs; }

	private List Per;
	public SegmentPER_1 getPer(int idx) { 
		if (Per == null || idx >= Per.size()) {
			throw new ArrayIndexOutOfBoundsException("Per");
		}
		return (SegmentPER_1) Per.get(idx);
	}
	public List getPer() {
		return Per;
	}
	public void setPer(List segs) { Per = segs; }


	// Loops

	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 2010AA");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (!eis.peekSegment("NM1")) {
			eis.addError("A single instance of Segment NM1 is required.");
		} else {
			Nm1 = new SegmentNM1_2();
			Nm1.setOrdinal(10);
			Nm1.parse(eis);
		}

		if (!eis.peekSegment("N3")) {
			eis.addError("A single instance of Segment N3 is required.");
		} else {
			N3 = new SegmentN3_1();
			N3.setOrdinal(11);
			N3.parse(eis);
		}

		if (!eis.peekSegment("N4")) {
			eis.addError("A single instance of Segment N4 is required.");
		} else {
			N4 = new SegmentN4_1();
			N4.setOrdinal(12);
			N4.parse(eis);
		}

		while (eis.peekSegment("REF", 1, new String[] { "0B", "1A", "1B", "1C", "1D", "1G", "1H", "1J", "B3", "BQ", "EI", "FH", "G2", "G5", "LU", "SY", "X5" })) {
			if (Ref01 == null) Ref01 = new ArrayList();
			SegmentREF_1 tmp = new SegmentREF_1();
			tmp.setOrdinal(13);
			tmp.parse(eis);
			Ref01.add(tmp);
			if (Ref01.size() > 8) {
				eis.addError("Segment REF has too many instances.  It can only repeat 8 times");
				eis.eatSegments("REF");
				break;
			}
		}

		while (eis.peekSegment("REF", 1, new String[] { "06", "8U", "EM", "IJ", "LU", "RB", "ST", "TT" })) {
			if (Ref02 == null) Ref02 = new ArrayList();
			SegmentREF_1 tmp = new SegmentREF_1();
			tmp.setOrdinal(14);
			tmp.parse(eis);
			Ref02.add(tmp);
			if (Ref02.size() > 8) {
				eis.addError("Segment REF has too many instances.  It can only repeat 8 times");
				eis.eatSegments("REF");
				break;
			}
		}
		if (eis.peekSegment("REF")) {
			eis.addError("Segment REF could not be parsed.");
			eis.eatSegments("REF");
		}

		while (eis.peekSegment("PER")) {
			if (Per == null) Per = new ArrayList();
			SegmentPER_1 tmp = new SegmentPER_1();
			tmp.setOrdinal(15);
			tmp.parse(eis);
			Per.add(tmp);
			if (Per.size() > 2) {
				eis.addError("Segment PER has too many instances.  It can only repeat 2 times");
				eis.eatSegments("PER");
				break;
			}
		}

		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Nm1 != null) {
			Nm1.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'NM1'");
		}

		if (N3 != null) {
			N3.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'N3'");
		}

		if (N4 != null) {
			N4.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'N4'");
		}

		if (Ref01 != null) {
			int idx = 0, size = Ref01.size();
			while (idx < size) {
				getRef01(idx++).emit(eos);
			}
		}

		if (Ref02 != null) {
			int idx = 0, size = Ref02.size();
			while (idx < size) {
				getRef02(idx++).emit(eos);
			}
		}

		if (Per != null) {
			int idx = 0, size = Per.size();
			while (idx < size) {
				getPer(idx++).emit(eos);
			}
		}

	}

	public EDIElement createCopy() {
		Loop2010AA thisCopy = new Loop2010AA();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Nm1 != null) {
			thisCopy.setNm1((SegmentNM1_2)Nm1.createCopy());
		}

		if (N3 != null) {
			thisCopy.setN3((SegmentN3_1)N3.createCopy());
		}

		if (N4 != null) {
			thisCopy.setN4((SegmentN4_1)N4.createCopy());
		}

		if (Ref01 != null) {
			thisCopy.setRef01(new ArrayList());
			int idx = 0, size = Ref01.size();
			while (idx < size) {
				thisCopy.getRef01().add(getRef01(idx++).createCopy());
			}
		}

		if (Ref02 != null) {
			thisCopy.setRef02(new ArrayList());
			int idx = 0, size = Ref02.size();
			while (idx < size) {
				thisCopy.getRef02().add(getRef02(idx++).createCopy());
			}
		}

		if (Per != null) {
			thisCopy.setPer(new ArrayList());
			int idx = 0, size = Per.size();
			while (idx < size) {
				thisCopy.getPer().add(getPer(idx++).createCopy());
			}
		}

		return thisCopy;
	}

}
