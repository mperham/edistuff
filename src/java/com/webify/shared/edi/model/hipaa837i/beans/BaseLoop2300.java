package com.webify.shared.edi.model.hipaa837i.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa837i.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoop2300 extends EDILoop {

	private static final Log log = LogFactory.getLog(Loop2300.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentCLM_2 Clm;
	public SegmentCLM_2 getClm() { return Clm; }
	public void setClm(SegmentCLM_2 seg) { Clm = seg; }

	private SegmentDTP_1 Dtp01;
	public SegmentDTP_1 getDtp01() { return Dtp01; }
	public void setDtp01(SegmentDTP_1 seg) { Dtp01 = seg; }

	private SegmentDTP_1 Dtp02;
	public SegmentDTP_1 getDtp02() { return Dtp02; }
	public void setDtp02(SegmentDTP_1 seg) { Dtp02 = seg; }

	private SegmentDTP_1 Dtp03;
	public SegmentDTP_1 getDtp03() { return Dtp03; }
	public void setDtp03(SegmentDTP_1 seg) { Dtp03 = seg; }

	private SegmentCL1_1 Cl1;
	public SegmentCL1_1 getCl1() { return Cl1; }
	public void setCl1(SegmentCL1_1 seg) { Cl1 = seg; }

	private List Pwk;
	public SegmentPWK_1 getPwk(int idx) { 
		if (Pwk == null || idx >= Pwk.size()) {
			throw new ArrayIndexOutOfBoundsException("Pwk");
		}
		return (SegmentPWK_1) Pwk.get(idx);
	}
	public List getPwk() {
		return Pwk;
	}
	public void setPwk(List segs) { Pwk = segs; }

	private SegmentCN1_1 Cn1;
	public SegmentCN1_1 getCn1() { return Cn1; }
	public void setCn1(SegmentCN1_1 seg) { Cn1 = seg; }

	private SegmentAMT_1 Amt01;
	public SegmentAMT_1 getAmt01() { return Amt01; }
	public void setAmt01(SegmentAMT_1 seg) { Amt01 = seg; }

	private SegmentAMT_1 Amt02;
	public SegmentAMT_1 getAmt02() { return Amt02; }
	public void setAmt02(SegmentAMT_1 seg) { Amt02 = seg; }

	private SegmentAMT_1 Amt03;
	public SegmentAMT_1 getAmt03() { return Amt03; }
	public void setAmt03(SegmentAMT_1 seg) { Amt03 = seg; }

	private SegmentAMT_1 Amt04;
	public SegmentAMT_1 getAmt04() { return Amt04; }
	public void setAmt04(SegmentAMT_1 seg) { Amt04 = seg; }

	private SegmentREF_1 Ref01;
	public SegmentREF_1 getRef01() { return Ref01; }
	public void setRef01(SegmentREF_1 seg) { Ref01 = seg; }

	private SegmentREF_1 Ref02;
	public SegmentREF_1 getRef02() { return Ref02; }
	public void setRef02(SegmentREF_1 seg) { Ref02 = seg; }

	private SegmentREF_1 Ref03;
	public SegmentREF_1 getRef03() { return Ref03; }
	public void setRef03(SegmentREF_1 seg) { Ref03 = seg; }

	private List Ref04;
	public SegmentREF_1 getRef04(int idx) { 
		if (Ref04 == null || idx >= Ref04.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref04");
		}
		return (SegmentREF_1) Ref04.get(idx);
	}
	public List getRef04() {
		return Ref04;
	}
	public void setRef04(List segs) { Ref04 = segs; }

	private SegmentREF_1 Ref05;
	public SegmentREF_1 getRef05() { return Ref05; }
	public void setRef05(SegmentREF_1 seg) { Ref05 = seg; }

	private SegmentREF_1 Ref06;
	public SegmentREF_1 getRef06() { return Ref06; }
	public void setRef06(SegmentREF_1 seg) { Ref06 = seg; }

	private SegmentREF_1 Ref07;
	public SegmentREF_1 getRef07() { return Ref07; }
	public void setRef07(SegmentREF_1 seg) { Ref07 = seg; }

	private SegmentREF_1 Ref08;
	public SegmentREF_1 getRef08() { return Ref08; }
	public void setRef08(SegmentREF_1 seg) { Ref08 = seg; }

	private List Ref09;
	public SegmentREF_1 getRef09(int idx) { 
		if (Ref09 == null || idx >= Ref09.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref09");
		}
		return (SegmentREF_1) Ref09.get(idx);
	}
	public List getRef09() {
		return Ref09;
	}
	public void setRef09(List segs) { Ref09 = segs; }

	private SegmentREF_1 Ref10;
	public SegmentREF_1 getRef10() { return Ref10; }
	public void setRef10(SegmentREF_1 seg) { Ref10 = seg; }

	private SegmentREF_1 Ref11;
	public SegmentREF_1 getRef11() { return Ref11; }
	public void setRef11(SegmentREF_1 seg) { Ref11 = seg; }

	private List K3;
	public SegmentK3_1 getK3(int idx) { 
		if (K3 == null || idx >= K3.size()) {
			throw new ArrayIndexOutOfBoundsException("K3");
		}
		return (SegmentK3_1) K3.get(idx);
	}
	public List getK3() {
		return K3;
	}
	public void setK3(List segs) { K3 = segs; }

	private List Nte01;
	public SegmentNTE_1 getNte01(int idx) { 
		if (Nte01 == null || idx >= Nte01.size()) {
			throw new ArrayIndexOutOfBoundsException("Nte01");
		}
		return (SegmentNTE_1) Nte01.get(idx);
	}
	public List getNte01() {
		return Nte01;
	}
	public void setNte01(List segs) { Nte01 = segs; }

	private SegmentNTE_1 Nte02;
	public SegmentNTE_1 getNte02() { return Nte02; }
	public void setNte02(SegmentNTE_1 seg) { Nte02 = seg; }

	private SegmentCR6_1 Cr6;
	public SegmentCR6_1 getCr6() { return Cr6; }
	public void setCr6(SegmentCR6_1 seg) { Cr6 = seg; }

	private List Crc01;
	public SegmentCRC_1 getCrc01(int idx) { 
		if (Crc01 == null || idx >= Crc01.size()) {
			throw new ArrayIndexOutOfBoundsException("Crc01");
		}
		return (SegmentCRC_1) Crc01.get(idx);
	}
	public List getCrc01() {
		return Crc01;
	}
	public void setCrc01(List segs) { Crc01 = segs; }

	private List Crc02;
	public SegmentCRC_1 getCrc02(int idx) { 
		if (Crc02 == null || idx >= Crc02.size()) {
			throw new ArrayIndexOutOfBoundsException("Crc02");
		}
		return (SegmentCRC_1) Crc02.get(idx);
	}
	public List getCrc02() {
		return Crc02;
	}
	public void setCrc02(List segs) { Crc02 = segs; }

	private List Crc03;
	public SegmentCRC_1 getCrc03(int idx) { 
		if (Crc03 == null || idx >= Crc03.size()) {
			throw new ArrayIndexOutOfBoundsException("Crc03");
		}
		return (SegmentCRC_1) Crc03.get(idx);
	}
	public List getCrc03() {
		return Crc03;
	}
	public void setCrc03(List segs) { Crc03 = segs; }

	private SegmentHI_10 Hi01;
	public SegmentHI_10 getHi01() { return Hi01; }
	public void setHi01(SegmentHI_10 seg) { Hi01 = seg; }

	private SegmentHI_11 Hi02;
	public SegmentHI_11 getHi02() { return Hi02; }
	public void setHi02(SegmentHI_11 seg) { Hi02 = seg; }

	private List Hi03;
	public SegmentHI_13 getHi03(int idx) { 
		if (Hi03 == null || idx >= Hi03.size()) {
			throw new ArrayIndexOutOfBoundsException("Hi03");
		}
		return (SegmentHI_13) Hi03.get(idx);
	}
	public List getHi03() {
		return Hi03;
	}
	public void setHi03(List segs) { Hi03 = segs; }

	private SegmentHI_14 Hi04;
	public SegmentHI_14 getHi04() { return Hi04; }
	public void setHi04(SegmentHI_14 seg) { Hi04 = seg; }

	private List Hi05;
	public SegmentHI_8 getHi05(int idx) { 
		if (Hi05 == null || idx >= Hi05.size()) {
			throw new ArrayIndexOutOfBoundsException("Hi05");
		}
		return (SegmentHI_8) Hi05.get(idx);
	}
	public List getHi05() {
		return Hi05;
	}
	public void setHi05(List segs) { Hi05 = segs; }

	private List Hi06;
	public SegmentHI_9 getHi06(int idx) { 
		if (Hi06 == null || idx >= Hi06.size()) {
			throw new ArrayIndexOutOfBoundsException("Hi06");
		}
		return (SegmentHI_9) Hi06.get(idx);
	}
	public List getHi06() {
		return Hi06;
	}
	public void setHi06(List segs) { Hi06 = segs; }

	private List Hi07;
	public SegmentHI_9 getHi07(int idx) { 
		if (Hi07 == null || idx >= Hi07.size()) {
			throw new ArrayIndexOutOfBoundsException("Hi07");
		}
		return (SegmentHI_9) Hi07.get(idx);
	}
	public List getHi07() {
		return Hi07;
	}
	public void setHi07(List segs) { Hi07 = segs; }

	private List Hi08;
	public SegmentHI_12 getHi08(int idx) { 
		if (Hi08 == null || idx >= Hi08.size()) {
			throw new ArrayIndexOutOfBoundsException("Hi08");
		}
		return (SegmentHI_12) Hi08.get(idx);
	}
	public List getHi08() {
		return Hi08;
	}
	public void setHi08(List segs) { Hi08 = segs; }

	private List Hi09;
	public SegmentHI_13 getHi09(int idx) { 
		if (Hi09 == null || idx >= Hi09.size()) {
			throw new ArrayIndexOutOfBoundsException("Hi09");
		}
		return (SegmentHI_13) Hi09.get(idx);
	}
	public List getHi09() {
		return Hi09;
	}
	public void setHi09(List segs) { Hi09 = segs; }

	private List Hi10;
	public SegmentHI_13 getHi10(int idx) { 
		if (Hi10 == null || idx >= Hi10.size()) {
			throw new ArrayIndexOutOfBoundsException("Hi10");
		}
		return (SegmentHI_13) Hi10.get(idx);
	}
	public List getHi10() {
		return Hi10;
	}
	public void setHi10(List segs) { Hi10 = segs; }

	private List Qty;
	public SegmentQTY_1 getQty(int idx) { 
		if (Qty == null || idx >= Qty.size()) {
			throw new ArrayIndexOutOfBoundsException("Qty");
		}
		return (SegmentQTY_1) Qty.get(idx);
	}
	public List getQty() {
		return Qty;
	}
	public void setQty(List segs) { Qty = segs; }

	private SegmentHCP_1 Hcp;
	public SegmentHCP_1 getHcp() { return Hcp; }
	public void setHcp(SegmentHCP_1 seg) { Hcp = seg; }


	// Loops
	private List loop2305;
	public Loop2305 getLoop2305(int idx) { 
		if (loop2305 == null || idx >= loop2305.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2305");
		}
		return (Loop2305) loop2305.get(idx);
	}
	public List getLoop2305() {
		return loop2305;
	}
	public void setLoop2305(List loop) { loop2305 = loop; }

	private Loop2310A loop2310A;
	public Loop2310A getLoop2310A() { return loop2310A; }
	public void setLoop2310A(Loop2310A loop) { loop2310A = loop; }

	private Loop2310B loop2310B;
	public Loop2310B getLoop2310B() { return loop2310B; }
	public void setLoop2310B(Loop2310B loop) { loop2310B = loop; }

	private Loop2310C loop2310C;
	public Loop2310C getLoop2310C() { return loop2310C; }
	public void setLoop2310C(Loop2310C loop) { loop2310C = loop; }

	private List loop2310D;
	public Loop2310D getLoop2310D(int idx) { 
		if (loop2310D == null || idx >= loop2310D.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2310D");
		}
		return (Loop2310D) loop2310D.get(idx);
	}
	public List getLoop2310D() {
		return loop2310D;
	}
	public void setLoop2310D(List loop) { loop2310D = loop; }

	private Loop2310E loop2310E;
	public Loop2310E getLoop2310E() { return loop2310E; }
	public void setLoop2310E(Loop2310E loop) { loop2310E = loop; }

	private List loop2320;
	public Loop2320 getLoop2320(int idx) { 
		if (loop2320 == null || idx >= loop2320.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2320");
		}
		return (Loop2320) loop2320.get(idx);
	}
	public List getLoop2320() {
		return loop2320;
	}
	public void setLoop2320(List loop) { loop2320 = loop; }

	private List loop2400;
	public Loop2400 getLoop2400(int idx) { 
		if (loop2400 == null || idx >= loop2400.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2400");
		}
		return (Loop2400) loop2400.get(idx);
	}
	public List getLoop2400() {
		return loop2400;
	}
	public void setLoop2400(List loop) { loop2400 = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 2300");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (!eis.peekSegment("CLM")) {
			eis.addError("A single instance of Segment CLM is required.");
		} else {
			Clm = new SegmentCLM_2();
			Clm.setOrdinal(168);
			Clm.parse(eis);
		}

		if (eis.peekSegment("DTP", 1, "096")) {
			Dtp01 = new SegmentDTP_1();
			Dtp01.setOrdinal(169);
			Dtp01.parse(eis);
		}

		if (!eis.peekSegment("DTP", 1, "434")) {
			eis.addError("A single instance of Segment DTP is required.");
		} else {
			Dtp02 = new SegmentDTP_1();
			Dtp02.setOrdinal(170);
			Dtp02.parse(eis);
		}

		if (eis.peekSegment("DTP", 1, "435")) {
			Dtp03 = new SegmentDTP_1();
			Dtp03.setOrdinal(171);
			Dtp03.parse(eis);
		}
		if (eis.peekSegment("DTP")) {
			eis.addError("Segment DTP could not be parsed.");
			eis.eatSegments("DTP");
		}

		if (eis.peekSegment("CL1")) {
			Cl1 = new SegmentCL1_1();
			Cl1.setOrdinal(172);
			Cl1.parse(eis);
		}

		while (eis.peekSegment("PWK")) {
			if (Pwk == null) Pwk = new ArrayList();
			SegmentPWK_1 tmp = new SegmentPWK_1();
			tmp.setOrdinal(173);
			tmp.parse(eis);
			Pwk.add(tmp);
			if (Pwk.size() > 10) {
				eis.addError("Segment PWK has too many instances.  It can only repeat 10 times");
				eis.eatSegments("PWK");
				break;
			}
		}

		if (eis.peekSegment("CN1")) {
			Cn1 = new SegmentCN1_1();
			Cn1.setOrdinal(174);
			Cn1.parse(eis);
		}

		if (eis.peekSegment("AMT", 1, "C5")) {
			Amt01 = new SegmentAMT_1();
			Amt01.setOrdinal(175);
			Amt01.parse(eis);
		}

		if (eis.peekSegment("AMT", 1, "F3")) {
			Amt02 = new SegmentAMT_1();
			Amt02.setOrdinal(176);
			Amt02.parse(eis);
		}

		if (eis.peekSegment("AMT", 1, "F5")) {
			Amt03 = new SegmentAMT_1();
			Amt03.setOrdinal(177);
			Amt03.parse(eis);
		}

		if (eis.peekSegment("AMT", 1, "MA")) {
			Amt04 = new SegmentAMT_1();
			Amt04.setOrdinal(178);
			Amt04.parse(eis);
		}
		if (eis.peekSegment("AMT")) {
			eis.addError("Segment AMT could not be parsed.");
			eis.eatSegments("AMT");
		}

		if (eis.peekSegment("REF", 1, "9C")) {
			Ref01 = new SegmentREF_1();
			Ref01.setOrdinal(179);
			Ref01.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "9A")) {
			Ref02 = new SegmentREF_1();
			Ref02.setOrdinal(180);
			Ref02.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "D9")) {
			Ref03 = new SegmentREF_1();
			Ref03.setOrdinal(181);
			Ref03.parse(eis);
		}

		while (eis.peekSegment("REF", 1, "DD")) {
			if (Ref04 == null) Ref04 = new ArrayList();
			SegmentREF_1 tmp = new SegmentREF_1();
			tmp.setOrdinal(182);
			tmp.parse(eis);
			Ref04.add(tmp);
			if (Ref04.size() > 2) {
				eis.addError("Segment REF has too many instances.  It can only repeat 2 times");
				eis.eatSegments("REF");
				break;
			}
		}

		if (eis.peekSegment("REF", 1, "F8")) {
			Ref05 = new SegmentREF_1();
			Ref05.setOrdinal(183);
			Ref05.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "LX")) {
			Ref06 = new SegmentREF_1();
			Ref06.setOrdinal(184);
			Ref06.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "4N")) {
			Ref07 = new SegmentREF_1();
			Ref07.setOrdinal(185);
			Ref07.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "G4")) {
			Ref08 = new SegmentREF_1();
			Ref08.setOrdinal(186);
			Ref08.parse(eis);
		}

		while (eis.peekSegment("REF", 1, new String[] { "9F", "G1" })) {
			if (Ref09 == null) Ref09 = new ArrayList();
			SegmentREF_1 tmp = new SegmentREF_1();
			tmp.setOrdinal(187);
			tmp.parse(eis);
			Ref09.add(tmp);
			if (Ref09.size() > 2) {
				eis.addError("Segment REF has too many instances.  It can only repeat 2 times");
				eis.eatSegments("REF");
				break;
			}
		}

		if (eis.peekSegment("REF", 1, "EA")) {
			Ref10 = new SegmentREF_1();
			Ref10.setOrdinal(188);
			Ref10.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "P4")) {
			Ref11 = new SegmentREF_1();
			Ref11.setOrdinal(189);
			Ref11.parse(eis);
		}
		if (eis.peekSegment("REF")) {
			eis.addError("Segment REF could not be parsed.");
			eis.eatSegments("REF");
		}

		while (eis.peekSegment("K3")) {
			if (K3 == null) K3 = new ArrayList();
			SegmentK3_1 tmp = new SegmentK3_1();
			tmp.setOrdinal(190);
			tmp.parse(eis);
			K3.add(tmp);
			if (K3.size() > 10) {
				eis.addError("Segment K3 has too many instances.  It can only repeat 10 times");
				eis.eatSegments("K3");
				break;
			}
		}

		while (eis.peekSegment("NTE", 1, new String[] { "ALG", "DCP", "DGN", "DME", "MED", "NTR", "ODT", "RHB", "RLH", "RNH", "SET", "SFM", "SPT", "UPI" })) {
			if (Nte01 == null) Nte01 = new ArrayList();
			SegmentNTE_1 tmp = new SegmentNTE_1();
			tmp.setOrdinal(191);
			tmp.parse(eis);
			Nte01.add(tmp);
			if (Nte01.size() > 10) {
				eis.addError("Segment NTE has too many instances.  It can only repeat 10 times");
				eis.eatSegments("NTE");
				break;
			}
		}

		if (eis.peekSegment("NTE", 1, "ADD")) {
			Nte02 = new SegmentNTE_1();
			Nte02.setOrdinal(192);
			Nte02.parse(eis);
		}
		if (eis.peekSegment("NTE")) {
			eis.addError("Segment NTE could not be parsed.");
			eis.eatSegments("NTE");
		}

		if (eis.peekSegment("CR6")) {
			Cr6 = new SegmentCR6_1();
			Cr6.setOrdinal(193);
			Cr6.parse(eis);
		}

		while (eis.peekSegment("CRC", 1, "75")) {
			if (Crc01 == null) Crc01 = new ArrayList();
			SegmentCRC_1 tmp = new SegmentCRC_1();
			tmp.setOrdinal(194);
			tmp.parse(eis);
			Crc01.add(tmp);
			if (Crc01.size() > 3) {
				eis.addError("Segment CRC has too many instances.  It can only repeat 3 times");
				eis.eatSegments("CRC");
				break;
			}
		}

		while (eis.peekSegment("CRC", 1, "76")) {
			if (Crc02 == null) Crc02 = new ArrayList();
			SegmentCRC_1 tmp = new SegmentCRC_1();
			tmp.setOrdinal(195);
			tmp.parse(eis);
			Crc02.add(tmp);
			if (Crc02.size() > 3) {
				eis.addError("Segment CRC has too many instances.  It can only repeat 3 times");
				eis.eatSegments("CRC");
				break;
			}
		}

		while (eis.peekSegment("CRC", 1, "77")) {
			if (Crc03 == null) Crc03 = new ArrayList();
			SegmentCRC_1 tmp = new SegmentCRC_1();
			tmp.setOrdinal(196);
			tmp.parse(eis);
			Crc03.add(tmp);
			if (Crc03.size() > 2) {
				eis.addError("Segment CRC has too many instances.  It can only repeat 2 times");
				eis.eatSegments("CRC");
				break;
			}
		}
		if (eis.peekSegment("CRC")) {
			eis.addError("Segment CRC could not be parsed.");
			eis.eatSegments("CRC");
		}

		if (eis.peekSegment("HI", 1, "BK")) {
			Hi01 = new SegmentHI_10();
			Hi01.setOrdinal(197);
			Hi01.parse(eis);
		}

		if (eis.peekSegment("HI", 1, "DR")) {
			Hi02 = new SegmentHI_11();
			Hi02.setOrdinal(198);
			Hi02.parse(eis);
		}

		while (eis.peekSegment("HI", 1, "BF")) {
			if (Hi03 == null) Hi03 = new ArrayList();
			SegmentHI_13 tmp = new SegmentHI_13();
			tmp.setOrdinal(199);
			tmp.parse(eis);
			Hi03.add(tmp);
			if (Hi03.size() > 2) {
				eis.addError("Segment HI has too many instances.  It can only repeat 2 times");
				eis.eatSegments("HI");
				break;
			}
		}

		if (eis.peekSegment("HI", 1, new String[] { "BP", "BR" })) {
			Hi04 = new SegmentHI_14();
			Hi04.setOrdinal(200);
			Hi04.parse(eis);
		}

		while (eis.peekSegment("HI", 1, new String[] { "BO", "BQ" })) {
			if (Hi05 == null) Hi05 = new ArrayList();
			SegmentHI_8 tmp = new SegmentHI_8();
			tmp.setOrdinal(201);
			tmp.parse(eis);
			Hi05.add(tmp);
			if (Hi05.size() > 2) {
				eis.addError("Segment HI has too many instances.  It can only repeat 2 times");
				eis.eatSegments("HI");
				break;
			}
		}

		while (eis.peekSegment("HI", 1, "BI")) {
			if (Hi06 == null) Hi06 = new ArrayList();
			SegmentHI_9 tmp = new SegmentHI_9();
			tmp.setOrdinal(202);
			tmp.parse(eis);
			Hi06.add(tmp);
			if (Hi06.size() > 2) {
				eis.addError("Segment HI has too many instances.  It can only repeat 2 times");
				eis.eatSegments("HI");
				break;
			}
		}

		while (eis.peekSegment("HI", 1, "BH")) {
			if (Hi07 == null) Hi07 = new ArrayList();
			SegmentHI_9 tmp = new SegmentHI_9();
			tmp.setOrdinal(203);
			tmp.parse(eis);
			Hi07.add(tmp);
			if (Hi07.size() > 2) {
				eis.addError("Segment HI has too many instances.  It can only repeat 2 times");
				eis.eatSegments("HI");
				break;
			}
		}

		while (eis.peekSegment("HI", 1, "BE")) {
			if (Hi08 == null) Hi08 = new ArrayList();
			SegmentHI_12 tmp = new SegmentHI_12();
			tmp.setOrdinal(204);
			tmp.parse(eis);
			Hi08.add(tmp);
			if (Hi08.size() > 2) {
				eis.addError("Segment HI has too many instances.  It can only repeat 2 times");
				eis.eatSegments("HI");
				break;
			}
		}

		while (eis.peekSegment("HI", 1, "BG")) {
			if (Hi09 == null) Hi09 = new ArrayList();
			SegmentHI_13 tmp = new SegmentHI_13();
			tmp.setOrdinal(205);
			tmp.parse(eis);
			Hi09.add(tmp);
			if (Hi09.size() > 2) {
				eis.addError("Segment HI has too many instances.  It can only repeat 2 times");
				eis.eatSegments("HI");
				break;
			}
		}

		while (eis.peekSegment("HI", 1, "TC")) {
			if (Hi10 == null) Hi10 = new ArrayList();
			SegmentHI_13 tmp = new SegmentHI_13();
			tmp.setOrdinal(206);
			tmp.parse(eis);
			Hi10.add(tmp);
			if (Hi10.size() > 2) {
				eis.addError("Segment HI has too many instances.  It can only repeat 2 times");
				eis.eatSegments("HI");
				break;
			}
		}
		if (eis.peekSegment("HI")) {
			eis.addError("Segment HI could not be parsed.");
			eis.eatSegments("HI");
		}

		while (eis.peekSegment("QTY")) {
			if (Qty == null) Qty = new ArrayList();
			SegmentQTY_1 tmp = new SegmentQTY_1();
			tmp.setOrdinal(207);
			tmp.parse(eis);
			Qty.add(tmp);
			if (Qty.size() > 4) {
				eis.addError("Segment QTY has too many instances.  It can only repeat 4 times");
				eis.eatSegments("QTY");
				break;
			}
		}

		if (eis.peekSegment("HCP")) {
			Hcp = new SegmentHCP_1();
			Hcp.setOrdinal(208);
			Hcp.parse(eis);
		}

		while (true) {
			if (eis.peekSegment("CR7")) {
				if (loop2305 == null) loop2305 = new ArrayList();
				Loop2305 tmp = new Loop2305();
				tmp.parse(eis);
				loop2305.add(tmp);
			}
			else if (eis.peekSegment("NM1", 1, Loop2310A.TRIGGER_VALUES)) {
				if (loop2310A != null) {
					eis.addError("Only one instance of Loop 2310A is allowed.");
				} else {
					loop2310A = new Loop2310A();
					loop2310A.parse(eis);
				}
			}
			else if (eis.peekSegment("NM1", 1, Loop2310B.TRIGGER_VALUES)) {
				if (loop2310B != null) {
					eis.addError("Only one instance of Loop 2310B is allowed.");
				} else {
					loop2310B = new Loop2310B();
					loop2310B.parse(eis);
				}
			}
			else if (eis.peekSegment("NM1", 1, Loop2310C.TRIGGER_VALUES)) {
				if (loop2310C != null) {
					eis.addError("Only one instance of Loop 2310C is allowed.");
				} else {
					loop2310C = new Loop2310C();
					loop2310C.parse(eis);
				}
			}
			else if (eis.peekSegment("NM1")) {
				if (loop2310D == null) loop2310D = new ArrayList();
				Loop2310D tmp = new Loop2310D();
				tmp.parse(eis);
				loop2310D.add(tmp);
			}
			else if (eis.peekSegment("NM1", 1, Loop2310E.TRIGGER_VALUES)) {
				if (loop2310E != null) {
					eis.addError("Only one instance of Loop 2310E is allowed.");
				} else {
					loop2310E = new Loop2310E();
					loop2310E.parse(eis);
				}
			}
			else if (eis.peekSegment("SBR")) {
				if (loop2320 == null) loop2320 = new ArrayList();
				Loop2320 tmp = new Loop2320();
				tmp.parse(eis);
				loop2320.add(tmp);
			}
			else if (eis.peekSegment("LX")) {
				if (loop2400 == null) loop2400 = new ArrayList();
				Loop2400 tmp = new Loop2400();
				tmp.parse(eis);
				loop2400.add(tmp);
			}
			else {
				break;
			}
		}

		if (loop2305 != null && loop2305.size() > 6) {
			eis.addError("Loop 2305 has too many instances.  It can repeat only 6 times");
		}
		if (loop2310D != null && loop2310D.size() > 2) {
			eis.addError("Loop 2310D has too many instances.  It can repeat only 2 times");
		}
		if (loop2320 != null && loop2320.size() > 10) {
			eis.addError("Loop 2320 has too many instances.  It can repeat only 10 times");
		}
		if (loop2400 == null) {
			eis.addError("Loop 2400 must be used.");
		}
		if (loop2400 != null && loop2400.size() > 999) {
			eis.addError("Loop 2400 has too many instances.  It can repeat only 999 times");
		}
		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Clm != null) {
			Clm.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'CLM'");
		}

		if (Dtp01 != null) {
			Dtp01.emit(eos);
		}

		if (Dtp02 != null) {
			Dtp02.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'DTP02'");
		}

		if (Dtp03 != null) {
			Dtp03.emit(eos);
		}

		if (Cl1 != null) {
			Cl1.emit(eos);
		}

		if (Pwk != null) {
			int idx = 0, size = Pwk.size();
			while (idx < size) {
				getPwk(idx++).emit(eos);
			}
		}

		if (Cn1 != null) {
			Cn1.emit(eos);
		}

		if (Amt01 != null) {
			Amt01.emit(eos);
		}

		if (Amt02 != null) {
			Amt02.emit(eos);
		}

		if (Amt03 != null) {
			Amt03.emit(eos);
		}

		if (Amt04 != null) {
			Amt04.emit(eos);
		}

		if (Ref01 != null) {
			Ref01.emit(eos);
		}

		if (Ref02 != null) {
			Ref02.emit(eos);
		}

		if (Ref03 != null) {
			Ref03.emit(eos);
		}

		if (Ref04 != null) {
			int idx = 0, size = Ref04.size();
			while (idx < size) {
				getRef04(idx++).emit(eos);
			}
		}

		if (Ref05 != null) {
			Ref05.emit(eos);
		}

		if (Ref06 != null) {
			Ref06.emit(eos);
		}

		if (Ref07 != null) {
			Ref07.emit(eos);
		}

		if (Ref08 != null) {
			Ref08.emit(eos);
		}

		if (Ref09 != null) {
			int idx = 0, size = Ref09.size();
			while (idx < size) {
				getRef09(idx++).emit(eos);
			}
		}

		if (Ref10 != null) {
			Ref10.emit(eos);
		}

		if (Ref11 != null) {
			Ref11.emit(eos);
		}

		if (K3 != null) {
			int idx = 0, size = K3.size();
			while (idx < size) {
				getK3(idx++).emit(eos);
			}
		}

		if (Nte01 != null) {
			int idx = 0, size = Nte01.size();
			while (idx < size) {
				getNte01(idx++).emit(eos);
			}
		}

		if (Nte02 != null) {
			Nte02.emit(eos);
		}

		if (Cr6 != null) {
			Cr6.emit(eos);
		}

		if (Crc01 != null) {
			int idx = 0, size = Crc01.size();
			while (idx < size) {
				getCrc01(idx++).emit(eos);
			}
		}

		if (Crc02 != null) {
			int idx = 0, size = Crc02.size();
			while (idx < size) {
				getCrc02(idx++).emit(eos);
			}
		}

		if (Crc03 != null) {
			int idx = 0, size = Crc03.size();
			while (idx < size) {
				getCrc03(idx++).emit(eos);
			}
		}

		if (Hi01 != null) {
			Hi01.emit(eos);
		}

		if (Hi02 != null) {
			Hi02.emit(eos);
		}

		if (Hi03 != null) {
			int idx = 0, size = Hi03.size();
			while (idx < size) {
				getHi03(idx++).emit(eos);
			}
		}

		if (Hi04 != null) {
			Hi04.emit(eos);
		}

		if (Hi05 != null) {
			int idx = 0, size = Hi05.size();
			while (idx < size) {
				getHi05(idx++).emit(eos);
			}
		}

		if (Hi06 != null) {
			int idx = 0, size = Hi06.size();
			while (idx < size) {
				getHi06(idx++).emit(eos);
			}
		}

		if (Hi07 != null) {
			int idx = 0, size = Hi07.size();
			while (idx < size) {
				getHi07(idx++).emit(eos);
			}
		}

		if (Hi08 != null) {
			int idx = 0, size = Hi08.size();
			while (idx < size) {
				getHi08(idx++).emit(eos);
			}
		}

		if (Hi09 != null) {
			int idx = 0, size = Hi09.size();
			while (idx < size) {
				getHi09(idx++).emit(eos);
			}
		}

		if (Hi10 != null) {
			int idx = 0, size = Hi10.size();
			while (idx < size) {
				getHi10(idx++).emit(eos);
			}
		}

		if (Qty != null) {
			int idx = 0, size = Qty.size();
			while (idx < size) {
				getQty(idx++).emit(eos);
			}
		}

		if (Hcp != null) {
			Hcp.emit(eos);
		}

		if (loop2305 != null) {
			int idx = 0, size = loop2305.size();
			while (idx < size) {
				getLoop2305(idx++).emit(eos);
			}
		}

		if (loop2310A != null) {
			loop2310A.emit(eos);
		}

		if (loop2310B != null) {
			loop2310B.emit(eos);
		}

		if (loop2310C != null) {
			loop2310C.emit(eos);
		}

		if (loop2310D != null) {
			int idx = 0, size = loop2310D.size();
			while (idx < size) {
				getLoop2310D(idx++).emit(eos);
			}
		}

		if (loop2310E != null) {
			loop2310E.emit(eos);
		}

		if (loop2320 != null) {
			int idx = 0, size = loop2320.size();
			while (idx < size) {
				getLoop2320(idx++).emit(eos);
			}
		}

		if (loop2400 != null) {
			int idx = 0, size = loop2400.size();
			while (idx < size) {
				getLoop2400(idx++).emit(eos);
			}
		} else {
			eos.addError("Missing mandatory segment 'LOOP2400'");
		}

	}

	public EDIElement createCopy() {
		Loop2300 thisCopy = new Loop2300();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Clm != null) {
			thisCopy.setClm((SegmentCLM_2)Clm.createCopy());
		}

		if (Dtp01 != null) {
			thisCopy.setDtp01((SegmentDTP_1)Dtp01.createCopy());
		}

		if (Dtp02 != null) {
			thisCopy.setDtp02((SegmentDTP_1)Dtp02.createCopy());
		}

		if (Dtp03 != null) {
			thisCopy.setDtp03((SegmentDTP_1)Dtp03.createCopy());
		}

		if (Cl1 != null) {
			thisCopy.setCl1((SegmentCL1_1)Cl1.createCopy());
		}

		if (Pwk != null) {
			thisCopy.setPwk(new ArrayList());
			int idx = 0, size = Pwk.size();
			while (idx < size) {
				thisCopy.getPwk().add(getPwk(idx++).createCopy());
			}
		}

		if (Cn1 != null) {
			thisCopy.setCn1((SegmentCN1_1)Cn1.createCopy());
		}

		if (Amt01 != null) {
			thisCopy.setAmt01((SegmentAMT_1)Amt01.createCopy());
		}

		if (Amt02 != null) {
			thisCopy.setAmt02((SegmentAMT_1)Amt02.createCopy());
		}

		if (Amt03 != null) {
			thisCopy.setAmt03((SegmentAMT_1)Amt03.createCopy());
		}

		if (Amt04 != null) {
			thisCopy.setAmt04((SegmentAMT_1)Amt04.createCopy());
		}

		if (Ref01 != null) {
			thisCopy.setRef01((SegmentREF_1)Ref01.createCopy());
		}

		if (Ref02 != null) {
			thisCopy.setRef02((SegmentREF_1)Ref02.createCopy());
		}

		if (Ref03 != null) {
			thisCopy.setRef03((SegmentREF_1)Ref03.createCopy());
		}

		if (Ref04 != null) {
			thisCopy.setRef04(new ArrayList());
			int idx = 0, size = Ref04.size();
			while (idx < size) {
				thisCopy.getRef04().add(getRef04(idx++).createCopy());
			}
		}

		if (Ref05 != null) {
			thisCopy.setRef05((SegmentREF_1)Ref05.createCopy());
		}

		if (Ref06 != null) {
			thisCopy.setRef06((SegmentREF_1)Ref06.createCopy());
		}

		if (Ref07 != null) {
			thisCopy.setRef07((SegmentREF_1)Ref07.createCopy());
		}

		if (Ref08 != null) {
			thisCopy.setRef08((SegmentREF_1)Ref08.createCopy());
		}

		if (Ref09 != null) {
			thisCopy.setRef09(new ArrayList());
			int idx = 0, size = Ref09.size();
			while (idx < size) {
				thisCopy.getRef09().add(getRef09(idx++).createCopy());
			}
		}

		if (Ref10 != null) {
			thisCopy.setRef10((SegmentREF_1)Ref10.createCopy());
		}

		if (Ref11 != null) {
			thisCopy.setRef11((SegmentREF_1)Ref11.createCopy());
		}

		if (K3 != null) {
			thisCopy.setK3(new ArrayList());
			int idx = 0, size = K3.size();
			while (idx < size) {
				thisCopy.getK3().add(getK3(idx++).createCopy());
			}
		}

		if (Nte01 != null) {
			thisCopy.setNte01(new ArrayList());
			int idx = 0, size = Nte01.size();
			while (idx < size) {
				thisCopy.getNte01().add(getNte01(idx++).createCopy());
			}
		}

		if (Nte02 != null) {
			thisCopy.setNte02((SegmentNTE_1)Nte02.createCopy());
		}

		if (Cr6 != null) {
			thisCopy.setCr6((SegmentCR6_1)Cr6.createCopy());
		}

		if (Crc01 != null) {
			thisCopy.setCrc01(new ArrayList());
			int idx = 0, size = Crc01.size();
			while (idx < size) {
				thisCopy.getCrc01().add(getCrc01(idx++).createCopy());
			}
		}

		if (Crc02 != null) {
			thisCopy.setCrc02(new ArrayList());
			int idx = 0, size = Crc02.size();
			while (idx < size) {
				thisCopy.getCrc02().add(getCrc02(idx++).createCopy());
			}
		}

		if (Crc03 != null) {
			thisCopy.setCrc03(new ArrayList());
			int idx = 0, size = Crc03.size();
			while (idx < size) {
				thisCopy.getCrc03().add(getCrc03(idx++).createCopy());
			}
		}

		if (Hi01 != null) {
			thisCopy.setHi01((SegmentHI_10)Hi01.createCopy());
		}

		if (Hi02 != null) {
			thisCopy.setHi02((SegmentHI_11)Hi02.createCopy());
		}

		if (Hi03 != null) {
			thisCopy.setHi03(new ArrayList());
			int idx = 0, size = Hi03.size();
			while (idx < size) {
				thisCopy.getHi03().add(getHi03(idx++).createCopy());
			}
		}

		if (Hi04 != null) {
			thisCopy.setHi04((SegmentHI_14)Hi04.createCopy());
		}

		if (Hi05 != null) {
			thisCopy.setHi05(new ArrayList());
			int idx = 0, size = Hi05.size();
			while (idx < size) {
				thisCopy.getHi05().add(getHi05(idx++).createCopy());
			}
		}

		if (Hi06 != null) {
			thisCopy.setHi06(new ArrayList());
			int idx = 0, size = Hi06.size();
			while (idx < size) {
				thisCopy.getHi06().add(getHi06(idx++).createCopy());
			}
		}

		if (Hi07 != null) {
			thisCopy.setHi07(new ArrayList());
			int idx = 0, size = Hi07.size();
			while (idx < size) {
				thisCopy.getHi07().add(getHi07(idx++).createCopy());
			}
		}

		if (Hi08 != null) {
			thisCopy.setHi08(new ArrayList());
			int idx = 0, size = Hi08.size();
			while (idx < size) {
				thisCopy.getHi08().add(getHi08(idx++).createCopy());
			}
		}

		if (Hi09 != null) {
			thisCopy.setHi09(new ArrayList());
			int idx = 0, size = Hi09.size();
			while (idx < size) {
				thisCopy.getHi09().add(getHi09(idx++).createCopy());
			}
		}

		if (Hi10 != null) {
			thisCopy.setHi10(new ArrayList());
			int idx = 0, size = Hi10.size();
			while (idx < size) {
				thisCopy.getHi10().add(getHi10(idx++).createCopy());
			}
		}

		if (Qty != null) {
			thisCopy.setQty(new ArrayList());
			int idx = 0, size = Qty.size();
			while (idx < size) {
				thisCopy.getQty().add(getQty(idx++).createCopy());
			}
		}

		if (Hcp != null) {
			thisCopy.setHcp((SegmentHCP_1)Hcp.createCopy());
		}

		if (loop2305 != null) {
			thisCopy.setLoop2305(new ArrayList());
			int idx = 0, size = loop2305.size();
			while (idx < size) {
				thisCopy.getLoop2305().add(getLoop2305(idx++).createCopy());
			}
		}

		if (loop2310A != null) {
			thisCopy.setLoop2310A((Loop2310A)loop2310A.createCopy());
		}

		if (loop2310B != null) {
			thisCopy.setLoop2310B((Loop2310B)loop2310B.createCopy());
		}

		if (loop2310C != null) {
			thisCopy.setLoop2310C((Loop2310C)loop2310C.createCopy());
		}

		if (loop2310D != null) {
			thisCopy.setLoop2310D(new ArrayList());
			int idx = 0, size = loop2310D.size();
			while (idx < size) {
				thisCopy.getLoop2310D().add(getLoop2310D(idx++).createCopy());
			}
		}

		if (loop2310E != null) {
			thisCopy.setLoop2310E((Loop2310E)loop2310E.createCopy());
		}

		if (loop2320 != null) {
			thisCopy.setLoop2320(new ArrayList());
			int idx = 0, size = loop2320.size();
			while (idx < size) {
				thisCopy.getLoop2320().add(getLoop2320(idx++).createCopy());
			}
		}

		if (loop2400 != null) {
			thisCopy.setLoop2400(new ArrayList());
			int idx = 0, size = loop2400.size();
			while (idx < size) {
				thisCopy.getLoop2400().add(getLoop2400(idx++).createCopy());
			}
		}

		return thisCopy;
	}

}
