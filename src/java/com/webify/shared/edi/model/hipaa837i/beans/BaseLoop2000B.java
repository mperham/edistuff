package com.webify.shared.edi.model.hipaa837i.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa837i.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoop2000B extends EDILoop {

	private static final Log log = LogFactory.getLog(Loop2000B.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	public static final String[] TRIGGER_VALUES = new String[] {
		"22"
	};

	private List children;
	public void setChildList(List kids) { children = kids; }
	public List getChildList() { 
		if (children == null) return Collections.EMPTY_LIST;
		return children;
	}

	public void addChild(Loop2000C kid) {
		if (children == null) children = new ArrayList();
		children.add(kid);
	}
	public Loop2000C[] getChildren() { 
		List kids = getChildList();
		return (Loop2000C[]) kids.toArray(new Loop2000C[kids.size()]);
	}
	public Loop2000C getChild(int idx) { 
		if (children == null || idx >= children.size()) {
			throw new ArrayIndexOutOfBoundsException(Integer.toString(idx));
		}
		return (Loop2000C) children.get(idx);
	}

	private Loop2000A parent;
	public Loop2000A getParent() { return parent; }
	public void setParent(Loop2000A dad) { parent = dad; }

	// Segments
	private SegmentHL_2 Hl;
	public SegmentHL_2 getHl() { return Hl; }
	public void setHl(SegmentHL_2 seg) { Hl = seg; }

	private SegmentSBR_1 Sbr;
	public SegmentSBR_1 getSbr() { return Sbr; }
	public void setSbr(SegmentSBR_1 seg) { Sbr = seg; }

	private SegmentPAT_1 Pat;
	public SegmentPAT_1 getPat() { return Pat; }
	public void setPat(SegmentPAT_1 seg) { Pat = seg; }


	// Loops
	private Loop2010BA loop2010BA;
	public Loop2010BA getLoop2010BA() { return loop2010BA; }
	public void setLoop2010BA(Loop2010BA loop) { loop2010BA = loop; }

	private Loop2010BB loop2010BB;
	public Loop2010BB getLoop2010BB() { return loop2010BB; }
	public void setLoop2010BB(Loop2010BB loop) { loop2010BB = loop; }

	private Loop2010BC loop2010BC;
	public Loop2010BC getLoop2010BC() { return loop2010BC; }
	public void setLoop2010BC(Loop2010BC loop) { loop2010BC = loop; }

	private Loop2010BD loop2010BD;
	public Loop2010BD getLoop2010BD() { return loop2010BD; }
	public void setLoop2010BD(Loop2010BD loop) { loop2010BD = loop; }

	private List loop2300;
	public Loop2300 getLoop2300(int idx) { 
		if (loop2300 == null || idx >= loop2300.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2300");
		}
		return (Loop2300) loop2300.get(idx);
	}
	public List getLoop2300() {
		return loop2300;
	}
	public void setLoop2300(List loop) { loop2300 = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 2000B");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (!eis.peekSegment("HL")) {
			eis.addError("A single instance of Segment HL is required.");
		} else {
			Hl = new SegmentHL_2();
			Hl.setOrdinal(20);
			Hl.parse(eis);
		}

		if (!eis.peekSegment("SBR")) {
			eis.addError("A single instance of Segment SBR is required.");
		} else {
			Sbr = new SegmentSBR_1();
			Sbr.setOrdinal(21);
			Sbr.parse(eis);
		}

		if (eis.peekSegment("PAT")) {
			Pat = new SegmentPAT_1();
			Pat.setOrdinal(22);
			Pat.parse(eis);
		}

		while (true) {
			if (eis.peekSegment("NM1", 1, Loop2010BA.TRIGGER_VALUES)) {
				if (loop2010BA != null) {
					eis.addError("Only one instance of Loop 2010BA is allowed.");
				} else {
					loop2010BA = new Loop2010BA();
					loop2010BA.parse(eis);
				}
			}
			else if (eis.peekSegment("NM1", 1, Loop2010BB.TRIGGER_VALUES)) {
				if (loop2010BB != null) {
					eis.addError("Only one instance of Loop 2010BB is allowed.");
				} else {
					loop2010BB = new Loop2010BB();
					loop2010BB.parse(eis);
				}
			}
			else if (eis.peekSegment("NM1", 1, Loop2010BC.TRIGGER_VALUES)) {
				if (loop2010BC != null) {
					eis.addError("Only one instance of Loop 2010BC is allowed.");
				} else {
					loop2010BC = new Loop2010BC();
					loop2010BC.parse(eis);
				}
			}
			else if (eis.peekSegment("NM1", 1, Loop2010BD.TRIGGER_VALUES)) {
				if (loop2010BD != null) {
					eis.addError("Only one instance of Loop 2010BD is allowed.");
				} else {
					loop2010BD = new Loop2010BD();
					loop2010BD.parse(eis);
				}
			}
			else if (eis.peekSegment("CLM")) {
				if (loop2300 == null) loop2300 = new ArrayList();
				Loop2300 tmp = new Loop2300();
				tmp.parse(eis);
				loop2300.add(tmp);
			}
			else {
				break;
			}
		}

		if (loop2010BA == null) {
			eis.addError("An instance of Loop 2010BA is required.");
		}
		if (loop2010BC == null) {
			eis.addError("An instance of Loop 2010BC is required.");
		}
		if (loop2300 != null && loop2300.size() > 100) {
			eis.addError("Loop 2300 has too many instances.  It can repeat only 100 times");
		}
		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Hl != null) {
			Hl.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'HL'");
		}

		if (Sbr != null) {
			Sbr.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'SBR'");
		}

		if (Pat != null) {
			Pat.emit(eos);
		}

		if (loop2010BA != null) {
			loop2010BA.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'LOOP2010BA'");
		}

		if (loop2010BB != null) {
			loop2010BB.emit(eos);
		}

		if (loop2010BC != null) {
			loop2010BC.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'LOOP2010BC'");
		}

		if (loop2010BD != null) {
			loop2010BD.emit(eos);
		}

		if (loop2300 != null) {
			int idx = 0, size = loop2300.size();
			while (idx < size) {
				getLoop2300(idx++).emit(eos);
			}
		}

	}

	public EDIElement createCopy() {
		Loop2000B thisCopy = new Loop2000B();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Hl != null) {
			thisCopy.setHl((SegmentHL_2)Hl.createCopy());
		}

		if (Sbr != null) {
			thisCopy.setSbr((SegmentSBR_1)Sbr.createCopy());
		}

		if (Pat != null) {
			thisCopy.setPat((SegmentPAT_1)Pat.createCopy());
		}

		if (loop2010BA != null) {
			thisCopy.setLoop2010BA((Loop2010BA)loop2010BA.createCopy());
		}

		if (loop2010BB != null) {
			thisCopy.setLoop2010BB((Loop2010BB)loop2010BB.createCopy());
		}

		if (loop2010BC != null) {
			thisCopy.setLoop2010BC((Loop2010BC)loop2010BC.createCopy());
		}

		if (loop2010BD != null) {
			thisCopy.setLoop2010BD((Loop2010BD)loop2010BD.createCopy());
		}

		if (loop2300 != null) {
			thisCopy.setLoop2300(new ArrayList());
			int idx = 0, size = loop2300.size();
			while (idx < size) {
				thisCopy.getLoop2300().add(getLoop2300(idx++).createCopy());
			}
		}

		return thisCopy;
	}

}
