package com.webify.shared.edi.model.hipaa837i.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa837i.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoop2430 extends EDILoop {

	private static final Log log = LogFactory.getLog(Loop2430.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentSVD_1 Svd;
	public SegmentSVD_1 getSvd() { return Svd; }
	public void setSvd(SegmentSVD_1 seg) { Svd = seg; }

	private List Cas;
	public SegmentCAS_1 getCas(int idx) { 
		if (Cas == null || idx >= Cas.size()) {
			throw new ArrayIndexOutOfBoundsException("Cas");
		}
		return (SegmentCAS_1) Cas.get(idx);
	}
	public List getCas() {
		return Cas;
	}
	public void setCas(List segs) { Cas = segs; }

	private SegmentDTP_1 Dtp;
	public SegmentDTP_1 getDtp() { return Dtp; }
	public void setDtp(SegmentDTP_1 seg) { Dtp = seg; }


	// Loops

	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 2430");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (eis.peekSegment("SVD")) {
			Svd = new SegmentSVD_1();
			Svd.setOrdinal(287);
			Svd.parse(eis);
		}

		while (eis.peekSegment("CAS")) {
			if (Cas == null) Cas = new ArrayList();
			SegmentCAS_1 tmp = new SegmentCAS_1();
			tmp.setOrdinal(288);
			tmp.parse(eis);
			Cas.add(tmp);
			if (Cas.size() > 99) {
				eis.addError("Segment CAS has too many instances.  It can only repeat 99 times");
				eis.eatSegments("CAS");
				break;
			}
		}

		if (eis.peekSegment("DTP")) {
			Dtp = new SegmentDTP_1();
			Dtp.setOrdinal(289);
			Dtp.parse(eis);
		}

		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Svd != null) {
			Svd.emit(eos);
		}

		if (Cas != null) {
			int idx = 0, size = Cas.size();
			while (idx < size) {
				getCas(idx++).emit(eos);
			}
		}

		if (Dtp != null) {
			Dtp.emit(eos);
		}

	}

	public EDIElement createCopy() {
		Loop2430 thisCopy = new Loop2430();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Svd != null) {
			thisCopy.setSvd((SegmentSVD_1)Svd.createCopy());
		}

		if (Cas != null) {
			thisCopy.setCas(new ArrayList());
			int idx = 0, size = Cas.size();
			while (idx < size) {
				thisCopy.getCas().add(getCas(idx++).createCopy());
			}
		}

		if (Dtp != null) {
			thisCopy.setDtp((SegmentDTP_1)Dtp.createCopy());
		}

		return thisCopy;
	}

}
