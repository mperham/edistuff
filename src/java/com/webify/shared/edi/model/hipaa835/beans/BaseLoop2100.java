package com.webify.shared.edi.model.hipaa835.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa835.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoop2100 extends EDILoop {

	private static final Log log = LogFactory.getLog(Loop2100.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentCLP_1 Clp;
	public SegmentCLP_1 getClp() { return Clp; }
	public void setClp(SegmentCLP_1 seg) { Clp = seg; }

	private List Cas;
	public SegmentCAS_1 getCas(int idx) { 
		if (Cas == null || idx >= Cas.size()) {
			throw new ArrayIndexOutOfBoundsException("Cas");
		}
		return (SegmentCAS_1) Cas.get(idx);
	}
	public List getCas() {
		return Cas;
	}
	public void setCas(List segs) { Cas = segs; }

	private SegmentNM1_1 Nm101;
	public SegmentNM1_1 getNm101() { return Nm101; }
	public void setNm101(SegmentNM1_1 seg) { Nm101 = seg; }

	private SegmentNM1_2 Nm102;
	public SegmentNM1_2 getNm102() { return Nm102; }
	public void setNm102(SegmentNM1_2 seg) { Nm102 = seg; }

	private SegmentNM1_3 Nm103;
	public SegmentNM1_3 getNm103() { return Nm103; }
	public void setNm103(SegmentNM1_3 seg) { Nm103 = seg; }

	private SegmentNM1_2 Nm104;
	public SegmentNM1_2 getNm104() { return Nm104; }
	public void setNm104(SegmentNM1_2 seg) { Nm104 = seg; }

	private SegmentNM1_4 Nm105;
	public SegmentNM1_4 getNm105() { return Nm105; }
	public void setNm105(SegmentNM1_4 seg) { Nm105 = seg; }

	private List Nm106;
	public SegmentNM1_4 getNm106(int idx) { 
		if (Nm106 == null || idx >= Nm106.size()) {
			throw new ArrayIndexOutOfBoundsException("Nm106");
		}
		return (SegmentNM1_4) Nm106.get(idx);
	}
	public List getNm106() {
		return Nm106;
	}
	public void setNm106(List segs) { Nm106 = segs; }

	private SegmentMIA_1 Mia;
	public SegmentMIA_1 getMia() { return Mia; }
	public void setMia(SegmentMIA_1 seg) { Mia = seg; }

	private SegmentMOA Moa;
	public SegmentMOA getMoa() { return Moa; }
	public void setMoa(SegmentMOA seg) { Moa = seg; }

	private List Ref01;
	public SegmentREF_1 getRef01(int idx) { 
		if (Ref01 == null || idx >= Ref01.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref01");
		}
		return (SegmentREF_1) Ref01.get(idx);
	}
	public List getRef01() {
		return Ref01;
	}
	public void setRef01(List segs) { Ref01 = segs; }

	private List Ref02;
	public SegmentREF_1 getRef02(int idx) { 
		if (Ref02 == null || idx >= Ref02.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref02");
		}
		return (SegmentREF_1) Ref02.get(idx);
	}
	public List getRef02() {
		return Ref02;
	}
	public void setRef02(List segs) { Ref02 = segs; }

	private List Dtm;
	public SegmentDTM_1 getDtm(int idx) { 
		if (Dtm == null || idx >= Dtm.size()) {
			throw new ArrayIndexOutOfBoundsException("Dtm");
		}
		return (SegmentDTM_1) Dtm.get(idx);
	}
	public List getDtm() {
		return Dtm;
	}
	public void setDtm(List segs) { Dtm = segs; }

	private List Per;
	public SegmentPER_1 getPer(int idx) { 
		if (Per == null || idx >= Per.size()) {
			throw new ArrayIndexOutOfBoundsException("Per");
		}
		return (SegmentPER_1) Per.get(idx);
	}
	public List getPer() {
		return Per;
	}
	public void setPer(List segs) { Per = segs; }

	private List Amt;
	public SegmentAMT_1 getAmt(int idx) { 
		if (Amt == null || idx >= Amt.size()) {
			throw new ArrayIndexOutOfBoundsException("Amt");
		}
		return (SegmentAMT_1) Amt.get(idx);
	}
	public List getAmt() {
		return Amt;
	}
	public void setAmt(List segs) { Amt = segs; }

	private List Qty;
	public SegmentQTY_1 getQty(int idx) { 
		if (Qty == null || idx >= Qty.size()) {
			throw new ArrayIndexOutOfBoundsException("Qty");
		}
		return (SegmentQTY_1) Qty.get(idx);
	}
	public List getQty() {
		return Qty;
	}
	public void setQty(List segs) { Qty = segs; }


	// Loops
	private List loop2110;
	public Loop2110 getLoop2110(int idx) { 
		if (loop2110 == null || idx >= loop2110.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2110");
		}
		return (Loop2110) loop2110.get(idx);
	}
	public List getLoop2110() {
		return loop2110;
	}
	public void setLoop2110(List loop) { loop2110 = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 2100");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (!eis.peekSegment("CLP")) {
			eis.addError("A single instance of Segment CLP is required.");
		} else {
			Clp = new SegmentCLP_1();
			Clp.setOrdinal(20);
			Clp.parse(eis);
		}

		while (eis.peekSegment("CAS")) {
			if (Cas == null) Cas = new ArrayList();
			SegmentCAS_1 tmp = new SegmentCAS_1();
			tmp.setOrdinal(21);
			tmp.parse(eis);
			Cas.add(tmp);
			if (Cas.size() > 99) {
				eis.addError("Segment CAS has too many instances.  It can only repeat 99 times");
				eis.eatSegments("CAS");
				break;
			}
		}

		if (!eis.peekSegment("NM1", 1, "QC")) {
			eis.addError("A single instance of Segment NM1 is required.");
		} else {
			Nm101 = new SegmentNM1_1();
			Nm101.setOrdinal(22);
			Nm101.parse(eis);
		}

		if (eis.peekSegment("NM1", 1, "IL")) {
			Nm102 = new SegmentNM1_2();
			Nm102.setOrdinal(23);
			Nm102.parse(eis);
		}

		if (eis.peekSegment("NM1", 1, "74")) {
			Nm103 = new SegmentNM1_3();
			Nm103.setOrdinal(24);
			Nm103.parse(eis);
		}

		if (eis.peekSegment("NM1", 1, "82")) {
			Nm104 = new SegmentNM1_2();
			Nm104.setOrdinal(25);
			Nm104.parse(eis);
		}

		if (eis.peekSegment("NM1", 1, "TT")) {
			Nm105 = new SegmentNM1_4();
			Nm105.setOrdinal(26);
			Nm105.parse(eis);
		}

		while (eis.peekSegment("NM1", 1, "PR")) {
			if (Nm106 == null) Nm106 = new ArrayList();
			SegmentNM1_4 tmp = new SegmentNM1_4();
			tmp.setOrdinal(27);
			tmp.parse(eis);
			Nm106.add(tmp);
			if (Nm106.size() > 2) {
				eis.addError("Segment NM1 has too many instances.  It can only repeat 2 times");
				eis.eatSegments("NM1");
				break;
			}
		}
		if (eis.peekSegment("NM1")) {
			eis.addError("Segment NM1 could not be parsed.");
			eis.eatSegments("NM1");
		}

		if (eis.peekSegment("MIA")) {
			Mia = new SegmentMIA_1();
			Mia.setOrdinal(28);
			Mia.parse(eis);
		}

		if (eis.peekSegment("MOA")) {
			Moa = new SegmentMOA();
			Moa.setOrdinal(29);
			Moa.parse(eis);
		}

		while (eis.peekSegment("REF", 1, new String[] { "1L", "1W", "9A", "9C", "A6", "BB", "CE", "EA", "F8", "G1", "G3", "IG", "SY" })) {
			if (Ref01 == null) Ref01 = new ArrayList();
			SegmentREF_1 tmp = new SegmentREF_1();
			tmp.setOrdinal(30);
			tmp.parse(eis);
			Ref01.add(tmp);
			if (Ref01.size() > 5) {
				eis.addError("Segment REF has too many instances.  It can only repeat 5 times");
				eis.eatSegments("REF");
				break;
			}
		}

		while (eis.peekSegment("REF", 1, new String[] { "1A", "1B", "1C", "1D", "1G", "1H", "D3", "G2" })) {
			if (Ref02 == null) Ref02 = new ArrayList();
			SegmentREF_1 tmp = new SegmentREF_1();
			tmp.setOrdinal(31);
			tmp.parse(eis);
			Ref02.add(tmp);
			if (Ref02.size() > 10) {
				eis.addError("Segment REF has too many instances.  It can only repeat 10 times");
				eis.eatSegments("REF");
				break;
			}
		}
		if (eis.peekSegment("REF")) {
			eis.addError("Segment REF could not be parsed.");
			eis.eatSegments("REF");
		}

		while (eis.peekSegment("DTM")) {
			if (Dtm == null) Dtm = new ArrayList();
			SegmentDTM_1 tmp = new SegmentDTM_1();
			tmp.setOrdinal(32);
			tmp.parse(eis);
			Dtm.add(tmp);
			if (Dtm.size() > 4) {
				eis.addError("Segment DTM has too many instances.  It can only repeat 4 times");
				eis.eatSegments("DTM");
				break;
			}
		}

		while (eis.peekSegment("PER")) {
			if (Per == null) Per = new ArrayList();
			SegmentPER_1 tmp = new SegmentPER_1();
			tmp.setOrdinal(33);
			tmp.parse(eis);
			Per.add(tmp);
			if (Per.size() > 3) {
				eis.addError("Segment PER has too many instances.  It can only repeat 3 times");
				eis.eatSegments("PER");
				break;
			}
		}

		while (eis.peekSegment("AMT")) {
			if (Amt == null) Amt = new ArrayList();
			SegmentAMT_1 tmp = new SegmentAMT_1();
			tmp.setOrdinal(34);
			tmp.parse(eis);
			Amt.add(tmp);
			if (Amt.size() > 14) {
				eis.addError("Segment AMT has too many instances.  It can only repeat 14 times");
				eis.eatSegments("AMT");
				break;
			}
		}

		while (eis.peekSegment("QTY")) {
			if (Qty == null) Qty = new ArrayList();
			SegmentQTY_1 tmp = new SegmentQTY_1();
			tmp.setOrdinal(35);
			tmp.parse(eis);
			Qty.add(tmp);
			if (Qty.size() > 15) {
				eis.addError("Segment QTY has too many instances.  It can only repeat 15 times");
				eis.eatSegments("QTY");
				break;
			}
		}

		while (true) {
			if (eis.peekSegment("SVC")) {
				if (loop2110 == null) loop2110 = new ArrayList();
				Loop2110 tmp = new Loop2110();
				tmp.parse(eis);
				loop2110.add(tmp);
			}
			else {
				break;
			}
		}

		if (loop2110 != null && loop2110.size() > 999) {
			eis.addError("Loop 2110 has too many instances.  It can repeat only 999 times");
		}
		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Clp != null) {
			Clp.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'CLP'");
		}

		if (Cas != null) {
			int idx = 0, size = Cas.size();
			while (idx < size) {
				getCas(idx++).emit(eos);
			}
		}

		if (Nm101 != null) {
			Nm101.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'NM101'");
		}

		if (Nm102 != null) {
			Nm102.emit(eos);
		}

		if (Nm103 != null) {
			Nm103.emit(eos);
		}

		if (Nm104 != null) {
			Nm104.emit(eos);
		}

		if (Nm105 != null) {
			Nm105.emit(eos);
		}

		if (Nm106 != null) {
			int idx = 0, size = Nm106.size();
			while (idx < size) {
				getNm106(idx++).emit(eos);
			}
		}

		if (Mia != null) {
			Mia.emit(eos);
		}

		if (Moa != null) {
			Moa.emit(eos);
		}

		if (Ref01 != null) {
			int idx = 0, size = Ref01.size();
			while (idx < size) {
				getRef01(idx++).emit(eos);
			}
		}

		if (Ref02 != null) {
			int idx = 0, size = Ref02.size();
			while (idx < size) {
				getRef02(idx++).emit(eos);
			}
		}

		if (Dtm != null) {
			int idx = 0, size = Dtm.size();
			while (idx < size) {
				getDtm(idx++).emit(eos);
			}
		}

		if (Per != null) {
			int idx = 0, size = Per.size();
			while (idx < size) {
				getPer(idx++).emit(eos);
			}
		}

		if (Amt != null) {
			int idx = 0, size = Amt.size();
			while (idx < size) {
				getAmt(idx++).emit(eos);
			}
		}

		if (Qty != null) {
			int idx = 0, size = Qty.size();
			while (idx < size) {
				getQty(idx++).emit(eos);
			}
		}

		if (loop2110 != null) {
			int idx = 0, size = loop2110.size();
			while (idx < size) {
				getLoop2110(idx++).emit(eos);
			}
		}

	}

	public EDIElement createCopy() {
		Loop2100 thisCopy = new Loop2100();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Clp != null) {
			thisCopy.setClp((SegmentCLP_1)Clp.createCopy());
		}

		if (Cas != null) {
			thisCopy.setCas(new ArrayList());
			int idx = 0, size = Cas.size();
			while (idx < size) {
				thisCopy.getCas().add(getCas(idx++).createCopy());
			}
		}

		if (Nm101 != null) {
			thisCopy.setNm101((SegmentNM1_1)Nm101.createCopy());
		}

		if (Nm102 != null) {
			thisCopy.setNm102((SegmentNM1_2)Nm102.createCopy());
		}

		if (Nm103 != null) {
			thisCopy.setNm103((SegmentNM1_3)Nm103.createCopy());
		}

		if (Nm104 != null) {
			thisCopy.setNm104((SegmentNM1_2)Nm104.createCopy());
		}

		if (Nm105 != null) {
			thisCopy.setNm105((SegmentNM1_4)Nm105.createCopy());
		}

		if (Nm106 != null) {
			thisCopy.setNm106(new ArrayList());
			int idx = 0, size = Nm106.size();
			while (idx < size) {
				thisCopy.getNm106().add(getNm106(idx++).createCopy());
			}
		}

		if (Mia != null) {
			thisCopy.setMia((SegmentMIA_1)Mia.createCopy());
		}

		if (Moa != null) {
			thisCopy.setMoa((SegmentMOA)Moa.createCopy());
		}

		if (Ref01 != null) {
			thisCopy.setRef01(new ArrayList());
			int idx = 0, size = Ref01.size();
			while (idx < size) {
				thisCopy.getRef01().add(getRef01(idx++).createCopy());
			}
		}

		if (Ref02 != null) {
			thisCopy.setRef02(new ArrayList());
			int idx = 0, size = Ref02.size();
			while (idx < size) {
				thisCopy.getRef02().add(getRef02(idx++).createCopy());
			}
		}

		if (Dtm != null) {
			thisCopy.setDtm(new ArrayList());
			int idx = 0, size = Dtm.size();
			while (idx < size) {
				thisCopy.getDtm().add(getDtm(idx++).createCopy());
			}
		}

		if (Per != null) {
			thisCopy.setPer(new ArrayList());
			int idx = 0, size = Per.size();
			while (idx < size) {
				thisCopy.getPer().add(getPer(idx++).createCopy());
			}
		}

		if (Amt != null) {
			thisCopy.setAmt(new ArrayList());
			int idx = 0, size = Amt.size();
			while (idx < size) {
				thisCopy.getAmt().add(getAmt(idx++).createCopy());
			}
		}

		if (Qty != null) {
			thisCopy.setQty(new ArrayList());
			int idx = 0, size = Qty.size();
			while (idx < size) {
				thisCopy.getQty().add(getQty(idx++).createCopy());
			}
		}

		if (loop2110 != null) {
			thisCopy.setLoop2110(new ArrayList());
			int idx = 0, size = loop2110.size();
			while (idx < size) {
				thisCopy.getLoop2110().add(getLoop2110(idx++).createCopy());
			}
		}

		return thisCopy;
	}

}
