package com.webify.shared.edi.model.hipaa835.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa835.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoop2110 extends EDILoop {

	private static final Log log = LogFactory.getLog(Loop2110.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentSVC_1 Svc;
	public SegmentSVC_1 getSvc() { return Svc; }
	public void setSvc(SegmentSVC_1 seg) { Svc = seg; }

	private List Dtm;
	public SegmentDTM_1 getDtm(int idx) { 
		if (Dtm == null || idx >= Dtm.size()) {
			throw new ArrayIndexOutOfBoundsException("Dtm");
		}
		return (SegmentDTM_1) Dtm.get(idx);
	}
	public List getDtm() {
		return Dtm;
	}
	public void setDtm(List segs) { Dtm = segs; }

	private List Cas;
	public SegmentCAS_1 getCas(int idx) { 
		if (Cas == null || idx >= Cas.size()) {
			throw new ArrayIndexOutOfBoundsException("Cas");
		}
		return (SegmentCAS_1) Cas.get(idx);
	}
	public List getCas() {
		return Cas;
	}
	public void setCas(List segs) { Cas = segs; }

	private List Ref01;
	public SegmentREF_1 getRef01(int idx) { 
		if (Ref01 == null || idx >= Ref01.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref01");
		}
		return (SegmentREF_1) Ref01.get(idx);
	}
	public List getRef01() {
		return Ref01;
	}
	public void setRef01(List segs) { Ref01 = segs; }

	private List Ref02;
	public SegmentREF_1 getRef02(int idx) { 
		if (Ref02 == null || idx >= Ref02.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref02");
		}
		return (SegmentREF_1) Ref02.get(idx);
	}
	public List getRef02() {
		return Ref02;
	}
	public void setRef02(List segs) { Ref02 = segs; }

	private List Amt;
	public SegmentAMT_1 getAmt(int idx) { 
		if (Amt == null || idx >= Amt.size()) {
			throw new ArrayIndexOutOfBoundsException("Amt");
		}
		return (SegmentAMT_1) Amt.get(idx);
	}
	public List getAmt() {
		return Amt;
	}
	public void setAmt(List segs) { Amt = segs; }

	private List Qty;
	public SegmentQTY_1 getQty(int idx) { 
		if (Qty == null || idx >= Qty.size()) {
			throw new ArrayIndexOutOfBoundsException("Qty");
		}
		return (SegmentQTY_1) Qty.get(idx);
	}
	public List getQty() {
		return Qty;
	}
	public void setQty(List segs) { Qty = segs; }

	private List Lq;
	public SegmentLQ_1 getLq(int idx) { 
		if (Lq == null || idx >= Lq.size()) {
			throw new ArrayIndexOutOfBoundsException("Lq");
		}
		return (SegmentLQ_1) Lq.get(idx);
	}
	public List getLq() {
		return Lq;
	}
	public void setLq(List segs) { Lq = segs; }


	// Loops

	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 2110");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (eis.peekSegment("SVC")) {
			Svc = new SegmentSVC_1();
			Svc.setOrdinal(36);
			Svc.parse(eis);
		}

		while (eis.peekSegment("DTM")) {
			if (Dtm == null) Dtm = new ArrayList();
			SegmentDTM_1 tmp = new SegmentDTM_1();
			tmp.setOrdinal(37);
			tmp.parse(eis);
			Dtm.add(tmp);
			if (Dtm.size() > 3) {
				eis.addError("Segment DTM has too many instances.  It can only repeat 3 times");
				eis.eatSegments("DTM");
				break;
			}
		}

		while (eis.peekSegment("CAS")) {
			if (Cas == null) Cas = new ArrayList();
			SegmentCAS_1 tmp = new SegmentCAS_1();
			tmp.setOrdinal(38);
			tmp.parse(eis);
			Cas.add(tmp);
			if (Cas.size() > 99) {
				eis.addError("Segment CAS has too many instances.  It can only repeat 99 times");
				eis.eatSegments("CAS");
				break;
			}
		}

		while (eis.peekSegment("REF", 1, new String[] { "1S", "6R", "BB", "E9", "G1", "G3", "LU", "RB" })) {
			if (Ref01 == null) Ref01 = new ArrayList();
			SegmentREF_1 tmp = new SegmentREF_1();
			tmp.setOrdinal(39);
			tmp.parse(eis);
			Ref01.add(tmp);
			if (Ref01.size() > 7) {
				eis.addError("Segment REF has too many instances.  It can only repeat 7 times");
				eis.eatSegments("REF");
				break;
			}
		}

		while (eis.peekSegment("REF", 1, new String[] { "1A", "1B", "1C", "1D", "1G", "1H", "1J", "HPI", "SY", "TJ" })) {
			if (Ref02 == null) Ref02 = new ArrayList();
			SegmentREF_1 tmp = new SegmentREF_1();
			tmp.setOrdinal(40);
			tmp.parse(eis);
			Ref02.add(tmp);
			if (Ref02.size() > 10) {
				eis.addError("Segment REF has too many instances.  It can only repeat 10 times");
				eis.eatSegments("REF");
				break;
			}
		}
		if (eis.peekSegment("REF")) {
			eis.addError("Segment REF could not be parsed.");
			eis.eatSegments("REF");
		}

		while (eis.peekSegment("AMT")) {
			if (Amt == null) Amt = new ArrayList();
			SegmentAMT_1 tmp = new SegmentAMT_1();
			tmp.setOrdinal(41);
			tmp.parse(eis);
			Amt.add(tmp);
			if (Amt.size() > 12) {
				eis.addError("Segment AMT has too many instances.  It can only repeat 12 times");
				eis.eatSegments("AMT");
				break;
			}
		}

		while (eis.peekSegment("QTY")) {
			if (Qty == null) Qty = new ArrayList();
			SegmentQTY_1 tmp = new SegmentQTY_1();
			tmp.setOrdinal(42);
			tmp.parse(eis);
			Qty.add(tmp);
			if (Qty.size() > 6) {
				eis.addError("Segment QTY has too many instances.  It can only repeat 6 times");
				eis.eatSegments("QTY");
				break;
			}
		}

		while (eis.peekSegment("LQ")) {
			if (Lq == null) Lq = new ArrayList();
			SegmentLQ_1 tmp = new SegmentLQ_1();
			tmp.setOrdinal(43);
			tmp.parse(eis);
			Lq.add(tmp);
			if (Lq.size() > 99) {
				eis.addError("Segment LQ has too many instances.  It can only repeat 99 times");
				eis.eatSegments("LQ");
				break;
			}
		}

		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Svc != null) {
			Svc.emit(eos);
		}

		if (Dtm != null) {
			int idx = 0, size = Dtm.size();
			while (idx < size) {
				getDtm(idx++).emit(eos);
			}
		}

		if (Cas != null) {
			int idx = 0, size = Cas.size();
			while (idx < size) {
				getCas(idx++).emit(eos);
			}
		}

		if (Ref01 != null) {
			int idx = 0, size = Ref01.size();
			while (idx < size) {
				getRef01(idx++).emit(eos);
			}
		}

		if (Ref02 != null) {
			int idx = 0, size = Ref02.size();
			while (idx < size) {
				getRef02(idx++).emit(eos);
			}
		}

		if (Amt != null) {
			int idx = 0, size = Amt.size();
			while (idx < size) {
				getAmt(idx++).emit(eos);
			}
		}

		if (Qty != null) {
			int idx = 0, size = Qty.size();
			while (idx < size) {
				getQty(idx++).emit(eos);
			}
		}

		if (Lq != null) {
			int idx = 0, size = Lq.size();
			while (idx < size) {
				getLq(idx++).emit(eos);
			}
		}

	}

	public EDIElement createCopy() {
		Loop2110 thisCopy = new Loop2110();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Svc != null) {
			thisCopy.setSvc((SegmentSVC_1)Svc.createCopy());
		}

		if (Dtm != null) {
			thisCopy.setDtm(new ArrayList());
			int idx = 0, size = Dtm.size();
			while (idx < size) {
				thisCopy.getDtm().add(getDtm(idx++).createCopy());
			}
		}

		if (Cas != null) {
			thisCopy.setCas(new ArrayList());
			int idx = 0, size = Cas.size();
			while (idx < size) {
				thisCopy.getCas().add(getCas(idx++).createCopy());
			}
		}

		if (Ref01 != null) {
			thisCopy.setRef01(new ArrayList());
			int idx = 0, size = Ref01.size();
			while (idx < size) {
				thisCopy.getRef01().add(getRef01(idx++).createCopy());
			}
		}

		if (Ref02 != null) {
			thisCopy.setRef02(new ArrayList());
			int idx = 0, size = Ref02.size();
			while (idx < size) {
				thisCopy.getRef02().add(getRef02(idx++).createCopy());
			}
		}

		if (Amt != null) {
			thisCopy.setAmt(new ArrayList());
			int idx = 0, size = Amt.size();
			while (idx < size) {
				thisCopy.getAmt().add(getAmt(idx++).createCopy());
			}
		}

		if (Qty != null) {
			thisCopy.setQty(new ArrayList());
			int idx = 0, size = Qty.size();
			while (idx < size) {
				thisCopy.getQty().add(getQty(idx++).createCopy());
			}
		}

		if (Lq != null) {
			thisCopy.setLq(new ArrayList());
			int idx = 0, size = Lq.size();
			while (idx < size) {
				thisCopy.getLq().add(getLq(idx++).createCopy());
			}
		}

		return thisCopy;
	}

}
