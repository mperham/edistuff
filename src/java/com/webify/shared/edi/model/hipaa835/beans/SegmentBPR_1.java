package com.webify.shared.edi.model.hipaa835.beans;

import com.webify.shared.edi.model.*;
import java.io.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class SegmentBPR_1 implements EDIElement {
	private static final Log log = LogFactory.getLog(SegmentBPR_1.class);

	public static final String SEGMENT_NAME = "BPR";
	public static final int FIELD_COUNT = 16;

	private int lineNumber = 0;
	public int getLineNumber() { return lineNumber; }
	/** Do NOT use this method - it is not public by choice... */
	public void setLineNumber(int foo) { lineNumber = foo; }

	private int ordinal = 0;
	public int getOrdinal() { return ordinal; }
	void setOrdinal(int ord) { ordinal = ord; }

	// Fields
	private String Bpr01;
	public String getBpr01() { return Bpr01; }
	public void setBpr01(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'BPR01' may not be null");
		}
		if (Field305.validateValue(val)) {
			Bpr01 = val;
		} else {
			throw new IllegalArgumentException("Field 'BPR01' cannot have value: " + val);
		}
	}

	private java.math.BigDecimal Bpr02;
	public java.math.BigDecimal getBpr02() { return Bpr02; }
	public void setBpr02(java.math.BigDecimal val) { Bpr02 = val; }

	private String Bpr03;
	public String getBpr03() { return Bpr03; }
	public void setBpr03(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'BPR03' may not be null");
		}
		if (Field478.validateValue(val)) {
			Bpr03 = val;
		} else {
			throw new IllegalArgumentException("Field 'BPR03' cannot have value: " + val);
		}
	}

	private String Bpr04;
	public String getBpr04() { return Bpr04; }
	public void setBpr04(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'BPR04' may not be null");
		}
		if (Field591.validateValue(val)) {
			Bpr04 = val;
		} else {
			throw new IllegalArgumentException("Field 'BPR04' cannot have value: " + val);
		}
	}

	private String Bpr05;
	public String getBpr05() { return Bpr05; }
	public void setBpr05(String val) {
		if (Field812.validateValue(val)) {
			Bpr05 = val;
		} else {
			throw new IllegalArgumentException("Field 'BPR05' cannot have value: " + val);
		}
	}

	private String Bpr06;
	public String getBpr06() { return Bpr06; }
	public void setBpr06(String val) {
		if (Field506.validateValue(val)) {
			Bpr06 = val;
		} else {
			throw new IllegalArgumentException("Field 'BPR06' cannot have value: " + val);
		}
	}

	private String Bpr07;
	public String getBpr07() { return Bpr07; }
	public void setBpr07(String val) { Bpr07 = val; }

	private String Bpr08;
	public String getBpr08() { return Bpr08; }
	public void setBpr08(String val) {
		if (Field569.validateValue(val)) {
			Bpr08 = val;
		} else {
			throw new IllegalArgumentException("Field 'BPR08' cannot have value: " + val);
		}
	}

	private String Bpr09;
	public String getBpr09() { return Bpr09; }
	public void setBpr09(String val) { Bpr09 = val; }

	private String Bpr10;
	public String getBpr10() { return Bpr10; }
	public void setBpr10(String val) { Bpr10 = val; }

	private String Bpr11;
	public String getBpr11() { return Bpr11; }
	public void setBpr11(String val) { Bpr11 = val; }

	private String Bpr12;
	public String getBpr12() { return Bpr12; }
	public void setBpr12(String val) {
		if (Field506.validateValue(val)) {
			Bpr12 = val;
		} else {
			throw new IllegalArgumentException("Field 'BPR12' cannot have value: " + val);
		}
	}

	private String Bpr13;
	public String getBpr13() { return Bpr13; }
	public void setBpr13(String val) { Bpr13 = val; }

	private String Bpr14;
	public String getBpr14() { return Bpr14; }
	public void setBpr14(String val) {
		if (Field569.validateValue(val)) {
			Bpr14 = val;
		} else {
			throw new IllegalArgumentException("Field 'BPR14' cannot have value: " + val);
		}
	}

	private String Bpr15;
	public String getBpr15() { return Bpr15; }
	public void setBpr15(String val) { Bpr15 = val; }

	private Date Bpr16;
	public Date getBpr16() { return Bpr16; }
	public void setBpr16(Date val) { Bpr16 = val; }


	public void parse(EDIInputStream eis) throws IOException {
		lineNumber = eis.getCurrentSegmentNumber();
		if (log.isDebugEnabled()) log.debug("Starting segment BPR on line " + lineNumber);
		String[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);
		Bpr01 = eis.getStringValue(fields, 1, 1, 2, true);
		Field305.validateInputValue(eis, "BPR01", Bpr01, ordinal, 1);
		if (Bpr01 == null || "".equals(fields[1].trim())) {
			eis.addError("Field 'BPR01' missing");
		}
		Bpr02 = eis.getDecimalValue(fields, 2, true);
		if (Bpr02 == null || "".equals(fields[2].trim())) {
			eis.addError("Field 'BPR02' missing");
		}
		Bpr03 = eis.getStringValue(fields, 3, 1, 1, true);
		Field478.validateInputValue(eis, "BPR03", Bpr03, ordinal, 3);
		if (Bpr03 == null || "".equals(fields[3].trim())) {
			eis.addError("Field 'BPR03' missing");
		}
		Bpr04 = eis.getStringValue(fields, 4, 3, 3, true);
		Field591.validateInputValue(eis, "BPR04", Bpr04, ordinal, 4);
		if (Bpr04 == null || "".equals(fields[4].trim())) {
			eis.addError("Field 'BPR04' missing");
		}
		Bpr05 = eis.getStringValue(fields, 5, 1, 10, false);
		Field812.validateInputValue(eis, "BPR05", Bpr05, ordinal, 5);
		Bpr06 = eis.getStringValue(fields, 6, 2, 2, false);
		Field506.validateInputValue(eis, "BPR06", Bpr06, ordinal, 6);
		Bpr07 = eis.getStringValue(fields, 7, 3, 12, false);
		Bpr08 = eis.getStringValue(fields, 8, 1, 3, false);
		Field569.validateInputValue(eis, "BPR08", Bpr08, ordinal, 8);
		Bpr09 = eis.getStringValue(fields, 9, 1, 35, false);
		Bpr10 = eis.getStringValue(fields, 10, 10, 10, false);
		Bpr11 = eis.getStringValue(fields, 11, 9, 9, false);
		Bpr12 = eis.getStringValue(fields, 12, 2, 2, false);
		Field506.validateInputValue(eis, "BPR12", Bpr12, ordinal, 12);
		Bpr13 = eis.getStringValue(fields, 13, 3, 12, false);
		Bpr14 = eis.getStringValue(fields, 14, 1, 3, false);
		Field569.validateInputValue(eis, "BPR14", Bpr14, ordinal, 14);
		Bpr15 = eis.getStringValue(fields, 15, 1, 35, false);
		Bpr16 = eis.getDateValue(fields, 16, true);
		if (Bpr16 == null || "".equals(fields[16].trim())) {
			eis.addError("Field 'BPR16' missing");
		}
		validate(eis);
	}

	protected void validate(EDIInputStream eis) {
		// CONDITIONAL
		if (Bpr08 != null) {
			if (Bpr09 == null) {
				eis.addError("If 'Bpr08' is set, the following must be set also: Bpr09");
			}
		}

		// CONDITIONAL
		if (Bpr14 != null) {
			if (Bpr15 == null) {
				eis.addError("If 'Bpr14' is set, the following must be set also: Bpr15");
			}
		}

		// PAIRED
		{
			int setCount = 0;
			if (Bpr06 != null) setCount++;
			if (Bpr07 != null) setCount++;
			if (setCount > 0 && setCount < 2) {
				eis.addError("If any of the following properties are set, all must be set: Bpr06, Bpr07");
			}
		}

		// PAIRED
		{
			int setCount = 0;
			if (Bpr12 != null) setCount++;
			if (Bpr13 != null) setCount++;
			if (setCount > 0 && setCount < 2) {
				eis.addError("If any of the following properties are set, all must be set: Bpr12, Bpr13");
			}
		}

	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startSegment("BPR");
		if (Bpr01 == null) {
			eos.addError("Emitting null mandatory field 'BPR01'");
		}

		eos.writeField(Bpr01);
		if (Bpr02 == null) {
			eos.addError("Emitting null mandatory field 'BPR02'");
		}

		eos.writeField(Bpr02);
		if (Bpr03 == null) {
			eos.addError("Emitting null mandatory field 'BPR03'");
		}

		eos.writeField(Bpr03);
		if (Bpr04 == null) {
			eos.addError("Emitting null mandatory field 'BPR04'");
		}

		eos.writeField(Bpr04);
		eos.writeField(Bpr05);
		eos.writeField(Bpr06);
		eos.writeField(Bpr07);
		eos.writeField(Bpr08);
		eos.writeField(Bpr09);
		eos.writeField(Bpr10);
		eos.writeField(Bpr11);
		eos.writeField(Bpr12);
		eos.writeField(Bpr13);
		eos.writeField(Bpr14);
		eos.writeField(Bpr15);
		if (Bpr16 == null) {
			eos.addError("Emitting null mandatory field 'BPR16'");
		}

		eos.writeField(Bpr16);
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.endSegment();
	}

	public EDIElement createCopy() {
		SegmentBPR_1 copy = new SegmentBPR_1();
		copy.setLineNumber(this.lineNumber);
		copy.Bpr01 = this.Bpr01;
		copy.Bpr02 = this.Bpr02;
		copy.Bpr03 = this.Bpr03;
		copy.Bpr04 = this.Bpr04;
		copy.Bpr05 = this.Bpr05;
		copy.Bpr06 = this.Bpr06;
		copy.Bpr07 = this.Bpr07;
		copy.Bpr08 = this.Bpr08;
		copy.Bpr09 = this.Bpr09;
		copy.Bpr10 = this.Bpr10;
		copy.Bpr11 = this.Bpr11;
		copy.Bpr12 = this.Bpr12;
		copy.Bpr13 = this.Bpr13;
		copy.Bpr14 = this.Bpr14;
		copy.Bpr15 = this.Bpr15;
		copy.Bpr16 = this.Bpr16;
		return copy;
	}
}
