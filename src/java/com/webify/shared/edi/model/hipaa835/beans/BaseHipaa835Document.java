package com.webify.shared.edi.model.hipaa835.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa835.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public abstract class BaseHipaa835Document extends EDITransaction {

	public static final String DOCUMENT_ID = "835";
	public static final List STANDARDS_IDS = new ArrayList();

	static {
		STANDARDS_IDS.add("004010X091A1,835");
	}


	private static final Log log = LogFactory.getLog(Hipaa835Document.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentST_1 St;
	public SegmentST_1 getSt() { return St; }
	public void setSt(SegmentST_1 seg) { St = seg; }

	private SegmentBPR_1 Bpr;
	public SegmentBPR_1 getBpr() { return Bpr; }
	public void setBpr(SegmentBPR_1 seg) { Bpr = seg; }

	private SegmentTRN_1 Trn;
	public SegmentTRN_1 getTrn() { return Trn; }
	public void setTrn(SegmentTRN_1 seg) { Trn = seg; }

	private SegmentCUR_1 Cur;
	public SegmentCUR_1 getCur() { return Cur; }
	public void setCur(SegmentCUR_1 seg) { Cur = seg; }

	private SegmentREF_1 Ref01;
	public SegmentREF_1 getRef01() { return Ref01; }
	public void setRef01(SegmentREF_1 seg) { Ref01 = seg; }

	private SegmentREF_1 Ref02;
	public SegmentREF_1 getRef02() { return Ref02; }
	public void setRef02(SegmentREF_1 seg) { Ref02 = seg; }

	private SegmentDTM_1 Dtm;
	public SegmentDTM_1 getDtm() { return Dtm; }
	public void setDtm(SegmentDTM_1 seg) { Dtm = seg; }

	private List Plb;
	public SegmentPLB_1 getPlb(int idx) { 
		if (Plb == null || idx >= Plb.size()) {
			throw new ArrayIndexOutOfBoundsException("Plb");
		}
		return (SegmentPLB_1) Plb.get(idx);
	}
	public List getPlb() {
		return Plb;
	}
	public void setPlb(List segs) { Plb = segs; }

	private SegmentSE_1 Se;
	public SegmentSE_1 getSe() { return Se; }
	public void setSe(SegmentSE_1 seg) { Se = seg; }


	// Loops
	private Loop1000A loop1000A;
	public Loop1000A getLoop1000A() { return loop1000A; }
	public void setLoop1000A(Loop1000A loop) { loop1000A = loop; }

	private Loop1000B loop1000B;
	public Loop1000B getLoop1000B() { return loop1000B; }
	public void setLoop1000B(Loop1000B loop) { loop1000B = loop; }

	private List loop2000;
	public Loop2000 getLoop2000(int idx) { 
		if (loop2000 == null || idx >= loop2000.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2000");
		}
		return (Loop2000) loop2000.get(idx);
	}
	public List getLoop2000() {
		return loop2000;
	}
	public void setLoop2000(List loop) { loop2000 = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 835");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (!eis.peekSegment("ST")) {
			eis.addError("A single instance of Segment ST is required.");
		} else {
			St = new SegmentST_1();
			St.setOrdinal(1);
			St.parse(eis);
		}

		if (!eis.peekSegment("BPR")) {
			eis.addError("A single instance of Segment BPR is required.");
		} else {
			Bpr = new SegmentBPR_1();
			Bpr.setOrdinal(2);
			Bpr.parse(eis);
		}

		if (!eis.peekSegment("TRN")) {
			eis.addError("A single instance of Segment TRN is required.");
		} else {
			Trn = new SegmentTRN_1();
			Trn.setOrdinal(3);
			Trn.parse(eis);
		}

		if (eis.peekSegment("CUR")) {
			Cur = new SegmentCUR_1();
			Cur.setOrdinal(4);
			Cur.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "EV")) {
			Ref01 = new SegmentREF_1();
			Ref01.setOrdinal(5);
			Ref01.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "F2")) {
			Ref02 = new SegmentREF_1();
			Ref02.setOrdinal(6);
			Ref02.parse(eis);
		}
		if (eis.peekSegment("REF")) {
			eis.addError("Segment REF could not be parsed.");
			eis.eatSegments("REF");
		}

		if (eis.peekSegment("DTM")) {
			Dtm = new SegmentDTM_1();
			Dtm.setOrdinal(7);
			Dtm.parse(eis);
		}

		while (true) {
			if (eis.peekSegment("N1", 1, Loop1000A.TRIGGER_VALUES)) {
				if (loop1000A != null) {
					eis.addError("Only one instance of Loop 1000A is allowed.");
				} else {
					loop1000A = new Loop1000A();
					loop1000A.parse(eis);
				}
			}
			else if (eis.peekSegment("N1", 1, Loop1000B.TRIGGER_VALUES)) {
				if (loop1000B != null) {
					eis.addError("Only one instance of Loop 1000B is allowed.");
				} else {
					loop1000B = new Loop1000B();
					loop1000B.parse(eis);
				}
			}
			else if (eis.peekSegment("LX")) {
				if (loop2000 == null) loop2000 = new ArrayList();
				Loop2000 tmp = new Loop2000();
				tmp.parse(eis);
				loop2000.add(tmp);
			}
			else {
				break;
			}
		}

		if (loop1000A == null) {
			eis.addError("An instance of Loop 1000A is required.");
		}
		if (loop1000B == null) {
			eis.addError("An instance of Loop 1000B is required.");
		}
		while (eis.peekSegment("PLB")) {
			if (Plb == null) Plb = new ArrayList();
			SegmentPLB_1 tmp = new SegmentPLB_1();
			tmp.setOrdinal(44);
			tmp.parse(eis);
			Plb.add(tmp);
		}

		if (!eis.peekSegment("SE")) {
			eis.addError("A single instance of Segment SE is required.");
		} else {
			Se = new SegmentSE_1();
			Se.setOrdinal(45);
			Se.parse(eis);
		}

		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (St != null) {
			St.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'ST'");
		}

		if (Bpr != null) {
			Bpr.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'BPR'");
		}

		if (Trn != null) {
			Trn.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'TRN'");
		}

		if (Cur != null) {
			Cur.emit(eos);
		}

		if (Ref01 != null) {
			Ref01.emit(eos);
		}

		if (Ref02 != null) {
			Ref02.emit(eos);
		}

		if (Dtm != null) {
			Dtm.emit(eos);
		}

		if (loop1000A != null) {
			loop1000A.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'LOOP1000A'");
		}

		if (loop1000B != null) {
			loop1000B.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'LOOP1000B'");
		}

		if (loop2000 != null) {
			int idx = 0, size = loop2000.size();
			while (idx < size) {
				getLoop2000(idx++).emit(eos);
			}
		}

		if (Plb != null) {
			int idx = 0, size = Plb.size();
			while (idx < size) {
				getPlb(idx++).emit(eos);
			}
		}

		if (Se != null) {
			Se.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'SE'");
		}

	}

	public EDIElement createCopy() {
		Hipaa835Document thisCopy = new Hipaa835Document();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (St != null) {
			thisCopy.setSt((SegmentST_1)St.createCopy());
		}

		if (Bpr != null) {
			thisCopy.setBpr((SegmentBPR_1)Bpr.createCopy());
		}

		if (Trn != null) {
			thisCopy.setTrn((SegmentTRN_1)Trn.createCopy());
		}

		if (Cur != null) {
			thisCopy.setCur((SegmentCUR_1)Cur.createCopy());
		}

		if (Ref01 != null) {
			thisCopy.setRef01((SegmentREF_1)Ref01.createCopy());
		}

		if (Ref02 != null) {
			thisCopy.setRef02((SegmentREF_1)Ref02.createCopy());
		}

		if (Dtm != null) {
			thisCopy.setDtm((SegmentDTM_1)Dtm.createCopy());
		}

		if (loop1000A != null) {
			thisCopy.setLoop1000A((Loop1000A)loop1000A.createCopy());
		}

		if (loop1000B != null) {
			thisCopy.setLoop1000B((Loop1000B)loop1000B.createCopy());
		}

		if (loop2000 != null) {
			thisCopy.setLoop2000(new ArrayList());
			int idx = 0, size = loop2000.size();
			while (idx < size) {
				thisCopy.getLoop2000().add(getLoop2000(idx++).createCopy());
			}
		}

		if (Plb != null) {
			thisCopy.setPlb(new ArrayList());
			int idx = 0, size = Plb.size();
			while (idx < size) {
				thisCopy.getPlb().add(getPlb(idx++).createCopy());
			}
		}

		if (Se != null) {
			thisCopy.setSe((SegmentSE_1)Se.createCopy());
		}

		return thisCopy;
	}

}
