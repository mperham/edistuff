package com.webify.shared.edi.model.hipaa271.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa271.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoop2110C extends EDILoop {

	private static final Log log = LogFactory.getLog(Loop2110C.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentEB_1 Eb;
	public SegmentEB_1 getEb() { return Eb; }
	public void setEb(SegmentEB_1 seg) { Eb = seg; }

	private List Hsd;
	public SegmentHSD_1 getHsd(int idx) { 
		if (Hsd == null || idx >= Hsd.size()) {
			throw new ArrayIndexOutOfBoundsException("Hsd");
		}
		return (SegmentHSD_1) Hsd.get(idx);
	}
	public List getHsd() {
		return Hsd;
	}
	public void setHsd(List segs) { Hsd = segs; }

	private List Ref;
	public SegmentREF_1 getRef(int idx) { 
		if (Ref == null || idx >= Ref.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref");
		}
		return (SegmentREF_1) Ref.get(idx);
	}
	public List getRef() {
		return Ref;
	}
	public void setRef(List segs) { Ref = segs; }

	private List Dtp;
	public SegmentDTP_1 getDtp(int idx) { 
		if (Dtp == null || idx >= Dtp.size()) {
			throw new ArrayIndexOutOfBoundsException("Dtp");
		}
		return (SegmentDTP_1) Dtp.get(idx);
	}
	public List getDtp() {
		return Dtp;
	}
	public void setDtp(List segs) { Dtp = segs; }

	private List Aaa;
	public SegmentAAA_1 getAaa(int idx) { 
		if (Aaa == null || idx >= Aaa.size()) {
			throw new ArrayIndexOutOfBoundsException("Aaa");
		}
		return (SegmentAAA_1) Aaa.get(idx);
	}
	public List getAaa() {
		return Aaa;
	}
	public void setAaa(List segs) { Aaa = segs; }

	private List Msg;
	public SegmentMSG_1 getMsg(int idx) { 
		if (Msg == null || idx >= Msg.size()) {
			throw new ArrayIndexOutOfBoundsException("Msg");
		}
		return (SegmentMSG_1) Msg.get(idx);
	}
	public List getMsg() {
		return Msg;
	}
	public void setMsg(List segs) { Msg = segs; }


	// Loops
	private List loop2115C;
	public Loop2115C getLoop2115C(int idx) { 
		if (loop2115C == null || idx >= loop2115C.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2115C");
		}
		return (Loop2115C) loop2115C.get(idx);
	}
	public List getLoop2115C() {
		return loop2115C;
	}
	public void setLoop2115C(List loop) { loop2115C = loop; }

	private LoopUnnamed0 loopUnnamed0;
	public LoopUnnamed0 getLoopUnnamed0() { return loopUnnamed0; }
	public void setLoopUnnamed0(LoopUnnamed0 loop) { loopUnnamed0 = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 2110C");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (eis.peekSegment("EB")) {
			Eb = new SegmentEB_1();
			Eb.setOrdinal(24);
			Eb.parse(eis);
		}

		while (eis.peekSegment("HSD")) {
			if (Hsd == null) Hsd = new ArrayList();
			SegmentHSD_1 tmp = new SegmentHSD_1();
			tmp.setOrdinal(25);
			tmp.parse(eis);
			Hsd.add(tmp);
			if (Hsd.size() > 9) {
				eis.addError("Segment HSD has too many instances.  It can only repeat 9 times");
				eis.eatSegments("HSD");
				break;
			}
		}

		while (eis.peekSegment("REF")) {
			if (Ref == null) Ref = new ArrayList();
			SegmentREF_1 tmp = new SegmentREF_1();
			tmp.setOrdinal(26);
			tmp.parse(eis);
			Ref.add(tmp);
			if (Ref.size() > 9) {
				eis.addError("Segment REF has too many instances.  It can only repeat 9 times");
				eis.eatSegments("REF");
				break;
			}
		}

		while (eis.peekSegment("DTP")) {
			if (Dtp == null) Dtp = new ArrayList();
			SegmentDTP_1 tmp = new SegmentDTP_1();
			tmp.setOrdinal(27);
			tmp.parse(eis);
			Dtp.add(tmp);
			if (Dtp.size() > 20) {
				eis.addError("Segment DTP has too many instances.  It can only repeat 20 times");
				eis.eatSegments("DTP");
				break;
			}
		}

		while (eis.peekSegment("AAA")) {
			if (Aaa == null) Aaa = new ArrayList();
			SegmentAAA_1 tmp = new SegmentAAA_1();
			tmp.setOrdinal(28);
			tmp.parse(eis);
			Aaa.add(tmp);
			if (Aaa.size() > 9) {
				eis.addError("Segment AAA has too many instances.  It can only repeat 9 times");
				eis.eatSegments("AAA");
				break;
			}
		}

		while (eis.peekSegment("MSG")) {
			if (Msg == null) Msg = new ArrayList();
			SegmentMSG_1 tmp = new SegmentMSG_1();
			tmp.setOrdinal(29);
			tmp.parse(eis);
			Msg.add(tmp);
			if (Msg.size() > 10) {
				eis.addError("Segment MSG has too many instances.  It can only repeat 10 times");
				eis.eatSegments("MSG");
				break;
			}
		}

		while (true) {
			if (eis.peekSegment("III")) {
				if (loop2115C == null) loop2115C = new ArrayList();
				Loop2115C tmp = new Loop2115C();
				tmp.parse(eis);
				loop2115C.add(tmp);
			}
			else if (eis.peekSegment("LS")) {
				if (loopUnnamed0 != null) {
					eis.addError("Only one instance of Loop Unnamed0 is allowed.");
				} else {
					loopUnnamed0 = new LoopUnnamed0();
					loopUnnamed0.parse(eis);
				}
			}
			else {
				break;
			}
		}

		if (loop2115C != null && loop2115C.size() > 10) {
			eis.addError("Loop 2115C has too many instances.  It can repeat only 10 times");
		}
		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Eb != null) {
			Eb.emit(eos);
		}

		if (Hsd != null) {
			int idx = 0, size = Hsd.size();
			while (idx < size) {
				getHsd(idx++).emit(eos);
			}
		}

		if (Ref != null) {
			int idx = 0, size = Ref.size();
			while (idx < size) {
				getRef(idx++).emit(eos);
			}
		}

		if (Dtp != null) {
			int idx = 0, size = Dtp.size();
			while (idx < size) {
				getDtp(idx++).emit(eos);
			}
		}

		if (Aaa != null) {
			int idx = 0, size = Aaa.size();
			while (idx < size) {
				getAaa(idx++).emit(eos);
			}
		}

		if (Msg != null) {
			int idx = 0, size = Msg.size();
			while (idx < size) {
				getMsg(idx++).emit(eos);
			}
		}

		if (loop2115C != null) {
			int idx = 0, size = loop2115C.size();
			while (idx < size) {
				getLoop2115C(idx++).emit(eos);
			}
		}

		if (loopUnnamed0 != null) {
			loopUnnamed0.emit(eos);
		}

	}

	public EDIElement createCopy() {
		Loop2110C thisCopy = new Loop2110C();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Eb != null) {
			thisCopy.setEb((SegmentEB_1)Eb.createCopy());
		}

		if (Hsd != null) {
			thisCopy.setHsd(new ArrayList());
			int idx = 0, size = Hsd.size();
			while (idx < size) {
				thisCopy.getHsd().add(getHsd(idx++).createCopy());
			}
		}

		if (Ref != null) {
			thisCopy.setRef(new ArrayList());
			int idx = 0, size = Ref.size();
			while (idx < size) {
				thisCopy.getRef().add(getRef(idx++).createCopy());
			}
		}

		if (Dtp != null) {
			thisCopy.setDtp(new ArrayList());
			int idx = 0, size = Dtp.size();
			while (idx < size) {
				thisCopy.getDtp().add(getDtp(idx++).createCopy());
			}
		}

		if (Aaa != null) {
			thisCopy.setAaa(new ArrayList());
			int idx = 0, size = Aaa.size();
			while (idx < size) {
				thisCopy.getAaa().add(getAaa(idx++).createCopy());
			}
		}

		if (Msg != null) {
			thisCopy.setMsg(new ArrayList());
			int idx = 0, size = Msg.size();
			while (idx < size) {
				thisCopy.getMsg().add(getMsg(idx++).createCopy());
			}
		}

		if (loop2115C != null) {
			thisCopy.setLoop2115C(new ArrayList());
			int idx = 0, size = loop2115C.size();
			while (idx < size) {
				thisCopy.getLoop2115C().add(getLoop2115C(idx++).createCopy());
			}
		}

		if (loopUnnamed0 != null) {
			thisCopy.setLoopUnnamed0((LoopUnnamed0)loopUnnamed0.createCopy());
		}

		return thisCopy;
	}

}
