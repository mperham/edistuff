package com.webify.shared.edi.model.hipaa271.beans;

import com.webify.shared.edi.model.*;
import java.io.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class SegmentEB_1 implements EDIElement {
	private static final Log log = LogFactory.getLog(SegmentEB_1.class);

	public static final String SEGMENT_NAME = "EB";
	public static final int FIELD_COUNT = 13;

	private int lineNumber = 0;
	public int getLineNumber() { return lineNumber; }
	/** Do NOT use this method - it is not public by choice... */
	public void setLineNumber(int foo) { lineNumber = foo; }

	private int ordinal = 0;
	public int getOrdinal() { return ordinal; }
	void setOrdinal(int ord) { ordinal = ord; }

	// Fields
	private String Eb01;
	public String getEb01() { return Eb01; }
	public void setEb01(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'EB01' may not be null");
		}
		if (Field1390.validateValue(val)) {
			Eb01 = val;
		} else {
			throw new IllegalArgumentException("Field 'EB01' cannot have value: " + val);
		}
	}

	private String Eb02;
	public String getEb02() { return Eb02; }
	public void setEb02(String val) {
		if (Field1207.validateValue(val)) {
			Eb02 = val;
		} else {
			throw new IllegalArgumentException("Field 'EB02' cannot have value: " + val);
		}
	}

	private String Eb03;
	public String getEb03() { return Eb03; }
	public void setEb03(String val) {
		if (Field1365.validateValue(val)) {
			Eb03 = val;
		} else {
			throw new IllegalArgumentException("Field 'EB03' cannot have value: " + val);
		}
	}

	private String Eb04;
	public String getEb04() { return Eb04; }
	public void setEb04(String val) {
		if (Field1336.validateValue(val)) {
			Eb04 = val;
		} else {
			throw new IllegalArgumentException("Field 'EB04' cannot have value: " + val);
		}
	}

	private String Eb05;
	public String getEb05() { return Eb05; }
	public void setEb05(String val) { Eb05 = val; }

	private String Eb06;
	public String getEb06() { return Eb06; }
	public void setEb06(String val) {
		if (Field615.validateValue(val)) {
			Eb06 = val;
		} else {
			throw new IllegalArgumentException("Field 'EB06' cannot have value: " + val);
		}
	}

	private java.math.BigDecimal Eb07;
	public java.math.BigDecimal getEb07() { return Eb07; }
	public void setEb07(java.math.BigDecimal val) { Eb07 = val; }

	private java.math.BigDecimal Eb08;
	public java.math.BigDecimal getEb08() { return Eb08; }
	public void setEb08(java.math.BigDecimal val) { Eb08 = val; }

	private String Eb09;
	public String getEb09() { return Eb09; }
	public void setEb09(String val) {
		if (Field673.validateValue(val)) {
			Eb09 = val;
		} else {
			throw new IllegalArgumentException("Field 'EB09' cannot have value: " + val);
		}
	}

	private java.math.BigDecimal Eb10;
	public java.math.BigDecimal getEb10() { return Eb10; }
	public void setEb10(java.math.BigDecimal val) { Eb10 = val; }

	private String Eb11;
	public String getEb11() { return Eb11; }
	public void setEb11(String val) {
		if (Field1073.validateValue(val)) {
			Eb11 = val;
		} else {
			throw new IllegalArgumentException("Field 'EB11' cannot have value: " + val);
		}
	}

	private String Eb12;
	public String getEb12() { return Eb12; }
	public void setEb12(String val) {
		if (Field1073.validateValue(val)) {
			Eb12 = val;
		} else {
			throw new IllegalArgumentException("Field 'EB12' cannot have value: " + val);
		}
	}

	private CompositeC003 Eb13;
	public CompositeC003 getEb13() { return Eb13; }
	public void setEb13(CompositeC003 val) { Eb13 = val; }


	public void parse(EDIInputStream eis) throws IOException {
		lineNumber = eis.getCurrentSegmentNumber();
		if (log.isDebugEnabled()) log.debug("Starting segment EB on line " + lineNumber);
		String[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);
		Eb01 = eis.getStringValue(fields, 1, 1, 2, true);
		Field1390.validateInputValue(eis, "EB01", Eb01, ordinal, 1);
		if (Eb01 == null || "".equals(fields[1].trim())) {
			eis.addError("Field 'EB01' missing");
		}
		Eb02 = eis.getStringValue(fields, 2, 3, 3, false);
		Field1207.validateInputValue(eis, "EB02", Eb02, ordinal, 2);
		Eb03 = eis.getStringValue(fields, 3, 1, 2, false);
		Field1365.validateInputValue(eis, "EB03", Eb03, ordinal, 3);
		Eb04 = eis.getStringValue(fields, 4, 1, 3, false);
		Field1336.validateInputValue(eis, "EB04", Eb04, ordinal, 4);
		Eb05 = eis.getStringValue(fields, 5, 1, 50, false);
		Eb06 = eis.getStringValue(fields, 6, 1, 2, false);
		Field615.validateInputValue(eis, "EB06", Eb06, ordinal, 6);
		Eb07 = eis.getDecimalValue(fields, 7, false);
		Eb08 = eis.getDecimalValue(fields, 8, false);
		Eb09 = eis.getStringValue(fields, 9, 2, 2, false);
		Field673.validateInputValue(eis, "EB09", Eb09, ordinal, 9);
		Eb10 = eis.getDecimalValue(fields, 10, false);
		Eb11 = eis.getStringValue(fields, 11, 1, 1, false);
		Field1073.validateInputValue(eis, "EB11", Eb11, ordinal, 11);
		Eb12 = eis.getStringValue(fields, 12, 1, 1, false);
		Field1073.validateInputValue(eis, "EB12", Eb12, ordinal, 12);
		if (eis.checkBounds(fields, 13, false)) {
			Eb13 = new CompositeC003();
			Eb13.setOrdinal(ordinal + "-" + 13);
			Eb13.parse(eis, fields[13]);
		}
		validate(eis);
	}

	protected void validate(EDIInputStream eis) {
		// PAIRED
		{
			int setCount = 0;
			if (Eb09 != null) setCount++;
			if (Eb10 != null) setCount++;
			if (setCount > 0 && setCount < 2) {
				eis.addError("If any of the following properties are set, all must be set: Eb09, Eb10");
			}
		}

	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startSegment("EB");
		if (Eb01 == null) {
			eos.addError("Emitting null mandatory field 'EB01'");
		}

		eos.writeField(Eb01);
		eos.writeField(Eb02);
		eos.writeField(Eb03);
		eos.writeField(Eb04);
		eos.writeField(Eb05);
		eos.writeField(Eb06);
		eos.writeField(Eb07);
		eos.writeField(Eb08);
		eos.writeField(Eb09);
		eos.writeField(Eb10);
		eos.writeField(Eb11);
		eos.writeField(Eb12);
		if (Eb13 != null) {
			Eb13.emit(eos);
		} else {
			eos.writeNullField();
		}
		eos.endSegment();
	}

	public EDIElement createCopy() {
		SegmentEB_1 copy = new SegmentEB_1();
		copy.setLineNumber(this.lineNumber);
		copy.Eb01 = this.Eb01;
		copy.Eb02 = this.Eb02;
		copy.Eb03 = this.Eb03;
		copy.Eb04 = this.Eb04;
		copy.Eb05 = this.Eb05;
		copy.Eb06 = this.Eb06;
		copy.Eb07 = this.Eb07;
		copy.Eb08 = this.Eb08;
		copy.Eb09 = this.Eb09;
		copy.Eb10 = this.Eb10;
		copy.Eb11 = this.Eb11;
		copy.Eb12 = this.Eb12;
		if (getEb13() != null) copy.setEb13((CompositeC003)getEb13().createCopy());
		return copy;
	}
}
