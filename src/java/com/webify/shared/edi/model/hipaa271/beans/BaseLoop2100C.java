package com.webify.shared.edi.model.hipaa271.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa271.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoop2100C extends EDILoop {

	private static final Log log = LogFactory.getLog(Loop2100C.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentNM1_2 Nm1;
	public SegmentNM1_2 getNm1() { return Nm1; }
	public void setNm1(SegmentNM1_2 seg) { Nm1 = seg; }

	private List Ref;
	public SegmentREF_1 getRef(int idx) { 
		if (Ref == null || idx >= Ref.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref");
		}
		return (SegmentREF_1) Ref.get(idx);
	}
	public List getRef() {
		return Ref;
	}
	public void setRef(List segs) { Ref = segs; }

	private SegmentN3_1 N3;
	public SegmentN3_1 getN3() { return N3; }
	public void setN3(SegmentN3_1 seg) { N3 = seg; }

	private SegmentN4_1 N4;
	public SegmentN4_1 getN4() { return N4; }
	public void setN4(SegmentN4_1 seg) { N4 = seg; }

	private List Per;
	public SegmentPER_1 getPer(int idx) { 
		if (Per == null || idx >= Per.size()) {
			throw new ArrayIndexOutOfBoundsException("Per");
		}
		return (SegmentPER_1) Per.get(idx);
	}
	public List getPer() {
		return Per;
	}
	public void setPer(List segs) { Per = segs; }

	private List Aaa;
	public SegmentAAA_1 getAaa(int idx) { 
		if (Aaa == null || idx >= Aaa.size()) {
			throw new ArrayIndexOutOfBoundsException("Aaa");
		}
		return (SegmentAAA_1) Aaa.get(idx);
	}
	public List getAaa() {
		return Aaa;
	}
	public void setAaa(List segs) { Aaa = segs; }

	private SegmentDMG_1 Dmg;
	public SegmentDMG_1 getDmg() { return Dmg; }
	public void setDmg(SegmentDMG_1 seg) { Dmg = seg; }

	private SegmentINS_1 Ins;
	public SegmentINS_1 getIns() { return Ins; }
	public void setIns(SegmentINS_1 seg) { Ins = seg; }

	private List Dtp;
	public SegmentDTP_1 getDtp(int idx) { 
		if (Dtp == null || idx >= Dtp.size()) {
			throw new ArrayIndexOutOfBoundsException("Dtp");
		}
		return (SegmentDTP_1) Dtp.get(idx);
	}
	public List getDtp() {
		return Dtp;
	}
	public void setDtp(List segs) { Dtp = segs; }


	// Loops
	private List loop2110C;
	public Loop2110C getLoop2110C(int idx) { 
		if (loop2110C == null || idx >= loop2110C.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2110C");
		}
		return (Loop2110C) loop2110C.get(idx);
	}
	public List getLoop2110C() {
		return loop2110C;
	}
	public void setLoop2110C(List loop) { loop2110C = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 2100C");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (!eis.peekSegment("NM1")) {
			eis.addError("A single instance of Segment NM1 is required.");
		} else {
			Nm1 = new SegmentNM1_2();
			Nm1.setOrdinal(15);
			Nm1.parse(eis);
		}

		while (eis.peekSegment("REF")) {
			if (Ref == null) Ref = new ArrayList();
			SegmentREF_1 tmp = new SegmentREF_1();
			tmp.setOrdinal(16);
			tmp.parse(eis);
			Ref.add(tmp);
			if (Ref.size() > 9) {
				eis.addError("Segment REF has too many instances.  It can only repeat 9 times");
				eis.eatSegments("REF");
				break;
			}
		}

		if (eis.peekSegment("N3")) {
			N3 = new SegmentN3_1();
			N3.setOrdinal(17);
			N3.parse(eis);
		}

		if (eis.peekSegment("N4")) {
			N4 = new SegmentN4_1();
			N4.setOrdinal(18);
			N4.parse(eis);
		}

		while (eis.peekSegment("PER")) {
			if (Per == null) Per = new ArrayList();
			SegmentPER_1 tmp = new SegmentPER_1();
			tmp.setOrdinal(19);
			tmp.parse(eis);
			Per.add(tmp);
			if (Per.size() > 3) {
				eis.addError("Segment PER has too many instances.  It can only repeat 3 times");
				eis.eatSegments("PER");
				break;
			}
		}

		while (eis.peekSegment("AAA")) {
			if (Aaa == null) Aaa = new ArrayList();
			SegmentAAA_1 tmp = new SegmentAAA_1();
			tmp.setOrdinal(20);
			tmp.parse(eis);
			Aaa.add(tmp);
			if (Aaa.size() > 9) {
				eis.addError("Segment AAA has too many instances.  It can only repeat 9 times");
				eis.eatSegments("AAA");
				break;
			}
		}

		if (eis.peekSegment("DMG")) {
			Dmg = new SegmentDMG_1();
			Dmg.setOrdinal(21);
			Dmg.parse(eis);
		}

		if (eis.peekSegment("INS")) {
			Ins = new SegmentINS_1();
			Ins.setOrdinal(22);
			Ins.parse(eis);
		}

		while (eis.peekSegment("DTP")) {
			if (Dtp == null) Dtp = new ArrayList();
			SegmentDTP_1 tmp = new SegmentDTP_1();
			tmp.setOrdinal(23);
			tmp.parse(eis);
			Dtp.add(tmp);
			if (Dtp.size() > 9) {
				eis.addError("Segment DTP has too many instances.  It can only repeat 9 times");
				eis.eatSegments("DTP");
				break;
			}
		}

		while (true) {
			if (eis.peekSegment("EB")) {
				if (loop2110C == null) loop2110C = new ArrayList();
				Loop2110C tmp = new Loop2110C();
				tmp.parse(eis);
				loop2110C.add(tmp);
			}
			else {
				break;
			}
		}

		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Nm1 != null) {
			Nm1.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'NM1'");
		}

		if (Ref != null) {
			int idx = 0, size = Ref.size();
			while (idx < size) {
				getRef(idx++).emit(eos);
			}
		}

		if (N3 != null) {
			N3.emit(eos);
		}

		if (N4 != null) {
			N4.emit(eos);
		}

		if (Per != null) {
			int idx = 0, size = Per.size();
			while (idx < size) {
				getPer(idx++).emit(eos);
			}
		}

		if (Aaa != null) {
			int idx = 0, size = Aaa.size();
			while (idx < size) {
				getAaa(idx++).emit(eos);
			}
		}

		if (Dmg != null) {
			Dmg.emit(eos);
		}

		if (Ins != null) {
			Ins.emit(eos);
		}

		if (Dtp != null) {
			int idx = 0, size = Dtp.size();
			while (idx < size) {
				getDtp(idx++).emit(eos);
			}
		}

		if (loop2110C != null) {
			int idx = 0, size = loop2110C.size();
			while (idx < size) {
				getLoop2110C(idx++).emit(eos);
			}
		}

	}

	public EDIElement createCopy() {
		Loop2100C thisCopy = new Loop2100C();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Nm1 != null) {
			thisCopy.setNm1((SegmentNM1_2)Nm1.createCopy());
		}

		if (Ref != null) {
			thisCopy.setRef(new ArrayList());
			int idx = 0, size = Ref.size();
			while (idx < size) {
				thisCopy.getRef().add(getRef(idx++).createCopy());
			}
		}

		if (N3 != null) {
			thisCopy.setN3((SegmentN3_1)N3.createCopy());
		}

		if (N4 != null) {
			thisCopy.setN4((SegmentN4_1)N4.createCopy());
		}

		if (Per != null) {
			thisCopy.setPer(new ArrayList());
			int idx = 0, size = Per.size();
			while (idx < size) {
				thisCopy.getPer().add(getPer(idx++).createCopy());
			}
		}

		if (Aaa != null) {
			thisCopy.setAaa(new ArrayList());
			int idx = 0, size = Aaa.size();
			while (idx < size) {
				thisCopy.getAaa().add(getAaa(idx++).createCopy());
			}
		}

		if (Dmg != null) {
			thisCopy.setDmg((SegmentDMG_1)Dmg.createCopy());
		}

		if (Ins != null) {
			thisCopy.setIns((SegmentINS_1)Ins.createCopy());
		}

		if (Dtp != null) {
			thisCopy.setDtp(new ArrayList());
			int idx = 0, size = Dtp.size();
			while (idx < size) {
				thisCopy.getDtp().add(getDtp(idx++).createCopy());
			}
		}

		if (loop2110C != null) {
			thisCopy.setLoop2110C(new ArrayList());
			int idx = 0, size = loop2110C.size();
			while (idx < size) {
				thisCopy.getLoop2110C().add(getLoop2110C(idx++).createCopy());
			}
		}

		return thisCopy;
	}

}
