package com.webify.shared.edi.model.hipaa275.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa275.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoopUnnamed2 extends EDILoop {

	private static final Log log = LogFactory.getLog(LoopUnnamed2.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentLX Lx;
	public SegmentLX getLx() { return Lx; }
	public void setLx(SegmentLX seg) { Lx = seg; }

	private SegmentTRN Trn;
	public SegmentTRN getTrn() { return Trn; }
	public void setTrn(SegmentTRN seg) { Trn = seg; }

	private SegmentSTC Stc;
	public SegmentSTC getStc() { return Stc; }
	public void setStc(SegmentSTC seg) { Stc = seg; }

	private SegmentNM1 Nm1;
	public SegmentNM1 getNm1() { return Nm1; }
	public void setNm1(SegmentNM1 seg) { Nm1 = seg; }

	private SegmentPRV Prv;
	public SegmentPRV getPrv() { return Prv; }
	public void setPrv(SegmentPRV seg) { Prv = seg; }

	private SegmentPER Per;
	public SegmentPER getPer() { return Per; }
	public void setPer(SegmentPER seg) { Per = seg; }

	private List Ref;
	public SegmentREF getRef(int idx) { 
		if (Ref == null || idx >= Ref.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref");
		}
		return (SegmentREF) Ref.get(idx);
	}
	public List getRef() {
		return Ref;
	}
	public void setRef(List segs) { Ref = segs; }


	// Loops
	private List loopUnnamed3;
	public LoopUnnamed3 getLoopUnnamed3(int idx) { 
		if (loopUnnamed3 == null || idx >= loopUnnamed3.size()) {
			throw new ArrayIndexOutOfBoundsException("loopUnnamed3");
		}
		return (LoopUnnamed3) loopUnnamed3.get(idx);
	}
	public List getLoopUnnamed3() {
		return loopUnnamed3;
	}
	public void setLoopUnnamed3(List loop) { loopUnnamed3 = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop Unnamed2");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (eis.peekSegment("LX")) {
			Lx = new SegmentLX();
			Lx.setOrdinal(15);
			Lx.parse(eis);
		}

		if (eis.peekSegment("TRN")) {
			Trn = new SegmentTRN();
			Trn.setOrdinal(16);
			Trn.parse(eis);
		}

		if (eis.peekSegment("STC")) {
			Stc = new SegmentSTC();
			Stc.setOrdinal(17);
			Stc.parse(eis);
		}

		if (eis.peekSegment("NM1")) {
			Nm1 = new SegmentNM1();
			Nm1.setOrdinal(18);
			Nm1.parse(eis);
		}

		if (eis.peekSegment("PRV")) {
			Prv = new SegmentPRV();
			Prv.setOrdinal(19);
			Prv.parse(eis);
		}

		if (eis.peekSegment("PER")) {
			Per = new SegmentPER();
			Per.setOrdinal(20);
			Per.parse(eis);
		}

		while (eis.peekSegment("REF")) {
			if (Ref == null) Ref = new ArrayList();
			SegmentREF tmp = new SegmentREF();
			tmp.setOrdinal(21);
			tmp.parse(eis);
			Ref.add(tmp);
			if (Ref.size() > 5) {
				eis.addError("Segment REF has too many instances.  It can only repeat 5 times");
				eis.eatSegments("REF");
				break;
			}
		}

		while (true) {
			if (eis.peekSegment("DTP")) {
				if (loopUnnamed3 == null) loopUnnamed3 = new ArrayList();
				LoopUnnamed3 tmp = new LoopUnnamed3();
				tmp.parse(eis);
				loopUnnamed3.add(tmp);
			}
			else {
				break;
			}
		}

		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Lx != null) {
			Lx.emit(eos);
		}

		if (Trn != null) {
			Trn.emit(eos);
		}

		if (Stc != null) {
			Stc.emit(eos);
		}

		if (Nm1 != null) {
			Nm1.emit(eos);
		}

		if (Prv != null) {
			Prv.emit(eos);
		}

		if (Per != null) {
			Per.emit(eos);
		}

		if (Ref != null) {
			int idx = 0, size = Ref.size();
			while (idx < size) {
				getRef(idx++).emit(eos);
			}
		}

		if (loopUnnamed3 != null) {
			int idx = 0, size = loopUnnamed3.size();
			while (idx < size) {
				getLoopUnnamed3(idx++).emit(eos);
			}
		}

	}

	public EDIElement createCopy() {
		LoopUnnamed2 thisCopy = new LoopUnnamed2();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Lx != null) {
			thisCopy.setLx((SegmentLX)Lx.createCopy());
		}

		if (Trn != null) {
			thisCopy.setTrn((SegmentTRN)Trn.createCopy());
		}

		if (Stc != null) {
			thisCopy.setStc((SegmentSTC)Stc.createCopy());
		}

		if (Nm1 != null) {
			thisCopy.setNm1((SegmentNM1)Nm1.createCopy());
		}

		if (Prv != null) {
			thisCopy.setPrv((SegmentPRV)Prv.createCopy());
		}

		if (Per != null) {
			thisCopy.setPer((SegmentPER)Per.createCopy());
		}

		if (Ref != null) {
			thisCopy.setRef(new ArrayList());
			int idx = 0, size = Ref.size();
			while (idx < size) {
				thisCopy.getRef().add(getRef(idx++).createCopy());
			}
		}

		if (loopUnnamed3 != null) {
			thisCopy.setLoopUnnamed3(new ArrayList());
			int idx = 0, size = loopUnnamed3.size();
			while (idx < size) {
				thisCopy.getLoopUnnamed3().add(getLoopUnnamed3(idx++).createCopy());
			}
		}

		return thisCopy;
	}

}
