package com.webify.shared.edi.model.hipaa275.beans;

import com.webify.shared.edi.model.*;
import java.io.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class SegmentIN1 implements EDIElement {
	private static final Log log = LogFactory.getLog(SegmentIN1.class);

	public static final String SEGMENT_NAME = "IN1";
	public static final int FIELD_COUNT = 7;

	private int lineNumber = 0;
	public int getLineNumber() { return lineNumber; }
	/** Do NOT use this method - it is not public by choice... */
	public void setLineNumber(int foo) { lineNumber = foo; }

	private int ordinal = 0;
	public int getOrdinal() { return ordinal; }
	void setOrdinal(int ord) { ordinal = ord; }

	// Fields
	private String In101;
	public String getIn101() { return In101; }
	public void setIn101(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'IN101' may not be null");
		}
		if (Field1065.validateValue(val)) {
			In101 = val;
		} else {
			throw new IllegalArgumentException("Field 'IN101' cannot have value: " + val);
		}
	}

	private String In102;
	public String getIn102() { return In102; }
	public void setIn102(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'IN102' may not be null");
		}
		if (Field1107.validateValue(val)) {
			In102 = val;
		} else {
			throw new IllegalArgumentException("Field 'IN102' cannot have value: " + val);
		}
	}

	private String In103;
	public String getIn103() { return In103; }
	public void setIn103(String val) {
		if (Field98.validateValue(val)) {
			In103 = val;
		} else {
			throw new IllegalArgumentException("Field 'IN103' cannot have value: " + val);
		}
	}

	private String In104;
	public String getIn104() { return In104; }
	public void setIn104(String val) {
		if (Field128.validateValue(val)) {
			In104 = val;
		} else {
			throw new IllegalArgumentException("Field 'IN104' cannot have value: " + val);
		}
	}

	private String In105;
	public String getIn105() { return In105; }
	public void setIn105(String val) { In105 = val; }

	private String In106;
	public String getIn106() { return In106; }
	public void setIn106(String val) {
		if (Field1069.validateValue(val)) {
			In106 = val;
		} else {
			throw new IllegalArgumentException("Field 'IN106' cannot have value: " + val);
		}
	}

	private String In107;
	public String getIn107() { return In107; }
	public void setIn107(String val) {
		if (Field1131.validateValue(val)) {
			In107 = val;
		} else {
			throw new IllegalArgumentException("Field 'IN107' cannot have value: " + val);
		}
	}


	public void parse(EDIInputStream eis) throws IOException {
		lineNumber = eis.getCurrentSegmentNumber();
		if (log.isDebugEnabled()) log.debug("Starting segment IN1 on line " + lineNumber);
		String[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);
		In101 = eis.getStringValue(fields, 1, 1, 1, true);
		Field1065.validateInputValue(eis, "IN101", In101, ordinal, 1);
		if (In101 == null || "".equals(fields[1].trim())) {
			eis.addError("Field 'IN101' missing");
		}
		In102 = eis.getStringValue(fields, 2, 2, 2, true);
		Field1107.validateInputValue(eis, "IN102", In102, ordinal, 2);
		if (In102 == null || "".equals(fields[2].trim())) {
			eis.addError("Field 'IN102' missing");
		}
		In103 = eis.getStringValue(fields, 3, 2, 3, false);
		Field98.validateInputValue(eis, "IN103", In103, ordinal, 3);
		In104 = eis.getStringValue(fields, 4, 2, 3, false);
		Field128.validateInputValue(eis, "IN104", In104, ordinal, 4);
		In105 = eis.getStringValue(fields, 5, 1, 50, false);
		In106 = eis.getStringValue(fields, 6, 2, 2, false);
		Field1069.validateInputValue(eis, "IN106", In106, ordinal, 6);
		In107 = eis.getStringValue(fields, 7, 2, 2, false);
		Field1131.validateInputValue(eis, "IN107", In107, ordinal, 7);
		validate(eis);
	}

	protected void validate(EDIInputStream eis) {
		// PAIRED
		{
			int setCount = 0;
			if (In104 != null) setCount++;
			if (In105 != null) setCount++;
			if (setCount > 0 && setCount < 2) {
				eis.addError("If any of the following properties are set, all must be set: In104, In105");
			}
		}

	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startSegment("IN1");
		if (In101 == null) {
			eos.addError("Emitting null mandatory field 'IN101'");
		}

		eos.writeField(In101);
		if (In102 == null) {
			eos.addError("Emitting null mandatory field 'IN102'");
		}

		eos.writeField(In102);
		eos.writeField(In103);
		eos.writeField(In104);
		eos.writeField(In105);
		eos.writeField(In106);
		eos.writeField(In107);
		eos.endSegment();
	}

	public EDIElement createCopy() {
		SegmentIN1 copy = new SegmentIN1();
		copy.setLineNumber(this.lineNumber);
		copy.In101 = this.In101;
		copy.In102 = this.In102;
		copy.In103 = this.In103;
		copy.In104 = this.In104;
		copy.In105 = this.In105;
		copy.In106 = this.In106;
		copy.In107 = this.In107;
		return copy;
	}
}
