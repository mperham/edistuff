package com.webify.shared.edi.model.hipaa275.beans;

import com.webify.shared.edi.model.*;
import java.io.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class SegmentNX1 implements EDIElement {
	private static final Log log = LogFactory.getLog(SegmentNX1.class);

	public static final String SEGMENT_NAME = "NX1";
	public static final int FIELD_COUNT = 5;

	private int lineNumber = 0;
	public int getLineNumber() { return lineNumber; }
	/** Do NOT use this method - it is not public by choice... */
	public void setLineNumber(int foo) { lineNumber = foo; }

	private int ordinal = 0;
	public int getOrdinal() { return ordinal; }
	void setOrdinal(int ord) { ordinal = ord; }

	// Fields
	private String Nx101;
	public String getNx101() { return Nx101; }
	public void setNx101(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'NX101' may not be null");
		}
		if (Field98.validateValue(val)) {
			Nx101 = val;
		} else {
			throw new IllegalArgumentException("Field 'NX101' cannot have value: " + val);
		}
	}

	private String Nx102;
	public String getNx102() { return Nx102; }
	public void setNx102(String val) {
		if (Field98.validateValue(val)) {
			Nx102 = val;
		} else {
			throw new IllegalArgumentException("Field 'NX102' cannot have value: " + val);
		}
	}

	private String Nx103;
	public String getNx103() { return Nx103; }
	public void setNx103(String val) {
		if (Field98.validateValue(val)) {
			Nx103 = val;
		} else {
			throw new IllegalArgumentException("Field 'NX103' cannot have value: " + val);
		}
	}

	private String Nx104;
	public String getNx104() { return Nx104; }
	public void setNx104(String val) {
		if (Field98.validateValue(val)) {
			Nx104 = val;
		} else {
			throw new IllegalArgumentException("Field 'NX104' cannot have value: " + val);
		}
	}

	private String Nx105;
	public String getNx105() { return Nx105; }
	public void setNx105(String val) {
		if (Field98.validateValue(val)) {
			Nx105 = val;
		} else {
			throw new IllegalArgumentException("Field 'NX105' cannot have value: " + val);
		}
	}


	public void parse(EDIInputStream eis) throws IOException {
		lineNumber = eis.getCurrentSegmentNumber();
		if (log.isDebugEnabled()) log.debug("Starting segment NX1 on line " + lineNumber);
		String[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);
		Nx101 = eis.getStringValue(fields, 1, 2, 3, true);
		Field98.validateInputValue(eis, "NX101", Nx101, ordinal, 1);
		if (Nx101 == null || "".equals(fields[1].trim())) {
			eis.addError("Field 'NX101' missing");
		}
		Nx102 = eis.getStringValue(fields, 2, 2, 3, false);
		Field98.validateInputValue(eis, "NX102", Nx102, ordinal, 2);
		Nx103 = eis.getStringValue(fields, 3, 2, 3, false);
		Field98.validateInputValue(eis, "NX103", Nx103, ordinal, 3);
		Nx104 = eis.getStringValue(fields, 4, 2, 3, false);
		Field98.validateInputValue(eis, "NX104", Nx104, ordinal, 4);
		Nx105 = eis.getStringValue(fields, 5, 2, 3, false);
		Field98.validateInputValue(eis, "NX105", Nx105, ordinal, 5);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startSegment("NX1");
		if (Nx101 == null) {
			eos.addError("Emitting null mandatory field 'NX101'");
		}

		eos.writeField(Nx101);
		eos.writeField(Nx102);
		eos.writeField(Nx103);
		eos.writeField(Nx104);
		eos.writeField(Nx105);
		eos.endSegment();
	}

	public EDIElement createCopy() {
		SegmentNX1 copy = new SegmentNX1();
		copy.setLineNumber(this.lineNumber);
		copy.Nx101 = this.Nx101;
		copy.Nx102 = this.Nx102;
		copy.Nx103 = this.Nx103;
		copy.Nx104 = this.Nx104;
		copy.Nx105 = this.Nx105;
		return copy;
	}
}
