package com.webify.shared.edi.model.hipaa275.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa275.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoopUnnamed3 extends EDILoop {

	private static final Log log = LogFactory.getLog(LoopUnnamed3.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentDTP Dtp;
	public SegmentDTP getDtp() { return Dtp; }
	public void setDtp(SegmentDTP seg) { Dtp = seg; }

	private SegmentCAT Cat;
	public SegmentCAT getCat() { return Cat; }
	public void setCat(SegmentCAT seg) { Cat = seg; }

	private SegmentPID Pid;
	public SegmentPID getPid() { return Pid; }
	public void setPid(SegmentPID seg) { Pid = seg; }


	// Loops
	private LoopUnnamed4 loopUnnamed4;
	public LoopUnnamed4 getLoopUnnamed4() { return loopUnnamed4; }
	public void setLoopUnnamed4(LoopUnnamed4 loop) { loopUnnamed4 = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop Unnamed3");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (eis.peekSegment("DTP")) {
			Dtp = new SegmentDTP();
			Dtp.setOrdinal(22);
			Dtp.parse(eis);
		}

		if (eis.peekSegment("CAT")) {
			Cat = new SegmentCAT();
			Cat.setOrdinal(23);
			Cat.parse(eis);
		}

		if (eis.peekSegment("PID")) {
			Pid = new SegmentPID();
			Pid.setOrdinal(24);
			Pid.parse(eis);
		}

		while (true) {
			if (eis.peekSegment("EFI")) {
				if (loopUnnamed4 != null) {
					eis.addError("Only one instance of Loop Unnamed4 is allowed.");
				} else {
					loopUnnamed4 = new LoopUnnamed4();
					loopUnnamed4.parse(eis);
				}
			}
			else {
				break;
			}
		}

		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Dtp != null) {
			Dtp.emit(eos);
		}

		if (Cat != null) {
			Cat.emit(eos);
		}

		if (Pid != null) {
			Pid.emit(eos);
		}

		if (loopUnnamed4 != null) {
			loopUnnamed4.emit(eos);
		}

	}

	public EDIElement createCopy() {
		LoopUnnamed3 thisCopy = new LoopUnnamed3();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Dtp != null) {
			thisCopy.setDtp((SegmentDTP)Dtp.createCopy());
		}

		if (Cat != null) {
			thisCopy.setCat((SegmentCAT)Cat.createCopy());
		}

		if (Pid != null) {
			thisCopy.setPid((SegmentPID)Pid.createCopy());
		}

		if (loopUnnamed4 != null) {
			thisCopy.setLoopUnnamed4((LoopUnnamed4)loopUnnamed4.createCopy());
		}

		return thisCopy;
	}

}
