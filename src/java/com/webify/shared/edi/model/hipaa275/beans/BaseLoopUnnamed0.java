package com.webify.shared.edi.model.hipaa275.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa275.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoopUnnamed0 extends EDILoop {

	private static final Log log = LogFactory.getLog(LoopUnnamed0.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentNM1 Nm1;
	public SegmentNM1 getNm1() { return Nm1; }
	public void setNm1(SegmentNM1 seg) { Nm1 = seg; }

	private SegmentIN1 In1;
	public SegmentIN1 getIn1() { return In1; }
	public void setIn1(SegmentIN1 seg) { In1 = seg; }

	private List Dmg;
	public SegmentDMG getDmg(int idx) { 
		if (Dmg == null || idx >= Dmg.size()) {
			throw new ArrayIndexOutOfBoundsException("Dmg");
		}
		return (SegmentDMG) Dmg.get(idx);
	}
	public List getDmg() {
		return Dmg;
	}
	public void setDmg(List segs) { Dmg = segs; }

	private SegmentPRV Prv;
	public SegmentPRV getPrv() { return Prv; }
	public void setPrv(SegmentPRV seg) { Prv = seg; }

	private List Per;
	public SegmentPER getPer(int idx) { 
		if (Per == null || idx >= Per.size()) {
			throw new ArrayIndexOutOfBoundsException("Per");
		}
		return (SegmentPER) Per.get(idx);
	}
	public List getPer() {
		return Per;
	}
	public void setPer(List segs) { Per = segs; }

	private List Ref;
	public SegmentREF getRef(int idx) { 
		if (Ref == null || idx >= Ref.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref");
		}
		return (SegmentREF) Ref.get(idx);
	}
	public List getRef() {
		return Ref;
	}
	public void setRef(List segs) { Ref = segs; }

	private SegmentDTP Dtp;
	public SegmentDTP getDtp() { return Dtp; }
	public void setDtp(SegmentDTP seg) { Dtp = seg; }


	// Loops
	private List loopUnnamed1;
	public LoopUnnamed1 getLoopUnnamed1(int idx) { 
		if (loopUnnamed1 == null || idx >= loopUnnamed1.size()) {
			throw new ArrayIndexOutOfBoundsException("loopUnnamed1");
		}
		return (LoopUnnamed1) loopUnnamed1.get(idx);
	}
	public List getLoopUnnamed1() {
		return loopUnnamed1;
	}
	public void setLoopUnnamed1(List loop) { loopUnnamed1 = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop Unnamed0");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (eis.peekSegment("NM1")) {
			Nm1 = new SegmentNM1();
			Nm1.setOrdinal(5);
			Nm1.parse(eis);
		}

		if (eis.peekSegment("IN1")) {
			In1 = new SegmentIN1();
			In1.setOrdinal(6);
			In1.parse(eis);
		}

		while (eis.peekSegment("DMG")) {
			if (Dmg == null) Dmg = new ArrayList();
			SegmentDMG tmp = new SegmentDMG();
			tmp.setOrdinal(7);
			tmp.parse(eis);
			Dmg.add(tmp);
			if (Dmg.size() > 3) {
				eis.addError("Segment DMG has too many instances.  It can only repeat 3 times");
				eis.eatSegments("DMG");
				break;
			}
		}

		if (eis.peekSegment("PRV")) {
			Prv = new SegmentPRV();
			Prv.setOrdinal(8);
			Prv.parse(eis);
		}

		while (eis.peekSegment("PER")) {
			if (Per == null) Per = new ArrayList();
			SegmentPER tmp = new SegmentPER();
			tmp.setOrdinal(9);
			tmp.parse(eis);
			Per.add(tmp);
			if (Per.size() > 2) {
				eis.addError("Segment PER has too many instances.  It can only repeat 2 times");
				eis.eatSegments("PER");
				break;
			}
		}

		while (eis.peekSegment("REF")) {
			if (Ref == null) Ref = new ArrayList();
			SegmentREF tmp = new SegmentREF();
			tmp.setOrdinal(10);
			tmp.parse(eis);
			Ref.add(tmp);
			if (Ref.size() > 5) {
				eis.addError("Segment REF has too many instances.  It can only repeat 5 times");
				eis.eatSegments("REF");
				break;
			}
		}

		if (eis.peekSegment("DTP")) {
			Dtp = new SegmentDTP();
			Dtp.setOrdinal(11);
			Dtp.parse(eis);
		}

		while (true) {
			if (eis.peekSegment("NX1")) {
				if (loopUnnamed1 == null) loopUnnamed1 = new ArrayList();
				LoopUnnamed1 tmp = new LoopUnnamed1();
				tmp.parse(eis);
				loopUnnamed1.add(tmp);
			}
			else {
				break;
			}
		}

		if (loopUnnamed1 != null && loopUnnamed1.size() > 5) {
			eis.addError("Loop Unnamed1 has too many instances.  It can repeat only 5 times");
		}
		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Nm1 != null) {
			Nm1.emit(eos);
		}

		if (In1 != null) {
			In1.emit(eos);
		}

		if (Dmg != null) {
			int idx = 0, size = Dmg.size();
			while (idx < size) {
				getDmg(idx++).emit(eos);
			}
		}

		if (Prv != null) {
			Prv.emit(eos);
		}

		if (Per != null) {
			int idx = 0, size = Per.size();
			while (idx < size) {
				getPer(idx++).emit(eos);
			}
		}

		if (Ref != null) {
			int idx = 0, size = Ref.size();
			while (idx < size) {
				getRef(idx++).emit(eos);
			}
		}

		if (Dtp != null) {
			Dtp.emit(eos);
		}

		if (loopUnnamed1 != null) {
			int idx = 0, size = loopUnnamed1.size();
			while (idx < size) {
				getLoopUnnamed1(idx++).emit(eos);
			}
		}

	}

	public EDIElement createCopy() {
		LoopUnnamed0 thisCopy = new LoopUnnamed0();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Nm1 != null) {
			thisCopy.setNm1((SegmentNM1)Nm1.createCopy());
		}

		if (In1 != null) {
			thisCopy.setIn1((SegmentIN1)In1.createCopy());
		}

		if (Dmg != null) {
			thisCopy.setDmg(new ArrayList());
			int idx = 0, size = Dmg.size();
			while (idx < size) {
				thisCopy.getDmg().add(getDmg(idx++).createCopy());
			}
		}

		if (Prv != null) {
			thisCopy.setPrv((SegmentPRV)Prv.createCopy());
		}

		if (Per != null) {
			thisCopy.setPer(new ArrayList());
			int idx = 0, size = Per.size();
			while (idx < size) {
				thisCopy.getPer().add(getPer(idx++).createCopy());
			}
		}

		if (Ref != null) {
			thisCopy.setRef(new ArrayList());
			int idx = 0, size = Ref.size();
			while (idx < size) {
				thisCopy.getRef().add(getRef(idx++).createCopy());
			}
		}

		if (Dtp != null) {
			thisCopy.setDtp((SegmentDTP)Dtp.createCopy());
		}

		if (loopUnnamed1 != null) {
			thisCopy.setLoopUnnamed1(new ArrayList());
			int idx = 0, size = loopUnnamed1.size();
			while (idx < size) {
				thisCopy.getLoopUnnamed1().add(getLoopUnnamed1(idx++).createCopy());
			}
		}

		return thisCopy;
	}

}
