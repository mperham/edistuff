package com.webify.shared.edi.model.hipaa275.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa275.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public abstract class BaseHipaa275Document extends EDITransaction {

	public static final String DOCUMENT_ID = "275";
	public static final List STANDARDS_IDS = new ArrayList();

	static {
		STANDARDS_IDS.add("004050,275");
	}


	private static final Log log = LogFactory.getLog(Hipaa275Document.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentST St;
	public SegmentST getSt() { return St; }
	public void setSt(SegmentST seg) { St = seg; }

	private SegmentBGN Bgn;
	public SegmentBGN getBgn() { return Bgn; }
	public void setBgn(SegmentBGN seg) { Bgn = seg; }

	private List Dtm;
	public SegmentDTM getDtm(int idx) { 
		if (Dtm == null || idx >= Dtm.size()) {
			throw new ArrayIndexOutOfBoundsException("Dtm");
		}
		return (SegmentDTM) Dtm.get(idx);
	}
	public List getDtm() {
		return Dtm;
	}
	public void setDtm(List segs) { Dtm = segs; }

	private List Trn;
	public SegmentTRN getTrn(int idx) { 
		if (Trn == null || idx >= Trn.size()) {
			throw new ArrayIndexOutOfBoundsException("Trn");
		}
		return (SegmentTRN) Trn.get(idx);
	}
	public List getTrn() {
		return Trn;
	}
	public void setTrn(List segs) { Trn = segs; }

	private SegmentSE Se;
	public SegmentSE getSe() { return Se; }
	public void setSe(SegmentSE seg) { Se = seg; }


	// Loops
	private List loopUnnamed0;
	public LoopUnnamed0 getLoopUnnamed0(int idx) { 
		if (loopUnnamed0 == null || idx >= loopUnnamed0.size()) {
			throw new ArrayIndexOutOfBoundsException("loopUnnamed0");
		}
		return (LoopUnnamed0) loopUnnamed0.get(idx);
	}
	public List getLoopUnnamed0() {
		return loopUnnamed0;
	}
	public void setLoopUnnamed0(List loop) { loopUnnamed0 = loop; }

	private List loopUnnamed2;
	public LoopUnnamed2 getLoopUnnamed2(int idx) { 
		if (loopUnnamed2 == null || idx >= loopUnnamed2.size()) {
			throw new ArrayIndexOutOfBoundsException("loopUnnamed2");
		}
		return (LoopUnnamed2) loopUnnamed2.get(idx);
	}
	public List getLoopUnnamed2() {
		return loopUnnamed2;
	}
	public void setLoopUnnamed2(List loop) { loopUnnamed2 = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 275");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (!eis.peekSegment("ST")) {
			eis.addError("A single instance of Segment ST is required.");
		} else {
			St = new SegmentST();
			St.setOrdinal(1);
			St.parse(eis);
		}

		if (eis.peekSegment("BGN")) {
			Bgn = new SegmentBGN();
			Bgn.setOrdinal(2);
			Bgn.parse(eis);
		}

		while (eis.peekSegment("DTM")) {
			if (Dtm == null) Dtm = new ArrayList();
			SegmentDTM tmp = new SegmentDTM();
			tmp.setOrdinal(3);
			tmp.parse(eis);
			Dtm.add(tmp);
			if (Dtm.size() > 3) {
				eis.addError("Segment DTM has too many instances.  It can only repeat 3 times");
				eis.eatSegments("DTM");
				break;
			}
		}

		while (eis.peekSegment("TRN")) {
			if (Trn == null) Trn = new ArrayList();
			SegmentTRN tmp = new SegmentTRN();
			tmp.setOrdinal(4);
			tmp.parse(eis);
			Trn.add(tmp);
			if (Trn.size() > 5) {
				eis.addError("Segment TRN has too many instances.  It can only repeat 5 times");
				eis.eatSegments("TRN");
				break;
			}
		}

		while (true) {
			if (eis.peekSegment("NM1")) {
				if (loopUnnamed0 == null) loopUnnamed0 = new ArrayList();
				LoopUnnamed0 tmp = new LoopUnnamed0();
				tmp.parse(eis);
				loopUnnamed0.add(tmp);
			}
			else if (eis.peekSegment("LX")) {
				if (loopUnnamed2 == null) loopUnnamed2 = new ArrayList();
				LoopUnnamed2 tmp = new LoopUnnamed2();
				tmp.parse(eis);
				loopUnnamed2.add(tmp);
			}
			else {
				break;
			}
		}

		if (!eis.peekSegment("SE")) {
			eis.addError("A single instance of Segment SE is required.");
		} else {
			Se = new SegmentSE();
			Se.setOrdinal(27);
			Se.parse(eis);
		}

		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (St != null) {
			St.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'ST'");
		}

		if (Bgn != null) {
			Bgn.emit(eos);
		}

		if (Dtm != null) {
			int idx = 0, size = Dtm.size();
			while (idx < size) {
				getDtm(idx++).emit(eos);
			}
		}

		if (Trn != null) {
			int idx = 0, size = Trn.size();
			while (idx < size) {
				getTrn(idx++).emit(eos);
			}
		}

		if (loopUnnamed0 != null) {
			int idx = 0, size = loopUnnamed0.size();
			while (idx < size) {
				getLoopUnnamed0(idx++).emit(eos);
			}
		}

		if (loopUnnamed2 != null) {
			int idx = 0, size = loopUnnamed2.size();
			while (idx < size) {
				getLoopUnnamed2(idx++).emit(eos);
			}
		}

		if (Se != null) {
			Se.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'SE'");
		}

	}

	public EDIElement createCopy() {
		Hipaa275Document thisCopy = new Hipaa275Document();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (St != null) {
			thisCopy.setSt((SegmentST)St.createCopy());
		}

		if (Bgn != null) {
			thisCopy.setBgn((SegmentBGN)Bgn.createCopy());
		}

		if (Dtm != null) {
			thisCopy.setDtm(new ArrayList());
			int idx = 0, size = Dtm.size();
			while (idx < size) {
				thisCopy.getDtm().add(getDtm(idx++).createCopy());
			}
		}

		if (Trn != null) {
			thisCopy.setTrn(new ArrayList());
			int idx = 0, size = Trn.size();
			while (idx < size) {
				thisCopy.getTrn().add(getTrn(idx++).createCopy());
			}
		}

		if (loopUnnamed0 != null) {
			thisCopy.setLoopUnnamed0(new ArrayList());
			int idx = 0, size = loopUnnamed0.size();
			while (idx < size) {
				thisCopy.getLoopUnnamed0().add(getLoopUnnamed0(idx++).createCopy());
			}
		}

		if (loopUnnamed2 != null) {
			thisCopy.setLoopUnnamed2(new ArrayList());
			int idx = 0, size = loopUnnamed2.size();
			while (idx < size) {
				thisCopy.getLoopUnnamed2().add(getLoopUnnamed2(idx++).createCopy());
			}
		}

		if (Se != null) {
			thisCopy.setSe((SegmentSE)Se.createCopy());
		}

		return thisCopy;
	}

}
