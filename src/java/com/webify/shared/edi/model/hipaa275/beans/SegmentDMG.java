package com.webify.shared.edi.model.hipaa275.beans;

import com.webify.shared.edi.model.*;
import java.io.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class SegmentDMG implements EDIElement {
	private static final Log log = LogFactory.getLog(SegmentDMG.class);

	public static final String SEGMENT_NAME = "DMG";
	public static final int FIELD_COUNT = 11;

	private int lineNumber = 0;
	public int getLineNumber() { return lineNumber; }
	/** Do NOT use this method - it is not public by choice... */
	public void setLineNumber(int foo) { lineNumber = foo; }

	private int ordinal = 0;
	public int getOrdinal() { return ordinal; }
	void setOrdinal(int ord) { ordinal = ord; }

	// Fields
	private String Dmg01;
	public String getDmg01() { return Dmg01; }
	public void setDmg01(String val) {
		if (Field1250.validateValue(val)) {
			Dmg01 = val;
		} else {
			throw new IllegalArgumentException("Field 'DMG01' cannot have value: " + val);
		}
	}

	private String Dmg02;
	public String getDmg02() { return Dmg02; }
	public void setDmg02(String val) { Dmg02 = val; }

	private String Dmg03;
	public String getDmg03() { return Dmg03; }
	public void setDmg03(String val) {
		if (Field1068.validateValue(val)) {
			Dmg03 = val;
		} else {
			throw new IllegalArgumentException("Field 'DMG03' cannot have value: " + val);
		}
	}

	private String Dmg04;
	public String getDmg04() { return Dmg04; }
	public void setDmg04(String val) {
		if (Field1067.validateValue(val)) {
			Dmg04 = val;
		} else {
			throw new IllegalArgumentException("Field 'DMG04' cannot have value: " + val);
		}
	}

	private CompositeC056 Dmg05;
	public CompositeC056 getDmg05() { return Dmg05; }
	public void setDmg05(CompositeC056 val) { Dmg05 = val; }

	private String Dmg06;
	public String getDmg06() { return Dmg06; }
	public void setDmg06(String val) {
		if (Field1066.validateValue(val)) {
			Dmg06 = val;
		} else {
			throw new IllegalArgumentException("Field 'DMG06' cannot have value: " + val);
		}
	}

	private String Dmg07;
	public String getDmg07() { return Dmg07; }
	public void setDmg07(String val) { Dmg07 = val; }

	private String Dmg08;
	public String getDmg08() { return Dmg08; }
	public void setDmg08(String val) {
		if (Field659.validateValue(val)) {
			Dmg08 = val;
		} else {
			throw new IllegalArgumentException("Field 'DMG08' cannot have value: " + val);
		}
	}

	private java.math.BigDecimal Dmg09;
	public java.math.BigDecimal getDmg09() { return Dmg09; }
	public void setDmg09(java.math.BigDecimal val) { Dmg09 = val; }

	private String Dmg10;
	public String getDmg10() { return Dmg10; }
	public void setDmg10(String val) {
		if (Field1270.validateValue(val)) {
			Dmg10 = val;
		} else {
			throw new IllegalArgumentException("Field 'DMG10' cannot have value: " + val);
		}
	}

	private String Dmg11;
	public String getDmg11() { return Dmg11; }
	public void setDmg11(String val) { Dmg11 = val; }


	public void parse(EDIInputStream eis) throws IOException {
		lineNumber = eis.getCurrentSegmentNumber();
		if (log.isDebugEnabled()) log.debug("Starting segment DMG on line " + lineNumber);
		String[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);
		Dmg01 = eis.getStringValue(fields, 1, 2, 3, false);
		Field1250.validateInputValue(eis, "DMG01", Dmg01, ordinal, 1);
		Dmg02 = eis.getStringValue(fields, 2, 1, 35, false);
		Dmg03 = eis.getStringValue(fields, 3, 1, 1, false);
		Field1068.validateInputValue(eis, "DMG03", Dmg03, ordinal, 3);
		Dmg04 = eis.getStringValue(fields, 4, 1, 1, false);
		Field1067.validateInputValue(eis, "DMG04", Dmg04, ordinal, 4);
		if (eis.checkBounds(fields, 5, false)) {
			Dmg05 = new CompositeC056();
			Dmg05.setOrdinal(ordinal + "-" + 5);
			Dmg05.parse(eis, fields[5]);
		}
		Dmg06 = eis.getStringValue(fields, 6, 1, 2, false);
		Field1066.validateInputValue(eis, "DMG06", Dmg06, ordinal, 6);
		Dmg07 = eis.getStringValue(fields, 7, 2, 3, false);
		Dmg08 = eis.getStringValue(fields, 8, 1, 2, false);
		Field659.validateInputValue(eis, "DMG08", Dmg08, ordinal, 8);
		Dmg09 = eis.getDecimalValue(fields, 9, false);
		Dmg10 = eis.getStringValue(fields, 10, 1, 3, false);
		Field1270.validateInputValue(eis, "DMG10", Dmg10, ordinal, 10);
		Dmg11 = eis.getStringValue(fields, 11, 1, 30, false);
		validate(eis);
	}

	protected void validate(EDIInputStream eis) {
		// PAIRED
		{
			int setCount = 0;
			if (Dmg01 != null) setCount++;
			if (Dmg02 != null) setCount++;
			if (setCount > 0 && setCount < 2) {
				eis.addError("If any of the following properties are set, all must be set: Dmg01, Dmg02");
			}
		}

		// PAIRED
		{
			int setCount = 0;
			if (Dmg10 != null) setCount++;
			if (Dmg11 != null) setCount++;
			if (setCount > 0 && setCount < 2) {
				eis.addError("If any of the following properties are set, all must be set: Dmg10, Dmg11");
			}
		}

		// CONDITIONAL
		if (Dmg11 != null) {
			if (Dmg05 == null) {
				eis.addError("If 'Dmg11' is set, the following must be set also: Dmg05");
			}
		}

	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startSegment("DMG");
		eos.writeField(Dmg01);
		eos.writeField(Dmg02);
		eos.writeField(Dmg03);
		eos.writeField(Dmg04);
		if (Dmg05 != null) {
			Dmg05.emit(eos);
		} else {
			eos.writeNullField();
		}
		eos.writeField(Dmg06);
		eos.writeField(Dmg07);
		eos.writeField(Dmg08);
		eos.writeField(Dmg09);
		eos.writeField(Dmg10);
		eos.writeField(Dmg11);
		eos.endSegment();
	}

	public EDIElement createCopy() {
		SegmentDMG copy = new SegmentDMG();
		copy.setLineNumber(this.lineNumber);
		copy.Dmg01 = this.Dmg01;
		copy.Dmg02 = this.Dmg02;
		copy.Dmg03 = this.Dmg03;
		copy.Dmg04 = this.Dmg04;
		if (getDmg05() != null) copy.setDmg05((CompositeC056)getDmg05().createCopy());
		copy.Dmg06 = this.Dmg06;
		copy.Dmg07 = this.Dmg07;
		copy.Dmg08 = this.Dmg08;
		copy.Dmg09 = this.Dmg09;
		copy.Dmg10 = this.Dmg10;
		copy.Dmg11 = this.Dmg11;
		return copy;
	}
}
