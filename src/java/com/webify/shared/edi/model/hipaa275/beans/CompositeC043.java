package com.webify.shared.edi.model.hipaa275.beans;

import com.webify.shared.edi.model.*;
import java.io.IOException;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class CompositeC043 implements EDICompositeField {

	public static final String COMPOSITE_NAME = "C043";
	public static final int ELEMENT_COUNT = 4;

	private String ordinal = null;
	void setOrdinal(String ord) { ordinal = ord; }

	// Elements
	private String C043_01;
	public String getC043_01() { return C043_01; }
	public void setC043_01(String val) { C043_01 = val; }

	private String C043_02;
	public String getC043_02() { return C043_02; }
	public void setC043_02(String val) { C043_02 = val; }

	private String C043_03;
	public String getC043_03() { return C043_03; }
	public void setC043_03(String val) {
		if (Field98.validateValue(val)) {
			C043_03 = val;
		} else {
			throw new IllegalArgumentException("Field 'C043_03' cannot have value: " + val);
		}
	}

	private String C043_04;
	public String getC043_04() { return C043_04; }
	public void setC043_04(String val) {
		if (Field1270.validateValue(val)) {
			C043_04 = val;
		} else {
			throw new IllegalArgumentException("Field 'C043_04' cannot have value: " + val);
		}
	}

	public String[] getElements() {
		String[] values = new String[ELEMENT_COUNT];
		values[0] = EDIUtils.stringValue(C043_01);
		values[1] = EDIUtils.stringValue(C043_02);
		values[2] = EDIUtils.stringValue(C043_03);
		values[3] = EDIUtils.stringValue(C043_04);
		return values;
	}

	public void setElements(String[] values) throws EDIParseException {
		if (values == null || values.length != ELEMENT_COUNT) {
			throw new EDIParseException("values array must be non-null and contain " + ELEMENT_COUNT + " elements");
		}
		C043_01 = EDIUtils.getStringValue(values, 0, 1, 30, true);
		if (C043_01 == null) {
			throw new EDIParseException("Field 'C043_01' is mandatory");
		}
		C043_02 = EDIUtils.getStringValue(values, 1, 1, 30, true);
		if (C043_02 == null) {
			throw new EDIParseException("Field 'C043_02' is mandatory");
		}
		C043_03 = EDIUtils.getStringValue(values, 2, 2, 3, false);
		String overrideKey2 = ordinal + "-" + 128;
		Object[] lvalues2 = (Object[]) Field98.getLegalValues(overrideKey2);
		if (!EDIUtils.validateValue(C043_03, lvalues2)) {
			throw new EDIParseException("Illegal value '" + C043_03 + "' for field C043_03");
		}
		C043_04 = EDIUtils.getStringValue(values, 3, 1, 3, false);
		String overrideKey3 = ordinal + "-" + 129;
		Object[] lvalues3 = (Object[]) Field1270.getLegalValues(overrideKey3);
		if (!EDIUtils.validateValue(C043_04, lvalues3)) {
			throw new EDIParseException("Illegal value '" + C043_04 + "' for field C043_04");
		}
	}

	public void parse(EDIInputStream eis, String fieldValue) throws IOException {
		String[] elements = eis.getCompositeValue(fieldValue, ELEMENT_COUNT);
		C043_01 = eis.getStringValue(elements, 0, 1, 30, true);
		if (C043_01 == null) {
			eis.addError("Field 'C043_01' is mandatory");
		}
		C043_02 = eis.getStringValue(elements, 1, 1, 30, true);
		if (C043_02 == null) {
			eis.addError("Field 'C043_02' is mandatory");
		}
		C043_03 = eis.getStringValue(elements, 2, 2, 3, false);
		Field98.validateInputValue(eis, "C043_03", C043_03, ordinal, 128);
		C043_04 = eis.getStringValue(elements, 3, 1, 3, false);
		Field1270.validateInputValue(eis, "C043_04", C043_04, ordinal, 129);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startComposite();
		if (C043_01 == null) {
			eos.addError("Emitting null mandatory field 'C043_01'");
		}
		eos.writeElement(C043_01);
		if (C043_02 == null) {
			eos.addError("Emitting null mandatory field 'C043_02'");
		}
		eos.writeElement(C043_02);
		eos.writeElement(C043_03);
		eos.writeElement(C043_04);
		eos.endComposite();
	}

	public EDIElement createCopy() {
		CompositeC043 copy = new CompositeC043();
		copy.C043_01 = this.C043_01;
		copy.C043_02 = this.C043_02;
		copy.C043_03 = this.C043_03;
		copy.C043_04 = this.C043_04;
		return copy;
	}
}
