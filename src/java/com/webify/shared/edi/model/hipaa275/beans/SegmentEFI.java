package com.webify.shared.edi.model.hipaa275.beans;

import com.webify.shared.edi.model.*;
import java.io.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class SegmentEFI implements EDIElement {
	private static final Log log = LogFactory.getLog(SegmentEFI.class);

	public static final String SEGMENT_NAME = "EFI";
	public static final int FIELD_COUNT = 16;

	private int lineNumber = 0;
	public int getLineNumber() { return lineNumber; }
	/** Do NOT use this method - it is not public by choice... */
	public void setLineNumber(int foo) { lineNumber = foo; }

	private int ordinal = 0;
	public int getOrdinal() { return ordinal; }
	void setOrdinal(int ord) { ordinal = ord; }

	// Fields
	private String Efi01;
	public String getEfi01() { return Efi01; }
	public void setEfi01(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'EFI01' may not be null");
		}
		if (Field786.validateValue(val)) {
			Efi01 = val;
		} else {
			throw new IllegalArgumentException("Field 'EFI01' cannot have value: " + val);
		}
	}

	private String Efi02;
	public String getEfi02() { return Efi02; }
	public void setEfi02(String val) { Efi02 = val; }

	private String Efi03;
	public String getEfi03() { return Efi03; }
	public void setEfi03(String val) {
		if (Field797.validateValue(val)) {
			Efi03 = val;
		} else {
			throw new IllegalArgumentException("Field 'EFI03' cannot have value: " + val);
		}
	}

	private String Efi04;
	public String getEfi04() { return Efi04; }
	public void setEfi04(String val) { Efi04 = val; }

	private String Efi05;
	public String getEfi05() { return Efi05; }
	public void setEfi05(String val) { Efi05 = val; }

	private String Efi06;
	public String getEfi06() { return Efi06; }
	public void setEfi06(String val) { Efi06 = val; }

	private String Efi07;
	public String getEfi07() { return Efi07; }
	public void setEfi07(String val) { Efi07 = val; }

	private String Efi08;
	public String getEfi08() { return Efi08; }
	public void setEfi08(String val) { Efi08 = val; }

	private String Efi09;
	public String getEfi09() { return Efi09; }
	public void setEfi09(String val) { Efi09 = val; }

	private String Efi10;
	public String getEfi10() { return Efi10; }
	public void setEfi10(String val) {
		if (Field789.validateValue(val)) {
			Efi10 = val;
		} else {
			throw new IllegalArgumentException("Field 'EFI10' cannot have value: " + val);
		}
	}

	private String Efi11;
	public String getEfi11() { return Efi11; }
	public void setEfi11(String val) { Efi11 = val; }

	private String Efi12;
	public String getEfi12() { return Efi12; }
	public void setEfi12(String val) { Efi12 = val; }

	private Integer Efi13;
	public Integer getEfi13() { return Efi13; }
	public void setEfi13(Integer val) { Efi13 = val; }

	private Integer Efi14;
	public Integer getEfi14() { return Efi14; }
	public void setEfi14(Integer val) { Efi14 = val; }

	private String Efi15;
	public String getEfi15() { return Efi15; }
	public void setEfi15(String val) { Efi15 = val; }

	private String Efi16;
	public String getEfi16() { return Efi16; }
	public void setEfi16(String val) {
		if (Field1570.validateValue(val)) {
			Efi16 = val;
		} else {
			throw new IllegalArgumentException("Field 'EFI16' cannot have value: " + val);
		}
	}


	public void parse(EDIInputStream eis) throws IOException {
		lineNumber = eis.getCurrentSegmentNumber();
		if (log.isDebugEnabled()) log.debug("Starting segment EFI on line " + lineNumber);
		String[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);
		Efi01 = eis.getStringValue(fields, 1, 2, 2, true);
		Field786.validateInputValue(eis, "EFI01", Efi01, ordinal, 1);
		if (Efi01 == null || "".equals(fields[1].trim())) {
			eis.addError("Field 'EFI01' missing");
		}
		Efi02 = eis.getStringValue(fields, 2, 1, 264, false);
		Efi03 = eis.getStringValue(fields, 3, 2, 2, false);
		Field797.validateInputValue(eis, "EFI03", Efi03, ordinal, 3);
		Efi04 = eis.getStringValue(fields, 4, 1, 30, false);
		Efi05 = eis.getStringValue(fields, 5, 1, 30, false);
		Efi06 = eis.getStringValue(fields, 6, 1, 30, false);
		Efi07 = eis.getStringValue(fields, 7, 1, 30, false);
		Efi08 = eis.getStringValue(fields, 8, 1, 30, false);
		Efi09 = eis.getStringValue(fields, 9, 1, 30, false);
		Efi10 = eis.getStringValue(fields, 10, 2, 2, false);
		Field789.validateInputValue(eis, "EFI10", Efi10, ordinal, 10);
		Efi11 = eis.getStringValue(fields, 11, 1, 64, false);
		Efi12 = eis.getStringValue(fields, 12, 1, 4, false);
		Efi13 = eis.getIntegerValue(fields, 13, false);
		Efi14 = eis.getIntegerValue(fields, 14, false);
		Efi15 = eis.getStringValue(fields, 15, 1, 30, false);
		Efi16 = eis.getStringValue(fields, 16, 3, 3, false);
		Field1570.validateInputValue(eis, "EFI16", Efi16, ordinal, 16);
		validate(eis);
	}

	protected void validate(EDIInputStream eis) {
		// CONDITIONAL
		if (Efi05 != null) {
			if (Efi04 == null) {
				eis.addError("If 'Efi05' is set, the following must be set also: Efi04");
			}
		}

		// CONDITIONAL
		if (Efi07 != null) {
			if (Efi06 == null) {
				eis.addError("If 'Efi07' is set, the following must be set also: Efi06");
			}
		}

		// CONDITIONAL
		if (Efi09 != null) {
			if (Efi08 == null) {
				eis.addError("If 'Efi09' is set, the following must be set also: Efi08");
			}
		}

		// PAIRED
		{
			int setCount = 0;
			if (Efi15 != null) setCount++;
			if (Efi16 != null) setCount++;
			if (setCount > 0 && setCount < 2) {
				eis.addError("If any of the following properties are set, all must be set: Efi15, Efi16");
			}
		}

	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startSegment("EFI");
		if (Efi01 == null) {
			eos.addError("Emitting null mandatory field 'EFI01'");
		}

		eos.writeField(Efi01);
		eos.writeField(Efi02);
		eos.writeField(Efi03);
		eos.writeField(Efi04);
		eos.writeField(Efi05);
		eos.writeField(Efi06);
		eos.writeField(Efi07);
		eos.writeField(Efi08);
		eos.writeField(Efi09);
		eos.writeField(Efi10);
		eos.writeField(Efi11);
		eos.writeField(Efi12);
		eos.writeField(Efi13);
		eos.writeField(Efi14);
		eos.writeField(Efi15);
		eos.writeField(Efi16);
		eos.endSegment();
	}

	public EDIElement createCopy() {
		SegmentEFI copy = new SegmentEFI();
		copy.setLineNumber(this.lineNumber);
		copy.Efi01 = this.Efi01;
		copy.Efi02 = this.Efi02;
		copy.Efi03 = this.Efi03;
		copy.Efi04 = this.Efi04;
		copy.Efi05 = this.Efi05;
		copy.Efi06 = this.Efi06;
		copy.Efi07 = this.Efi07;
		copy.Efi08 = this.Efi08;
		copy.Efi09 = this.Efi09;
		copy.Efi10 = this.Efi10;
		copy.Efi11 = this.Efi11;
		copy.Efi12 = this.Efi12;
		copy.Efi13 = this.Efi13;
		copy.Efi14 = this.Efi14;
		copy.Efi15 = this.Efi15;
		copy.Efi16 = this.Efi16;
		return copy;
	}
}
