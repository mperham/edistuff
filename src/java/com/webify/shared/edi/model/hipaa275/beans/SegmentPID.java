package com.webify.shared.edi.model.hipaa275.beans;

import com.webify.shared.edi.model.*;
import java.io.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class SegmentPID implements EDIElement {
	private static final Log log = LogFactory.getLog(SegmentPID.class);

	public static final String SEGMENT_NAME = "PID";
	public static final int FIELD_COUNT = 9;

	private int lineNumber = 0;
	public int getLineNumber() { return lineNumber; }
	/** Do NOT use this method - it is not public by choice... */
	public void setLineNumber(int foo) { lineNumber = foo; }

	private int ordinal = 0;
	public int getOrdinal() { return ordinal; }
	void setOrdinal(int ord) { ordinal = ord; }

	// Fields
	private String Pid01;
	public String getPid01() { return Pid01; }
	public void setPid01(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'PID01' may not be null");
		}
		if (Field349.validateValue(val)) {
			Pid01 = val;
		} else {
			throw new IllegalArgumentException("Field 'PID01' cannot have value: " + val);
		}
	}

	private String Pid02;
	public String getPid02() { return Pid02; }
	public void setPid02(String val) {
		if (Field750.validateValue(val)) {
			Pid02 = val;
		} else {
			throw new IllegalArgumentException("Field 'PID02' cannot have value: " + val);
		}
	}

	private String Pid03;
	public String getPid03() { return Pid03; }
	public void setPid03(String val) {
		if (Field559.validateValue(val)) {
			Pid03 = val;
		} else {
			throw new IllegalArgumentException("Field 'PID03' cannot have value: " + val);
		}
	}

	private String Pid04;
	public String getPid04() { return Pid04; }
	public void setPid04(String val) { Pid04 = val; }

	private String Pid05;
	public String getPid05() { return Pid05; }
	public void setPid05(String val) { Pid05 = val; }

	private String Pid06;
	public String getPid06() { return Pid06; }
	public void setPid06(String val) {
		if (Field752.validateValue(val)) {
			Pid06 = val;
		} else {
			throw new IllegalArgumentException("Field 'PID06' cannot have value: " + val);
		}
	}

	private String Pid07;
	public String getPid07() { return Pid07; }
	public void setPid07(String val) { Pid07 = val; }

	private String Pid08;
	public String getPid08() { return Pid08; }
	public void setPid08(String val) {
		if (Field1073.validateValue(val)) {
			Pid08 = val;
		} else {
			throw new IllegalArgumentException("Field 'PID08' cannot have value: " + val);
		}
	}

	private String Pid09;
	public String getPid09() { return Pid09; }
	public void setPid09(String val) { Pid09 = val; }


	public void parse(EDIInputStream eis) throws IOException {
		lineNumber = eis.getCurrentSegmentNumber();
		if (log.isDebugEnabled()) log.debug("Starting segment PID on line " + lineNumber);
		String[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);
		Pid01 = eis.getStringValue(fields, 1, 1, 1, true);
		Field349.validateInputValue(eis, "PID01", Pid01, ordinal, 1);
		if (Pid01 == null || "".equals(fields[1].trim())) {
			eis.addError("Field 'PID01' missing");
		}
		Pid02 = eis.getStringValue(fields, 2, 2, 3, false);
		Field750.validateInputValue(eis, "PID02", Pid02, ordinal, 2);
		Pid03 = eis.getStringValue(fields, 3, 2, 2, false);
		Field559.validateInputValue(eis, "PID03", Pid03, ordinal, 3);
		Pid04 = eis.getStringValue(fields, 4, 1, 12, false);
		Pid05 = eis.getStringValue(fields, 5, 1, 80, false);
		Pid06 = eis.getStringValue(fields, 6, 2, 2, false);
		Field752.validateInputValue(eis, "PID06", Pid06, ordinal, 6);
		Pid07 = eis.getStringValue(fields, 7, 1, 15, false);
		Pid08 = eis.getStringValue(fields, 8, 1, 1, false);
		Field1073.validateInputValue(eis, "PID08", Pid08, ordinal, 8);
		Pid09 = eis.getStringValue(fields, 9, 2, 3, false);
		validate(eis);
	}

	protected void validate(EDIInputStream eis) {
		// CONDITIONAL
		if (Pid04 != null) {
			if (Pid03 == null) {
				eis.addError("If 'Pid04' is set, the following must be set also: Pid03");
			}
		}

		// REQUIRE_ONE_OF
		if (Pid04 == null && Pid05 == null) {
			eis.addError("Segment 'Pid' requires at least one field of the following to be set: Pid04, Pid05");
		}

		// CONDITIONAL
		if (Pid07 != null) {
			if (Pid03 == null) {
				eis.addError("If 'Pid07' is set, the following must be set also: Pid03");
			}
		}

		// CONDITIONAL
		if (Pid08 != null) {
			if (Pid04 == null) {
				eis.addError("If 'Pid08' is set, the following must be set also: Pid04");
			}
		}

		// CONDITIONAL
		if (Pid09 != null) {
			if (Pid05 == null) {
				eis.addError("If 'Pid09' is set, the following must be set also: Pid05");
			}
		}

	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startSegment("PID");
		if (Pid01 == null) {
			eos.addError("Emitting null mandatory field 'PID01'");
		}

		eos.writeField(Pid01);
		eos.writeField(Pid02);
		eos.writeField(Pid03);
		eos.writeField(Pid04);
		eos.writeField(Pid05);
		eos.writeField(Pid06);
		eos.writeField(Pid07);
		eos.writeField(Pid08);
		eos.writeField(Pid09);
		eos.endSegment();
	}

	public EDIElement createCopy() {
		SegmentPID copy = new SegmentPID();
		copy.setLineNumber(this.lineNumber);
		copy.Pid01 = this.Pid01;
		copy.Pid02 = this.Pid02;
		copy.Pid03 = this.Pid03;
		copy.Pid04 = this.Pid04;
		copy.Pid05 = this.Pid05;
		copy.Pid06 = this.Pid06;
		copy.Pid07 = this.Pid07;
		copy.Pid08 = this.Pid08;
		copy.Pid09 = this.Pid09;
		return copy;
	}
}
