package com.webify.shared.edi.model.hipaa270.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa270.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoop2000D extends EDILoop {

	private static final Log log = LogFactory.getLog(Loop2000D.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	public static final String[] TRIGGER_VALUES = new String[] {
		"23"
	};

	private Loop2000C parent;
	public Loop2000C getParent() { return parent; }
	public void setParent(Loop2000C dad) { parent = dad; }

	// Segments
	private SegmentHL_2 Hl;
	public SegmentHL_2 getHl() { return Hl; }
	public void setHl(SegmentHL_2 seg) { Hl = seg; }

	private List Trn;
	public SegmentTRN_1 getTrn(int idx) { 
		if (Trn == null || idx >= Trn.size()) {
			throw new ArrayIndexOutOfBoundsException("Trn");
		}
		return (SegmentTRN_1) Trn.get(idx);
	}
	public List getTrn() {
		return Trn;
	}
	public void setTrn(List segs) { Trn = segs; }


	// Loops
	private Loop2100D loop2100D;
	public Loop2100D getLoop2100D() { return loop2100D; }
	public void setLoop2100D(Loop2100D loop) { loop2100D = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 2000D");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (eis.peekSegment("HL")) {
			Hl = new SegmentHL_2();
			Hl.setOrdinal(27);
			Hl.parse(eis);
		}

		while (eis.peekSegment("TRN")) {
			if (Trn == null) Trn = new ArrayList();
			SegmentTRN_1 tmp = new SegmentTRN_1();
			tmp.setOrdinal(28);
			tmp.parse(eis);
			Trn.add(tmp);
			if (Trn.size() > 2) {
				eis.addError("Segment TRN has too many instances.  It can only repeat 2 times");
				eis.eatSegments("TRN");
				break;
			}
		}

		while (true) {
			if (eis.peekSegment("NM1")) {
				if (loop2100D != null) {
					eis.addError("Only one instance of Loop 2100D is allowed.");
				} else {
					loop2100D = new Loop2100D();
					loop2100D.parse(eis);
				}
			}
			else {
				break;
			}
		}

		if (loop2100D == null) {
			eis.addError("An instance of Loop 2100D is required.");
		}
		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Hl != null) {
			Hl.emit(eos);
		}

		if (Trn != null) {
			int idx = 0, size = Trn.size();
			while (idx < size) {
				getTrn(idx++).emit(eos);
			}
		}

		if (loop2100D != null) {
			loop2100D.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'LOOP2100D'");
		}

	}

	public EDIElement createCopy() {
		Loop2000D thisCopy = new Loop2000D();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Hl != null) {
			thisCopy.setHl((SegmentHL_2)Hl.createCopy());
		}

		if (Trn != null) {
			thisCopy.setTrn(new ArrayList());
			int idx = 0, size = Trn.size();
			while (idx < size) {
				thisCopy.getTrn().add(getTrn(idx++).createCopy());
			}
		}

		if (loop2100D != null) {
			thisCopy.setLoop2100D((Loop2100D)loop2100D.createCopy());
		}

		return thisCopy;
	}

}
