package com.webify.shared.edi.model.hipaa277.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa277.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoop2000C extends EDILoop {

	private static final Log log = LogFactory.getLog(Loop2000C.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	public static final String[] TRIGGER_VALUES = new String[] {
		"19"
	};

	private List children;
	public void setChildList(List kids) { children = kids; }
	public List getChildList() { 
		if (children == null) return Collections.EMPTY_LIST;
		return children;
	}

	public void addChild(Loop2000D kid) {
		if (children == null) children = new ArrayList();
		children.add(kid);
	}
	public Loop2000D[] getChildren() { 
		List kids = getChildList();
		return (Loop2000D[]) kids.toArray(new Loop2000D[kids.size()]);
	}
	public Loop2000D getChild(int idx) { 
		if (children == null || idx >= children.size()) {
			throw new ArrayIndexOutOfBoundsException(Integer.toString(idx));
		}
		return (Loop2000D) children.get(idx);
	}

	private Loop2000B parent;
	public Loop2000B getParent() { return parent; }
	public void setParent(Loop2000B dad) { parent = dad; }

	// Segments
	private SegmentHL_2 Hl;
	public SegmentHL_2 getHl() { return Hl; }
	public void setHl(SegmentHL_2 seg) { Hl = seg; }


	// Loops
	private List loop2100C;
	public Loop2100C getLoop2100C(int idx) { 
		if (loop2100C == null || idx >= loop2100C.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2100C");
		}
		return (Loop2100C) loop2100C.get(idx);
	}
	public List getLoop2100C() {
		return loop2100C;
	}
	public void setLoop2100C(List loop) { loop2100C = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 2000C");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (!eis.peekSegment("HL")) {
			eis.addError("A single instance of Segment HL is required.");
		} else {
			Hl = new SegmentHL_2();
			Hl.setOrdinal(8);
			Hl.parse(eis);
		}

		while (true) {
			if (eis.peekSegment("NM1")) {
				if (loop2100C == null) loop2100C = new ArrayList();
				Loop2100C tmp = new Loop2100C();
				tmp.parse(eis);
				loop2100C.add(tmp);
			}
			else {
				break;
			}
		}

		if (loop2100C == null) {
			eis.addError("Loop 2100C must be used.");
		}
		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Hl != null) {
			Hl.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'HL'");
		}

		if (loop2100C != null) {
			int idx = 0, size = loop2100C.size();
			while (idx < size) {
				getLoop2100C(idx++).emit(eos);
			}
		} else {
			eos.addError("Missing mandatory segment 'LOOP2100C'");
		}

	}

	public EDIElement createCopy() {
		Loop2000C thisCopy = new Loop2000C();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Hl != null) {
			thisCopy.setHl((SegmentHL_2)Hl.createCopy());
		}

		if (loop2100C != null) {
			thisCopy.setLoop2100C(new ArrayList());
			int idx = 0, size = loop2100C.size();
			while (idx < size) {
				thisCopy.getLoop2100C().add(getLoop2100C(idx++).createCopy());
			}
		}

		return thisCopy;
	}

}
