package com.webify.shared.edi.model.hipaa277.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa277.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoop2000E extends EDILoop {

	private static final Log log = LogFactory.getLog(Loop2000E.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	public static final String[] TRIGGER_VALUES = new String[] {
		"23"
	};

	private Loop2000D parent;
	public Loop2000D getParent() { return parent; }
	public void setParent(Loop2000D dad) { parent = dad; }

	// Segments
	private SegmentHL_3 Hl;
	public SegmentHL_3 getHl() { return Hl; }
	public void setHl(SegmentHL_3 seg) { Hl = seg; }

	private SegmentDMG_1 Dmg;
	public SegmentDMG_1 getDmg() { return Dmg; }
	public void setDmg(SegmentDMG_1 seg) { Dmg = seg; }


	// Loops
	private Loop2100E loop2100E;
	public Loop2100E getLoop2100E() { return loop2100E; }
	public void setLoop2100E(Loop2100E loop) { loop2100E = loop; }

	private List loop2200E;
	public Loop2200E getLoop2200E(int idx) { 
		if (loop2200E == null || idx >= loop2200E.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2200E");
		}
		return (Loop2200E) loop2200E.get(idx);
	}
	public List getLoop2200E() {
		return loop2200E;
	}
	public void setLoop2200E(List loop) { loop2200E = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 2000E");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (eis.peekSegment("HL")) {
			Hl = new SegmentHL_3();
			Hl.setOrdinal(23);
			Hl.parse(eis);
		}

		if (!eis.peekSegment("DMG")) {
			eis.addError("A single instance of Segment DMG is required.");
		} else {
			Dmg = new SegmentDMG_1();
			Dmg.setOrdinal(24);
			Dmg.parse(eis);
		}

		while (true) {
			if (eis.peekSegment("NM1")) {
				if (loop2100E != null) {
					eis.addError("Only one instance of Loop 2100E is allowed.");
				} else {
					loop2100E = new Loop2100E();
					loop2100E.parse(eis);
				}
			}
			else if (eis.peekSegment("TRN")) {
				if (loop2200E == null) loop2200E = new ArrayList();
				Loop2200E tmp = new Loop2200E();
				tmp.parse(eis);
				loop2200E.add(tmp);
			}
			else {
				break;
			}
		}

		if (loop2100E == null) {
			eis.addError("An instance of Loop 2100E is required.");
		}
		if (loop2200E == null) {
			eis.addError("Loop 2200E must be used.");
		}
		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Hl != null) {
			Hl.emit(eos);
		}

		if (Dmg != null) {
			Dmg.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'DMG'");
		}

		if (loop2100E != null) {
			loop2100E.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'LOOP2100E'");
		}

		if (loop2200E != null) {
			int idx = 0, size = loop2200E.size();
			while (idx < size) {
				getLoop2200E(idx++).emit(eos);
			}
		} else {
			eos.addError("Missing mandatory segment 'LOOP2200E'");
		}

	}

	public EDIElement createCopy() {
		Loop2000E thisCopy = new Loop2000E();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Hl != null) {
			thisCopy.setHl((SegmentHL_3)Hl.createCopy());
		}

		if (Dmg != null) {
			thisCopy.setDmg((SegmentDMG_1)Dmg.createCopy());
		}

		if (loop2100E != null) {
			thisCopy.setLoop2100E((Loop2100E)loop2100E.createCopy());
		}

		if (loop2200E != null) {
			thisCopy.setLoop2200E(new ArrayList());
			int idx = 0, size = loop2200E.size();
			while (idx < size) {
				thisCopy.getLoop2200E().add(getLoop2200E(idx++).createCopy());
			}
		}

		return thisCopy;
	}

}
