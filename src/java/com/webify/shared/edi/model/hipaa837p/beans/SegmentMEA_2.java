package com.webify.shared.edi.model.hipaa837p.beans;

import com.webify.shared.edi.model.*;
import java.io.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class SegmentMEA_2 implements EDIElement {
	private static final Log log = LogFactory.getLog(SegmentMEA_2.class);

	public static final String SEGMENT_NAME = "MEA";
	public static final int FIELD_COUNT = 3;

	private int lineNumber = 0;
	public int getLineNumber() { return lineNumber; }
	/** Do NOT use this method - it is not public by choice... */
	public void setLineNumber(int foo) { lineNumber = foo; }

	private int ordinal = 0;
	public int getOrdinal() { return ordinal; }
	void setOrdinal(int ord) { ordinal = ord; }

	// Fields
	private String Mea01;
	public String getMea01() { return Mea01; }
	public void setMea01(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'MEA01' may not be null");
		}
		if (Field737.validateValue(val)) {
			Mea01 = val;
		} else {
			throw new IllegalArgumentException("Field 'MEA01' cannot have value: " + val);
		}
	}

	private String Mea02;
	public String getMea02() { return Mea02; }
	public void setMea02(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'MEA02' may not be null");
		}
		if (Field738.validateValue(val)) {
			Mea02 = val;
		} else {
			throw new IllegalArgumentException("Field 'MEA02' cannot have value: " + val);
		}
	}

	private java.math.BigDecimal Mea03;
	public java.math.BigDecimal getMea03() { return Mea03; }
	public void setMea03(java.math.BigDecimal val) { Mea03 = val; }


	public void parse(EDIInputStream eis) throws IOException {
		lineNumber = eis.getCurrentSegmentNumber();
		if (log.isDebugEnabled()) log.debug("Starting segment MEA on line " + lineNumber);
		String[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);
		Mea01 = eis.getStringValue(fields, 1, 2, 2, true);
		Field737.validateInputValue(eis, "MEA01", Mea01, ordinal, 1);
		if (Mea01 == null || "".equals(fields[1].trim())) {
			eis.addError("Field 'MEA01' missing");
		}
		Mea02 = eis.getStringValue(fields, 2, 1, 3, true);
		Field738.validateInputValue(eis, "MEA02", Mea02, ordinal, 2);
		if (Mea02 == null || "".equals(fields[2].trim())) {
			eis.addError("Field 'MEA02' missing");
		}
		Mea03 = eis.getDecimalValue(fields, 3, true);
		if (Mea03 == null || "".equals(fields[3].trim())) {
			eis.addError("Field 'MEA03' missing");
		}
		validate(eis);
	}

	protected void validate(EDIInputStream eis) {
	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startSegment("MEA");
		if (Mea01 == null) {
			eos.addError("Emitting null mandatory field 'MEA01'");
		}

		eos.writeField(Mea01);
		if (Mea02 == null) {
			eos.addError("Emitting null mandatory field 'MEA02'");
		}

		eos.writeField(Mea02);
		if (Mea03 == null) {
			eos.addError("Emitting null mandatory field 'MEA03'");
		}

		eos.writeField(Mea03);
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.endSegment();
	}

	public EDIElement createCopy() {
		SegmentMEA_2 copy = new SegmentMEA_2();
		copy.setLineNumber(this.lineNumber);
		copy.Mea01 = this.Mea01;
		copy.Mea02 = this.Mea02;
		copy.Mea03 = this.Mea03;
		return copy;
	}
}
