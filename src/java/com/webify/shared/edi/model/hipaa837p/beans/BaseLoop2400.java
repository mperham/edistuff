package com.webify.shared.edi.model.hipaa837p.beans;

import com.webify.shared.edi.model.*;
import com.webify.shared.edi.model.hipaa837p.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.util.*;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class BaseLoop2400 extends EDILoop {

	private static final Log log = LogFactory.getLog(Loop2400.class);

	private int startLineNumber, endLineNumber;
	public int getStartLineNumber() { return startLineNumber; }
	public int getEndLineNumber() { return endLineNumber; }

	/** Do NOT use this method - it is not public by choice... */
	public void setEndLineNumber(int foo) { endLineNumber = foo; }
	/** Do NOT use this method - it is not public by choice... */
	public void setStartLineNumber(int foo) { startLineNumber = foo; }

	// Segments
	private SegmentLX_1 Lx;
	public SegmentLX_1 getLx() { return Lx; }
	public void setLx(SegmentLX_1 seg) { Lx = seg; }

	private SegmentSV1_1 Sv1;
	public SegmentSV1_1 getSv1() { return Sv1; }
	public void setSv1(SegmentSV1_1 seg) { Sv1 = seg; }

	private SegmentSV4_1 Sv4;
	public SegmentSV4_1 getSv4() { return Sv4; }
	public void setSv4(SegmentSV4_1 seg) { Sv4 = seg; }

	private SegmentSV5_2 Sv5;
	public SegmentSV5_2 getSv5() { return Sv5; }
	public void setSv5(SegmentSV5_2 seg) { Sv5 = seg; }

	private SegmentPWK_2 Pwk;
	public SegmentPWK_2 getPwk() { return Pwk; }
	public void setPwk(SegmentPWK_2 seg) { Pwk = seg; }

	private SegmentCR1_1 Cr1;
	public SegmentCR1_1 getCr1() { return Cr1; }
	public void setCr1(SegmentCR1_1 seg) { Cr1 = seg; }

	private List Cr2;
	public SegmentCR2_4 getCr2(int idx) { 
		if (Cr2 == null || idx >= Cr2.size()) {
			throw new ArrayIndexOutOfBoundsException("Cr2");
		}
		return (SegmentCR2_4) Cr2.get(idx);
	}
	public List getCr2() {
		return Cr2;
	}
	public void setCr2(List segs) { Cr2 = segs; }

	private SegmentCR3_1 Cr3;
	public SegmentCR3_1 getCr3() { return Cr3; }
	public void setCr3(SegmentCR3_1 seg) { Cr3 = seg; }

	private SegmentCR5_1 Cr5;
	public SegmentCR5_1 getCr5() { return Cr5; }
	public void setCr5(SegmentCR5_1 seg) { Cr5 = seg; }

	private List Crc01;
	public SegmentCRC_1 getCrc01(int idx) { 
		if (Crc01 == null || idx >= Crc01.size()) {
			throw new ArrayIndexOutOfBoundsException("Crc01");
		}
		return (SegmentCRC_1) Crc01.get(idx);
	}
	public List getCrc01() {
		return Crc01;
	}
	public void setCrc01(List segs) { Crc01 = segs; }

	private SegmentCRC_2 Crc02;
	public SegmentCRC_2 getCrc02() { return Crc02; }
	public void setCrc02(SegmentCRC_2 seg) { Crc02 = seg; }

	private List Crc03;
	public SegmentCRC_1 getCrc03(int idx) { 
		if (Crc03 == null || idx >= Crc03.size()) {
			throw new ArrayIndexOutOfBoundsException("Crc03");
		}
		return (SegmentCRC_1) Crc03.get(idx);
	}
	public List getCrc03() {
		return Crc03;
	}
	public void setCrc03(List segs) { Crc03 = segs; }

	private SegmentDTP_1 Dtp01;
	public SegmentDTP_1 getDtp01() { return Dtp01; }
	public void setDtp01(SegmentDTP_1 seg) { Dtp01 = seg; }

	private SegmentDTP_1 Dtp02;
	public SegmentDTP_1 getDtp02() { return Dtp02; }
	public void setDtp02(SegmentDTP_1 seg) { Dtp02 = seg; }

	private SegmentDTP_1 Dtp03;
	public SegmentDTP_1 getDtp03() { return Dtp03; }
	public void setDtp03(SegmentDTP_1 seg) { Dtp03 = seg; }

	private SegmentDTP_1 Dtp04;
	public SegmentDTP_1 getDtp04() { return Dtp04; }
	public void setDtp04(SegmentDTP_1 seg) { Dtp04 = seg; }

	private SegmentDTP_1 Dtp05;
	public SegmentDTP_1 getDtp05() { return Dtp05; }
	public void setDtp05(SegmentDTP_1 seg) { Dtp05 = seg; }

	private List Dtp06;
	public SegmentDTP_1 getDtp06(int idx) { 
		if (Dtp06 == null || idx >= Dtp06.size()) {
			throw new ArrayIndexOutOfBoundsException("Dtp06");
		}
		return (SegmentDTP_1) Dtp06.get(idx);
	}
	public List getDtp06() {
		return Dtp06;
	}
	public void setDtp06(List segs) { Dtp06 = segs; }

	private List Dtp07;
	public SegmentDTP_1 getDtp07(int idx) { 
		if (Dtp07 == null || idx >= Dtp07.size()) {
			throw new ArrayIndexOutOfBoundsException("Dtp07");
		}
		return (SegmentDTP_1) Dtp07.get(idx);
	}
	public List getDtp07() {
		return Dtp07;
	}
	public void setDtp07(List segs) { Dtp07 = segs; }

	private SegmentDTP_1 Dtp08;
	public SegmentDTP_1 getDtp08() { return Dtp08; }
	public void setDtp08(SegmentDTP_1 seg) { Dtp08 = seg; }

	private SegmentDTP_1 Dtp09;
	public SegmentDTP_1 getDtp09() { return Dtp09; }
	public void setDtp09(SegmentDTP_1 seg) { Dtp09 = seg; }

	private SegmentDTP_1 Dtp10;
	public SegmentDTP_1 getDtp10() { return Dtp10; }
	public void setDtp10(SegmentDTP_1 seg) { Dtp10 = seg; }

	private SegmentDTP_1 Dtp11;
	public SegmentDTP_1 getDtp11() { return Dtp11; }
	public void setDtp11(SegmentDTP_1 seg) { Dtp11 = seg; }

	private SegmentDTP_1 Dtp12;
	public SegmentDTP_1 getDtp12() { return Dtp12; }
	public void setDtp12(SegmentDTP_1 seg) { Dtp12 = seg; }

	private SegmentDTP_1 Dtp13;
	public SegmentDTP_1 getDtp13() { return Dtp13; }
	public void setDtp13(SegmentDTP_1 seg) { Dtp13 = seg; }

	private List Qty;
	public SegmentQTY_1 getQty(int idx) { 
		if (Qty == null || idx >= Qty.size()) {
			throw new ArrayIndexOutOfBoundsException("Qty");
		}
		return (SegmentQTY_1) Qty.get(idx);
	}
	public List getQty() {
		return Qty;
	}
	public void setQty(List segs) { Qty = segs; }

	private List Mea;
	public SegmentMEA_2 getMea(int idx) { 
		if (Mea == null || idx >= Mea.size()) {
			throw new ArrayIndexOutOfBoundsException("Mea");
		}
		return (SegmentMEA_2) Mea.get(idx);
	}
	public List getMea() {
		return Mea;
	}
	public void setMea(List segs) { Mea = segs; }

	private SegmentCN1_1 Cn1;
	public SegmentCN1_1 getCn1() { return Cn1; }
	public void setCn1(SegmentCN1_1 seg) { Cn1 = seg; }

	private SegmentREF_1 Ref01;
	public SegmentREF_1 getRef01() { return Ref01; }
	public void setRef01(SegmentREF_1 seg) { Ref01 = seg; }

	private SegmentREF_1 Ref02;
	public SegmentREF_1 getRef02() { return Ref02; }
	public void setRef02(SegmentREF_1 seg) { Ref02 = seg; }

	private List Ref03;
	public SegmentREF_1 getRef03(int idx) { 
		if (Ref03 == null || idx >= Ref03.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref03");
		}
		return (SegmentREF_1) Ref03.get(idx);
	}
	public List getRef03() {
		return Ref03;
	}
	public void setRef03(List segs) { Ref03 = segs; }

	private SegmentREF_1 Ref04;
	public SegmentREF_1 getRef04() { return Ref04; }
	public void setRef04(SegmentREF_1 seg) { Ref04 = seg; }

	private SegmentREF_1 Ref05;
	public SegmentREF_1 getRef05() { return Ref05; }
	public void setRef05(SegmentREF_1 seg) { Ref05 = seg; }

	private SegmentREF_1 Ref06;
	public SegmentREF_1 getRef06() { return Ref06; }
	public void setRef06(SegmentREF_1 seg) { Ref06 = seg; }

	private SegmentREF_1 Ref07;
	public SegmentREF_1 getRef07() { return Ref07; }
	public void setRef07(SegmentREF_1 seg) { Ref07 = seg; }

	private SegmentREF_1 Ref08;
	public SegmentREF_1 getRef08() { return Ref08; }
	public void setRef08(SegmentREF_1 seg) { Ref08 = seg; }

	private List Ref09;
	public SegmentREF_1 getRef09(int idx) { 
		if (Ref09 == null || idx >= Ref09.size()) {
			throw new ArrayIndexOutOfBoundsException("Ref09");
		}
		return (SegmentREF_1) Ref09.get(idx);
	}
	public List getRef09() {
		return Ref09;
	}
	public void setRef09(List segs) { Ref09 = segs; }

	private SegmentREF_1 Ref10;
	public SegmentREF_1 getRef10() { return Ref10; }
	public void setRef10(SegmentREF_1 seg) { Ref10 = seg; }

	private SegmentREF_1 Ref11;
	public SegmentREF_1 getRef11() { return Ref11; }
	public void setRef11(SegmentREF_1 seg) { Ref11 = seg; }

	private SegmentAMT_1 Amt01;
	public SegmentAMT_1 getAmt01() { return Amt01; }
	public void setAmt01(SegmentAMT_1 seg) { Amt01 = seg; }

	private SegmentAMT_1 Amt02;
	public SegmentAMT_1 getAmt02() { return Amt02; }
	public void setAmt02(SegmentAMT_1 seg) { Amt02 = seg; }

	private SegmentAMT_1 Amt03;
	public SegmentAMT_1 getAmt03() { return Amt03; }
	public void setAmt03(SegmentAMT_1 seg) { Amt03 = seg; }

	private List K3;
	public SegmentK3_1 getK3(int idx) { 
		if (K3 == null || idx >= K3.size()) {
			throw new ArrayIndexOutOfBoundsException("K3");
		}
		return (SegmentK3_1) K3.get(idx);
	}
	public List getK3() {
		return K3;
	}
	public void setK3(List segs) { K3 = segs; }

	private SegmentNTE_1 Nte;
	public SegmentNTE_1 getNte() { return Nte; }
	public void setNte(SegmentNTE_1 seg) { Nte = seg; }

	private SegmentPS1_1 Ps1;
	public SegmentPS1_1 getPs1() { return Ps1; }
	public void setPs1(SegmentPS1_1 seg) { Ps1 = seg; }

	private SegmentHSD_1 Hsd;
	public SegmentHSD_1 getHsd() { return Hsd; }
	public void setHsd(SegmentHSD_1 seg) { Hsd = seg; }

	private SegmentHCP_2 Hcp;
	public SegmentHCP_2 getHcp() { return Hcp; }
	public void setHcp(SegmentHCP_2 seg) { Hcp = seg; }


	// Loops
	private List loop2410;
	public Loop2410 getLoop2410(int idx) { 
		if (loop2410 == null || idx >= loop2410.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2410");
		}
		return (Loop2410) loop2410.get(idx);
	}
	public List getLoop2410() {
		return loop2410;
	}
	public void setLoop2410(List loop) { loop2410 = loop; }

	private Loop2420A loop2420A;
	public Loop2420A getLoop2420A() { return loop2420A; }
	public void setLoop2420A(Loop2420A loop) { loop2420A = loop; }

	private Loop2420B loop2420B;
	public Loop2420B getLoop2420B() { return loop2420B; }
	public void setLoop2420B(Loop2420B loop) { loop2420B = loop; }

	private Loop2420C loop2420C;
	public Loop2420C getLoop2420C() { return loop2420C; }
	public void setLoop2420C(Loop2420C loop) { loop2420C = loop; }

	private Loop2420D loop2420D;
	public Loop2420D getLoop2420D() { return loop2420D; }
	public void setLoop2420D(Loop2420D loop) { loop2420D = loop; }

	private Loop2420E loop2420E;
	public Loop2420E getLoop2420E() { return loop2420E; }
	public void setLoop2420E(Loop2420E loop) { loop2420E = loop; }

	private List loop2420F;
	public Loop2420F getLoop2420F(int idx) { 
		if (loop2420F == null || idx >= loop2420F.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2420F");
		}
		return (Loop2420F) loop2420F.get(idx);
	}
	public List getLoop2420F() {
		return loop2420F;
	}
	public void setLoop2420F(List loop) { loop2420F = loop; }

	private List loop2420G;
	public Loop2420G getLoop2420G(int idx) { 
		if (loop2420G == null || idx >= loop2420G.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2420G");
		}
		return (Loop2420G) loop2420G.get(idx);
	}
	public List getLoop2420G() {
		return loop2420G;
	}
	public void setLoop2420G(List loop) { loop2420G = loop; }

	private List loop2430;
	public Loop2430 getLoop2430(int idx) { 
		if (loop2430 == null || idx >= loop2430.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2430");
		}
		return (Loop2430) loop2430.get(idx);
	}
	public List getLoop2430() {
		return loop2430;
	}
	public void setLoop2430(List loop) { loop2430 = loop; }

	private List loop2440;
	public Loop2440 getLoop2440(int idx) { 
		if (loop2440 == null || idx >= loop2440.size()) {
			throw new ArrayIndexOutOfBoundsException("loop2440");
		}
		return (Loop2440) loop2440.get(idx);
	}
	public List getLoop2440() {
		return loop2440;
	}
	public void setLoop2440(List loop) { loop2440 = loop; }


	public void parse(EDIInputStream eis) throws IOException {
		if (log.isDebugEnabled()) log.debug("Starting loop 2400");
		startLineNumber = eis.getCurrentSegmentNumber() + 1;

		if (!eis.peekSegment("LX")) {
			eis.addError("A single instance of Segment LX is required.");
		} else {
			Lx = new SegmentLX_1();
			Lx.setOrdinal(346);
			Lx.parse(eis);
		}

		if (!eis.peekSegment("SV1")) {
			eis.addError("A single instance of Segment SV1 is required.");
		} else {
			Sv1 = new SegmentSV1_1();
			Sv1.setOrdinal(347);
			Sv1.parse(eis);
		}

		if (eis.peekSegment("SV4")) {
			Sv4 = new SegmentSV4_1();
			Sv4.setOrdinal(348);
			Sv4.parse(eis);
		}

		if (eis.peekSegment("SV5")) {
			Sv5 = new SegmentSV5_2();
			Sv5.setOrdinal(435);
			Sv5.parse(eis);
		}

		if (eis.peekSegment("PWK")) {
			Pwk = new SegmentPWK_2();
			Pwk.setOrdinal(349);
			Pwk.parse(eis);
		}

		if (eis.peekSegment("CR1")) {
			Cr1 = new SegmentCR1_1();
			Cr1.setOrdinal(350);
			Cr1.parse(eis);
		}

		while (eis.peekSegment("CR2")) {
			if (Cr2 == null) Cr2 = new ArrayList();
			SegmentCR2_4 tmp = new SegmentCR2_4();
			tmp.setOrdinal(351);
			tmp.parse(eis);
			Cr2.add(tmp);
			if (Cr2.size() > 5) {
				eis.addError("Segment CR2 has too many instances.  It can only repeat 5 times");
				eis.eatSegments("CR2");
				break;
			}
		}

		if (eis.peekSegment("CR3")) {
			Cr3 = new SegmentCR3_1();
			Cr3.setOrdinal(352);
			Cr3.parse(eis);
		}

		if (eis.peekSegment("CR5")) {
			Cr5 = new SegmentCR5_1();
			Cr5.setOrdinal(353);
			Cr5.parse(eis);
		}

		while (eis.peekSegment("CRC", 1, "07")) {
			if (Crc01 == null) Crc01 = new ArrayList();
			SegmentCRC_1 tmp = new SegmentCRC_1();
			tmp.setOrdinal(354);
			tmp.parse(eis);
			Crc01.add(tmp);
			if (Crc01.size() > 3) {
				eis.addError("Segment CRC has too many instances.  It can only repeat 3 times");
				eis.eatSegments("CRC");
				break;
			}
		}

		if (eis.peekSegment("CRC", 1, "70")) {
			Crc02 = new SegmentCRC_2();
			Crc02.setOrdinal(355);
			Crc02.parse(eis);
		}

		while (eis.peekSegment("CRC", 1, new String[] { "09", "11" })) {
			if (Crc03 == null) Crc03 = new ArrayList();
			SegmentCRC_1 tmp = new SegmentCRC_1();
			tmp.setOrdinal(356);
			tmp.parse(eis);
			Crc03.add(tmp);
			if (Crc03.size() > 2) {
				eis.addError("Segment CRC has too many instances.  It can only repeat 2 times");
				eis.eatSegments("CRC");
				break;
			}
		}
		if (eis.peekSegment("CRC")) {
			eis.addError("Segment CRC could not be parsed.");
			eis.eatSegments("CRC");
		}

		if (!eis.peekSegment("DTP", 1, "472")) {
			eis.addError("A single instance of Segment DTP is required.");
		} else {
			Dtp01 = new SegmentDTP_1();
			Dtp01.setOrdinal(357);
			Dtp01.parse(eis);
		}

		if (eis.peekSegment("DTP", 1, "607")) {
			Dtp02 = new SegmentDTP_1();
			Dtp02.setOrdinal(358);
			Dtp02.parse(eis);
		}

		if (eis.peekSegment("DTP", 1, "463")) {
			Dtp03 = new SegmentDTP_1();
			Dtp03.setOrdinal(360);
			Dtp03.parse(eis);
		}

		if (eis.peekSegment("DTP", 1, "461")) {
			Dtp04 = new SegmentDTP_1();
			Dtp04.setOrdinal(361);
			Dtp04.parse(eis);
		}

		if (eis.peekSegment("DTP", 1, "304")) {
			Dtp05 = new SegmentDTP_1();
			Dtp05.setOrdinal(363);
			Dtp05.parse(eis);
		}

		while (eis.peekSegment("DTP", 1, new String[] { "738", "739" })) {
			if (Dtp06 == null) Dtp06 = new ArrayList();
			SegmentDTP_1 tmp = new SegmentDTP_1();
			tmp.setOrdinal(364);
			tmp.parse(eis);
			Dtp06.add(tmp);
			if (Dtp06.size() > 2) {
				eis.addError("Segment DTP has too many instances.  It can only repeat 2 times");
				eis.eatSegments("DTP");
				break;
			}
		}

		while (eis.peekSegment("DTP", 1, new String[] { "119", "480", "481" })) {
			if (Dtp07 == null) Dtp07 = new ArrayList();
			SegmentDTP_1 tmp = new SegmentDTP_1();
			tmp.setOrdinal(365);
			tmp.parse(eis);
			Dtp07.add(tmp);
			if (Dtp07.size() > 3) {
				eis.addError("Segment DTP has too many instances.  It can only repeat 3 times");
				eis.eatSegments("DTP");
				break;
			}
		}

		if (eis.peekSegment("DTP", 1, "011")) {
			Dtp08 = new SegmentDTP_1();
			Dtp08.setOrdinal(366);
			Dtp08.parse(eis);
		}

		if (eis.peekSegment("DTP", 1, "431")) {
			Dtp09 = new SegmentDTP_1();
			Dtp09.setOrdinal(367);
			Dtp09.parse(eis);
		}

		if (eis.peekSegment("DTP", 1, "455")) {
			Dtp10 = new SegmentDTP_1();
			Dtp10.setOrdinal(368);
			Dtp10.parse(eis);
		}

		if (eis.peekSegment("DTP", 1, "453")) {
			Dtp11 = new SegmentDTP_1();
			Dtp11.setOrdinal(369);
			Dtp11.parse(eis);
		}

		if (eis.peekSegment("DTP", 1, "454")) {
			Dtp12 = new SegmentDTP_1();
			Dtp12.setOrdinal(370);
			Dtp12.parse(eis);
		}

		if (eis.peekSegment("DTP", 1, "438")) {
			Dtp13 = new SegmentDTP_1();
			Dtp13.setOrdinal(371);
			Dtp13.parse(eis);
		}
		if (eis.peekSegment("DTP")) {
			eis.addError("Segment DTP could not be parsed.");
			eis.eatSegments("DTP");
		}

		while (eis.peekSegment("QTY")) {
			if (Qty == null) Qty = new ArrayList();
			SegmentQTY_1 tmp = new SegmentQTY_1();
			tmp.setOrdinal(372);
			tmp.parse(eis);
			Qty.add(tmp);
			if (Qty.size() > 5) {
				eis.addError("Segment QTY has too many instances.  It can only repeat 5 times");
				eis.eatSegments("QTY");
				break;
			}
		}

		while (eis.peekSegment("MEA")) {
			if (Mea == null) Mea = new ArrayList();
			SegmentMEA_2 tmp = new SegmentMEA_2();
			tmp.setOrdinal(373);
			tmp.parse(eis);
			Mea.add(tmp);
			if (Mea.size() > 20) {
				eis.addError("Segment MEA has too many instances.  It can only repeat 20 times");
				eis.eatSegments("MEA");
				break;
			}
		}

		if (eis.peekSegment("CN1")) {
			Cn1 = new SegmentCN1_1();
			Cn1.setOrdinal(374);
			Cn1.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "9B")) {
			Ref01 = new SegmentREF_1();
			Ref01.setOrdinal(375);
			Ref01.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "9D")) {
			Ref02 = new SegmentREF_1();
			Ref02.setOrdinal(376);
			Ref02.parse(eis);
		}

		while (eis.peekSegment("REF", 1, new String[] { "9F", "G1" })) {
			if (Ref03 == null) Ref03 = new ArrayList();
			SegmentREF_1 tmp = new SegmentREF_1();
			tmp.setOrdinal(377);
			tmp.parse(eis);
			Ref03.add(tmp);
			if (Ref03.size() > 2) {
				eis.addError("Segment REF has too many instances.  It can only repeat 2 times");
				eis.eatSegments("REF");
				break;
			}
		}

		if (eis.peekSegment("REF", 1, "6R")) {
			Ref04 = new SegmentREF_1();
			Ref04.setOrdinal(378);
			Ref04.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "EW")) {
			Ref05 = new SegmentREF_1();
			Ref05.setOrdinal(379);
			Ref05.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "X4")) {
			Ref06 = new SegmentREF_1();
			Ref06.setOrdinal(380);
			Ref06.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "F4")) {
			Ref07 = new SegmentREF_1();
			Ref07.setOrdinal(381);
			Ref07.parse(eis);
		}

		if (eis.peekSegment("REF", 1, "BT")) {
			Ref08 = new SegmentREF_1();
			Ref08.setOrdinal(382);
			Ref08.parse(eis);
		}

		while (eis.peekSegment("REF", 1, "1S")) {
			if (Ref09 == null) Ref09 = new ArrayList();
			SegmentREF_1 tmp = new SegmentREF_1();
			tmp.setOrdinal(383);
			tmp.parse(eis);
			Ref09.add(tmp);
			if (Ref09.size() > 4) {
				eis.addError("Segment REF has too many instances.  It can only repeat 4 times");
				eis.eatSegments("REF");
				break;
			}
		}

		if (eis.peekSegment("REF", 1, "TP")) {
			Ref10 = new SegmentREF_1();
			Ref10.setOrdinal(384);
			Ref10.parse(eis);
		}

		if (eis.peekSegment("REF", 1, new String[] { "OZ", "VP" })) {
			Ref11 = new SegmentREF_1();
			Ref11.setOrdinal(385);
			Ref11.parse(eis);
		}
		if (eis.peekSegment("REF")) {
			eis.addError("Segment REF could not be parsed.");
			eis.eatSegments("REF");
		}

		if (eis.peekSegment("AMT", 1, "T")) {
			Amt01 = new SegmentAMT_1();
			Amt01.setOrdinal(386);
			Amt01.parse(eis);
		}

		if (eis.peekSegment("AMT", 1, "AAE")) {
			Amt02 = new SegmentAMT_1();
			Amt02.setOrdinal(387);
			Amt02.parse(eis);
		}

		if (eis.peekSegment("AMT", 1, "F4")) {
			Amt03 = new SegmentAMT_1();
			Amt03.setOrdinal(388);
			Amt03.parse(eis);
		}
		if (eis.peekSegment("AMT")) {
			eis.addError("Segment AMT could not be parsed.");
			eis.eatSegments("AMT");
		}

		while (eis.peekSegment("K3")) {
			if (K3 == null) K3 = new ArrayList();
			SegmentK3_1 tmp = new SegmentK3_1();
			tmp.setOrdinal(389);
			tmp.parse(eis);
			K3.add(tmp);
			if (K3.size() > 10) {
				eis.addError("Segment K3 has too many instances.  It can only repeat 10 times");
				eis.eatSegments("K3");
				break;
			}
		}

		if (eis.peekSegment("NTE")) {
			Nte = new SegmentNTE_1();
			Nte.setOrdinal(390);
			Nte.parse(eis);
		}

		if (eis.peekSegment("PS1")) {
			Ps1 = new SegmentPS1_1();
			Ps1.setOrdinal(391);
			Ps1.parse(eis);
		}

		if (eis.peekSegment("HSD")) {
			Hsd = new SegmentHSD_1();
			Hsd.setOrdinal(392);
			Hsd.parse(eis);
		}

		if (eis.peekSegment("HCP")) {
			Hcp = new SegmentHCP_2();
			Hcp.setOrdinal(393);
			Hcp.parse(eis);
		}

		while (true) {
			if (eis.peekSegment("LIN")) {
				if (loop2410 == null) loop2410 = new ArrayList();
				Loop2410 tmp = new Loop2410();
				tmp.parse(eis);
				loop2410.add(tmp);
			}
			else if (eis.peekSegment("NM1", 1, Loop2420A.TRIGGER_VALUES)) {
				if (loop2420A != null) {
					eis.addError("Only one instance of Loop 2420A is allowed.");
				} else {
					loop2420A = new Loop2420A();
					loop2420A.parse(eis);
				}
			}
			else if (eis.peekSegment("NM1", 1, Loop2420B.TRIGGER_VALUES)) {
				if (loop2420B != null) {
					eis.addError("Only one instance of Loop 2420B is allowed.");
				} else {
					loop2420B = new Loop2420B();
					loop2420B.parse(eis);
				}
			}
			else if (eis.peekSegment("NM1", 1, Loop2420C.TRIGGER_VALUES)) {
				if (loop2420C != null) {
					eis.addError("Only one instance of Loop 2420C is allowed.");
				} else {
					loop2420C = new Loop2420C();
					loop2420C.parse(eis);
				}
			}
			else if (eis.peekSegment("NM1", 1, Loop2420D.TRIGGER_VALUES)) {
				if (loop2420D != null) {
					eis.addError("Only one instance of Loop 2420D is allowed.");
				} else {
					loop2420D = new Loop2420D();
					loop2420D.parse(eis);
				}
			}
			else if (eis.peekSegment("NM1", 1, Loop2420E.TRIGGER_VALUES)) {
				if (loop2420E != null) {
					eis.addError("Only one instance of Loop 2420E is allowed.");
				} else {
					loop2420E = new Loop2420E();
					loop2420E.parse(eis);
				}
			}
			else if (eis.peekSegment("NM1", 1, Loop2420F.TRIGGER_VALUES)) {
				if (loop2420F == null) loop2420F = new ArrayList();
				Loop2420F tmp = new Loop2420F();
				tmp.parse(eis);
				loop2420F.add(tmp);
			}
			else if (eis.peekSegment("NM1", 1, Loop2420G.TRIGGER_VALUES)) {
				if (loop2420G == null) loop2420G = new ArrayList();
				Loop2420G tmp = new Loop2420G();
				tmp.parse(eis);
				loop2420G.add(tmp);
			}
			else if (eis.peekSegment("SVD")) {
				if (loop2430 == null) loop2430 = new ArrayList();
				Loop2430 tmp = new Loop2430();
				tmp.parse(eis);
				loop2430.add(tmp);
			}
			else if (eis.peekSegment("LQ")) {
				if (loop2440 == null) loop2440 = new ArrayList();
				Loop2440 tmp = new Loop2440();
				tmp.parse(eis);
				loop2440.add(tmp);
			}
			else {
				break;
			}
		}

		if (loop2410 != null && loop2410.size() > 25) {
			eis.addError("Loop 2410 has too many instances.  It can repeat only 25 times");
		}
		if (loop2420F != null && loop2420F.size() > 2) {
			eis.addError("Loop 2420F has too many instances.  It can repeat only 2 times");
		}
		if (loop2420G != null && loop2420G.size() > 4) {
			eis.addError("Loop 2420G has too many instances.  It can repeat only 4 times");
		}
		if (loop2430 != null && loop2430.size() > 25) {
			eis.addError("Loop 2430 has too many instances.  It can repeat only 25 times");
		}
		if (loop2440 != null && loop2440.size() > 5) {
			eis.addError("Loop 2440 has too many instances.  It can repeat only 5 times");
		}
		endLineNumber = eis.getCurrentSegmentNumber();
		validate(eis);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		if (Lx != null) {
			Lx.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'LX'");
		}

		if (Sv1 != null) {
			Sv1.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'SV1'");
		}

		if (Sv4 != null) {
			Sv4.emit(eos);
		}

		if (Sv5 != null) {
			Sv5.emit(eos);
		}

		if (Pwk != null) {
			Pwk.emit(eos);
		}

		if (Cr1 != null) {
			Cr1.emit(eos);
		}

		if (Cr2 != null) {
			int idx = 0, size = Cr2.size();
			while (idx < size) {
				getCr2(idx++).emit(eos);
			}
		}

		if (Cr3 != null) {
			Cr3.emit(eos);
		}

		if (Cr5 != null) {
			Cr5.emit(eos);
		}

		if (Crc01 != null) {
			int idx = 0, size = Crc01.size();
			while (idx < size) {
				getCrc01(idx++).emit(eos);
			}
		}

		if (Crc02 != null) {
			Crc02.emit(eos);
		}

		if (Crc03 != null) {
			int idx = 0, size = Crc03.size();
			while (idx < size) {
				getCrc03(idx++).emit(eos);
			}
		}

		if (Dtp01 != null) {
			Dtp01.emit(eos);
		} else {
			eos.addError("Missing mandatory segment 'DTP01'");
		}

		if (Dtp02 != null) {
			Dtp02.emit(eos);
		}

		if (Dtp03 != null) {
			Dtp03.emit(eos);
		}

		if (Dtp04 != null) {
			Dtp04.emit(eos);
		}

		if (Dtp05 != null) {
			Dtp05.emit(eos);
		}

		if (Dtp06 != null) {
			int idx = 0, size = Dtp06.size();
			while (idx < size) {
				getDtp06(idx++).emit(eos);
			}
		}

		if (Dtp07 != null) {
			int idx = 0, size = Dtp07.size();
			while (idx < size) {
				getDtp07(idx++).emit(eos);
			}
		}

		if (Dtp08 != null) {
			Dtp08.emit(eos);
		}

		if (Dtp09 != null) {
			Dtp09.emit(eos);
		}

		if (Dtp10 != null) {
			Dtp10.emit(eos);
		}

		if (Dtp11 != null) {
			Dtp11.emit(eos);
		}

		if (Dtp12 != null) {
			Dtp12.emit(eos);
		}

		if (Dtp13 != null) {
			Dtp13.emit(eos);
		}

		if (Qty != null) {
			int idx = 0, size = Qty.size();
			while (idx < size) {
				getQty(idx++).emit(eos);
			}
		}

		if (Mea != null) {
			int idx = 0, size = Mea.size();
			while (idx < size) {
				getMea(idx++).emit(eos);
			}
		}

		if (Cn1 != null) {
			Cn1.emit(eos);
		}

		if (Ref01 != null) {
			Ref01.emit(eos);
		}

		if (Ref02 != null) {
			Ref02.emit(eos);
		}

		if (Ref03 != null) {
			int idx = 0, size = Ref03.size();
			while (idx < size) {
				getRef03(idx++).emit(eos);
			}
		}

		if (Ref04 != null) {
			Ref04.emit(eos);
		}

		if (Ref05 != null) {
			Ref05.emit(eos);
		}

		if (Ref06 != null) {
			Ref06.emit(eos);
		}

		if (Ref07 != null) {
			Ref07.emit(eos);
		}

		if (Ref08 != null) {
			Ref08.emit(eos);
		}

		if (Ref09 != null) {
			int idx = 0, size = Ref09.size();
			while (idx < size) {
				getRef09(idx++).emit(eos);
			}
		}

		if (Ref10 != null) {
			Ref10.emit(eos);
		}

		if (Ref11 != null) {
			Ref11.emit(eos);
		}

		if (Amt01 != null) {
			Amt01.emit(eos);
		}

		if (Amt02 != null) {
			Amt02.emit(eos);
		}

		if (Amt03 != null) {
			Amt03.emit(eos);
		}

		if (K3 != null) {
			int idx = 0, size = K3.size();
			while (idx < size) {
				getK3(idx++).emit(eos);
			}
		}

		if (Nte != null) {
			Nte.emit(eos);
		}

		if (Ps1 != null) {
			Ps1.emit(eos);
		}

		if (Hsd != null) {
			Hsd.emit(eos);
		}

		if (Hcp != null) {
			Hcp.emit(eos);
		}

		if (loop2410 != null) {
			int idx = 0, size = loop2410.size();
			while (idx < size) {
				getLoop2410(idx++).emit(eos);
			}
		}

		if (loop2420A != null) {
			loop2420A.emit(eos);
		}

		if (loop2420B != null) {
			loop2420B.emit(eos);
		}

		if (loop2420C != null) {
			loop2420C.emit(eos);
		}

		if (loop2420D != null) {
			loop2420D.emit(eos);
		}

		if (loop2420E != null) {
			loop2420E.emit(eos);
		}

		if (loop2420F != null) {
			int idx = 0, size = loop2420F.size();
			while (idx < size) {
				getLoop2420F(idx++).emit(eos);
			}
		}

		if (loop2420G != null) {
			int idx = 0, size = loop2420G.size();
			while (idx < size) {
				getLoop2420G(idx++).emit(eos);
			}
		}

		if (loop2430 != null) {
			int idx = 0, size = loop2430.size();
			while (idx < size) {
				getLoop2430(idx++).emit(eos);
			}
		}

		if (loop2440 != null) {
			int idx = 0, size = loop2440.size();
			while (idx < size) {
				getLoop2440(idx++).emit(eos);
			}
		}

	}

	public EDIElement createCopy() {
		Loop2400 thisCopy = new Loop2400();
		thisCopy.setStartLineNumber(this.startLineNumber);
		thisCopy.setEndLineNumber(this.endLineNumber);

		if (Lx != null) {
			thisCopy.setLx((SegmentLX_1)Lx.createCopy());
		}

		if (Sv1 != null) {
			thisCopy.setSv1((SegmentSV1_1)Sv1.createCopy());
		}

		if (Sv4 != null) {
			thisCopy.setSv4((SegmentSV4_1)Sv4.createCopy());
		}

		if (Sv5 != null) {
			thisCopy.setSv5((SegmentSV5_2)Sv5.createCopy());
		}

		if (Pwk != null) {
			thisCopy.setPwk((SegmentPWK_2)Pwk.createCopy());
		}

		if (Cr1 != null) {
			thisCopy.setCr1((SegmentCR1_1)Cr1.createCopy());
		}

		if (Cr2 != null) {
			thisCopy.setCr2(new ArrayList());
			int idx = 0, size = Cr2.size();
			while (idx < size) {
				thisCopy.getCr2().add(getCr2(idx++).createCopy());
			}
		}

		if (Cr3 != null) {
			thisCopy.setCr3((SegmentCR3_1)Cr3.createCopy());
		}

		if (Cr5 != null) {
			thisCopy.setCr5((SegmentCR5_1)Cr5.createCopy());
		}

		if (Crc01 != null) {
			thisCopy.setCrc01(new ArrayList());
			int idx = 0, size = Crc01.size();
			while (idx < size) {
				thisCopy.getCrc01().add(getCrc01(idx++).createCopy());
			}
		}

		if (Crc02 != null) {
			thisCopy.setCrc02((SegmentCRC_2)Crc02.createCopy());
		}

		if (Crc03 != null) {
			thisCopy.setCrc03(new ArrayList());
			int idx = 0, size = Crc03.size();
			while (idx < size) {
				thisCopy.getCrc03().add(getCrc03(idx++).createCopy());
			}
		}

		if (Dtp01 != null) {
			thisCopy.setDtp01((SegmentDTP_1)Dtp01.createCopy());
		}

		if (Dtp02 != null) {
			thisCopy.setDtp02((SegmentDTP_1)Dtp02.createCopy());
		}

		if (Dtp03 != null) {
			thisCopy.setDtp03((SegmentDTP_1)Dtp03.createCopy());
		}

		if (Dtp04 != null) {
			thisCopy.setDtp04((SegmentDTP_1)Dtp04.createCopy());
		}

		if (Dtp05 != null) {
			thisCopy.setDtp05((SegmentDTP_1)Dtp05.createCopy());
		}

		if (Dtp06 != null) {
			thisCopy.setDtp06(new ArrayList());
			int idx = 0, size = Dtp06.size();
			while (idx < size) {
				thisCopy.getDtp06().add(getDtp06(idx++).createCopy());
			}
		}

		if (Dtp07 != null) {
			thisCopy.setDtp07(new ArrayList());
			int idx = 0, size = Dtp07.size();
			while (idx < size) {
				thisCopy.getDtp07().add(getDtp07(idx++).createCopy());
			}
		}

		if (Dtp08 != null) {
			thisCopy.setDtp08((SegmentDTP_1)Dtp08.createCopy());
		}

		if (Dtp09 != null) {
			thisCopy.setDtp09((SegmentDTP_1)Dtp09.createCopy());
		}

		if (Dtp10 != null) {
			thisCopy.setDtp10((SegmentDTP_1)Dtp10.createCopy());
		}

		if (Dtp11 != null) {
			thisCopy.setDtp11((SegmentDTP_1)Dtp11.createCopy());
		}

		if (Dtp12 != null) {
			thisCopy.setDtp12((SegmentDTP_1)Dtp12.createCopy());
		}

		if (Dtp13 != null) {
			thisCopy.setDtp13((SegmentDTP_1)Dtp13.createCopy());
		}

		if (Qty != null) {
			thisCopy.setQty(new ArrayList());
			int idx = 0, size = Qty.size();
			while (idx < size) {
				thisCopy.getQty().add(getQty(idx++).createCopy());
			}
		}

		if (Mea != null) {
			thisCopy.setMea(new ArrayList());
			int idx = 0, size = Mea.size();
			while (idx < size) {
				thisCopy.getMea().add(getMea(idx++).createCopy());
			}
		}

		if (Cn1 != null) {
			thisCopy.setCn1((SegmentCN1_1)Cn1.createCopy());
		}

		if (Ref01 != null) {
			thisCopy.setRef01((SegmentREF_1)Ref01.createCopy());
		}

		if (Ref02 != null) {
			thisCopy.setRef02((SegmentREF_1)Ref02.createCopy());
		}

		if (Ref03 != null) {
			thisCopy.setRef03(new ArrayList());
			int idx = 0, size = Ref03.size();
			while (idx < size) {
				thisCopy.getRef03().add(getRef03(idx++).createCopy());
			}
		}

		if (Ref04 != null) {
			thisCopy.setRef04((SegmentREF_1)Ref04.createCopy());
		}

		if (Ref05 != null) {
			thisCopy.setRef05((SegmentREF_1)Ref05.createCopy());
		}

		if (Ref06 != null) {
			thisCopy.setRef06((SegmentREF_1)Ref06.createCopy());
		}

		if (Ref07 != null) {
			thisCopy.setRef07((SegmentREF_1)Ref07.createCopy());
		}

		if (Ref08 != null) {
			thisCopy.setRef08((SegmentREF_1)Ref08.createCopy());
		}

		if (Ref09 != null) {
			thisCopy.setRef09(new ArrayList());
			int idx = 0, size = Ref09.size();
			while (idx < size) {
				thisCopy.getRef09().add(getRef09(idx++).createCopy());
			}
		}

		if (Ref10 != null) {
			thisCopy.setRef10((SegmentREF_1)Ref10.createCopy());
		}

		if (Ref11 != null) {
			thisCopy.setRef11((SegmentREF_1)Ref11.createCopy());
		}

		if (Amt01 != null) {
			thisCopy.setAmt01((SegmentAMT_1)Amt01.createCopy());
		}

		if (Amt02 != null) {
			thisCopy.setAmt02((SegmentAMT_1)Amt02.createCopy());
		}

		if (Amt03 != null) {
			thisCopy.setAmt03((SegmentAMT_1)Amt03.createCopy());
		}

		if (K3 != null) {
			thisCopy.setK3(new ArrayList());
			int idx = 0, size = K3.size();
			while (idx < size) {
				thisCopy.getK3().add(getK3(idx++).createCopy());
			}
		}

		if (Nte != null) {
			thisCopy.setNte((SegmentNTE_1)Nte.createCopy());
		}

		if (Ps1 != null) {
			thisCopy.setPs1((SegmentPS1_1)Ps1.createCopy());
		}

		if (Hsd != null) {
			thisCopy.setHsd((SegmentHSD_1)Hsd.createCopy());
		}

		if (Hcp != null) {
			thisCopy.setHcp((SegmentHCP_2)Hcp.createCopy());
		}

		if (loop2410 != null) {
			thisCopy.setLoop2410(new ArrayList());
			int idx = 0, size = loop2410.size();
			while (idx < size) {
				thisCopy.getLoop2410().add(getLoop2410(idx++).createCopy());
			}
		}

		if (loop2420A != null) {
			thisCopy.setLoop2420A((Loop2420A)loop2420A.createCopy());
		}

		if (loop2420B != null) {
			thisCopy.setLoop2420B((Loop2420B)loop2420B.createCopy());
		}

		if (loop2420C != null) {
			thisCopy.setLoop2420C((Loop2420C)loop2420C.createCopy());
		}

		if (loop2420D != null) {
			thisCopy.setLoop2420D((Loop2420D)loop2420D.createCopy());
		}

		if (loop2420E != null) {
			thisCopy.setLoop2420E((Loop2420E)loop2420E.createCopy());
		}

		if (loop2420F != null) {
			thisCopy.setLoop2420F(new ArrayList());
			int idx = 0, size = loop2420F.size();
			while (idx < size) {
				thisCopy.getLoop2420F().add(getLoop2420F(idx++).createCopy());
			}
		}

		if (loop2420G != null) {
			thisCopy.setLoop2420G(new ArrayList());
			int idx = 0, size = loop2420G.size();
			while (idx < size) {
				thisCopy.getLoop2420G().add(getLoop2420G(idx++).createCopy());
			}
		}

		if (loop2430 != null) {
			thisCopy.setLoop2430(new ArrayList());
			int idx = 0, size = loop2430.size();
			while (idx < size) {
				thisCopy.getLoop2430().add(getLoop2430(idx++).createCopy());
			}
		}

		if (loop2440 != null) {
			thisCopy.setLoop2440(new ArrayList());
			int idx = 0, size = loop2440.size();
			while (idx < size) {
				thisCopy.getLoop2440().add(getLoop2440(idx++).createCopy());
			}
		}

		return thisCopy;
	}

}
