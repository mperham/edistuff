package com.webify.shared.edi.model.hipaa837p.beans;

import com.webify.shared.edi.model.*;
import java.io.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class SegmentCR1_1 implements EDIElement {
	private static final Log log = LogFactory.getLog(SegmentCR1_1.class);

	public static final String SEGMENT_NAME = "CR1";
	public static final int FIELD_COUNT = 10;

	private int lineNumber = 0;
	public int getLineNumber() { return lineNumber; }
	/** Do NOT use this method - it is not public by choice... */
	public void setLineNumber(int foo) { lineNumber = foo; }

	private int ordinal = 0;
	public int getOrdinal() { return ordinal; }
	void setOrdinal(int ord) { ordinal = ord; }

	// Fields
	private String Cr101;
	public String getCr101() { return Cr101; }
	public void setCr101(String val) {
		if (Field355.validateValue(val)) {
			Cr101 = val;
		} else {
			throw new IllegalArgumentException("Field 'CR101' cannot have value: " + val);
		}
	}

	private java.math.BigDecimal Cr102;
	public java.math.BigDecimal getCr102() { return Cr102; }
	public void setCr102(java.math.BigDecimal val) { Cr102 = val; }

	private String Cr103;
	public String getCr103() { return Cr103; }
	public void setCr103(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'CR103' may not be null");
		}
		if (Field1316.validateValue(val)) {
			Cr103 = val;
		} else {
			throw new IllegalArgumentException("Field 'CR103' cannot have value: " + val);
		}
	}

	private String Cr104;
	public String getCr104() { return Cr104; }
	public void setCr104(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'CR104' may not be null");
		}
		if (Field1317.validateValue(val)) {
			Cr104 = val;
		} else {
			throw new IllegalArgumentException("Field 'CR104' cannot have value: " + val);
		}
	}

	private String Cr105;
	public String getCr105() { return Cr105; }
	public void setCr105(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'CR105' may not be null");
		}
		if (Field355.validateValue(val)) {
			Cr105 = val;
		} else {
			throw new IllegalArgumentException("Field 'CR105' cannot have value: " + val);
		}
	}

	private java.math.BigDecimal Cr106;
	public java.math.BigDecimal getCr106() { return Cr106; }
	public void setCr106(java.math.BigDecimal val) { Cr106 = val; }

	private String Cr109;
	public String getCr109() { return Cr109; }
	public void setCr109(String val) { Cr109 = val; }

	private String Cr110;
	public String getCr110() { return Cr110; }
	public void setCr110(String val) { Cr110 = val; }


	public void parse(EDIInputStream eis) throws IOException {
		lineNumber = eis.getCurrentSegmentNumber();
		if (log.isDebugEnabled()) log.debug("Starting segment CR1 on line " + lineNumber);
		String[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);
		Cr101 = eis.getStringValue(fields, 1, 2, 2, false);
		Field355.validateInputValue(eis, "CR101", Cr101, ordinal, 1);
		Cr102 = eis.getDecimalValue(fields, 2, false);
		Cr103 = eis.getStringValue(fields, 3, 1, 1, true);
		Field1316.validateInputValue(eis, "CR103", Cr103, ordinal, 3);
		if (Cr103 == null || "".equals(fields[3].trim())) {
			eis.addError("Field 'CR103' missing");
		}
		Cr104 = eis.getStringValue(fields, 4, 1, 1, true);
		Field1317.validateInputValue(eis, "CR104", Cr104, ordinal, 4);
		if (Cr104 == null || "".equals(fields[4].trim())) {
			eis.addError("Field 'CR104' missing");
		}
		Cr105 = eis.getStringValue(fields, 5, 2, 2, true);
		Field355.validateInputValue(eis, "CR105", Cr105, ordinal, 5);
		if (Cr105 == null || "".equals(fields[5].trim())) {
			eis.addError("Field 'CR105' missing");
		}
		Cr106 = eis.getDecimalValue(fields, 6, true);
		if (Cr106 == null || "".equals(fields[6].trim())) {
			eis.addError("Field 'CR106' missing");
		}
		Cr109 = eis.getStringValue(fields, 9, 1, 80, false);
		Cr110 = eis.getStringValue(fields, 10, 1, 80, false);
		validate(eis);
	}

	protected void validate(EDIInputStream eis) {
		// PAIRED
		{
			int setCount = 0;
			if (Cr101 != null) setCount++;
			if (Cr102 != null) setCount++;
			if (setCount > 0 && setCount < 2) {
				eis.addError("If any of the following properties are set, all must be set: Cr101, Cr102");
			}
		}

		// PAIRED
		{
			int setCount = 0;
			if (Cr105 != null) setCount++;
			if (Cr106 != null) setCount++;
			if (setCount > 0 && setCount < 2) {
				eis.addError("If any of the following properties are set, all must be set: Cr105, Cr106");
			}
		}

	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startSegment("CR1");
		eos.writeField(Cr101);
		eos.writeField(Cr102);
		if (Cr103 == null) {
			eos.addError("Emitting null mandatory field 'CR103'");
		}

		eos.writeField(Cr103);
		if (Cr104 == null) {
			eos.addError("Emitting null mandatory field 'CR104'");
		}

		eos.writeField(Cr104);
		if (Cr105 == null) {
			eos.addError("Emitting null mandatory field 'CR105'");
		}

		eos.writeField(Cr105);
		if (Cr106 == null) {
			eos.addError("Emitting null mandatory field 'CR106'");
		}

		eos.writeField(Cr106);
		eos.writeNullField();
		eos.writeNullField();
		eos.writeField(Cr109);
		eos.writeField(Cr110);
		eos.endSegment();
	}

	public EDIElement createCopy() {
		SegmentCR1_1 copy = new SegmentCR1_1();
		copy.setLineNumber(this.lineNumber);
		copy.Cr101 = this.Cr101;
		copy.Cr102 = this.Cr102;
		copy.Cr103 = this.Cr103;
		copy.Cr104 = this.Cr104;
		copy.Cr105 = this.Cr105;
		copy.Cr106 = this.Cr106;
		copy.Cr109 = this.Cr109;
		copy.Cr110 = this.Cr110;
		return copy;
	}
}
