package com.webify.shared.edi.model.hipaa837p.beans;

import com.webify.shared.edi.model.*;
import java.io.IOException;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class CompositeC001 implements EDICompositeField {

	public static final String COMPOSITE_NAME = "C001";
	public static final int ELEMENT_COUNT = 15;

	private String ordinal = null;
	void setOrdinal(String ord) { ordinal = ord; }

	// Elements
	private String C001_01;
	public String getC001_01() { return C001_01; }
	public void setC001_01(String val) {
		if (Field355.validateValue(val)) {
			C001_01 = val;
		} else {
			throw new IllegalArgumentException("Field 'C001_01' cannot have value: " + val);
		}
	}

	private java.math.BigDecimal C001_02;
	public java.math.BigDecimal getC001_02() { return C001_02; }
	public void setC001_02(java.math.BigDecimal val) { C001_02 = val; }

	private java.math.BigDecimal C001_03;
	public java.math.BigDecimal getC001_03() { return C001_03; }
	public void setC001_03(java.math.BigDecimal val) { C001_03 = val; }

	private String C001_04;
	public String getC001_04() { return C001_04; }
	public void setC001_04(String val) {
		if (Field355.validateValue(val)) {
			C001_04 = val;
		} else {
			throw new IllegalArgumentException("Field 'C001_04' cannot have value: " + val);
		}
	}

	private java.math.BigDecimal C001_05;
	public java.math.BigDecimal getC001_05() { return C001_05; }
	public void setC001_05(java.math.BigDecimal val) { C001_05 = val; }

	private java.math.BigDecimal C001_06;
	public java.math.BigDecimal getC001_06() { return C001_06; }
	public void setC001_06(java.math.BigDecimal val) { C001_06 = val; }

	private String C001_07;
	public String getC001_07() { return C001_07; }
	public void setC001_07(String val) {
		if (Field355.validateValue(val)) {
			C001_07 = val;
		} else {
			throw new IllegalArgumentException("Field 'C001_07' cannot have value: " + val);
		}
	}

	private java.math.BigDecimal C001_08;
	public java.math.BigDecimal getC001_08() { return C001_08; }
	public void setC001_08(java.math.BigDecimal val) { C001_08 = val; }

	private java.math.BigDecimal C001_09;
	public java.math.BigDecimal getC001_09() { return C001_09; }
	public void setC001_09(java.math.BigDecimal val) { C001_09 = val; }

	private String C001_10;
	public String getC001_10() { return C001_10; }
	public void setC001_10(String val) {
		if (Field355.validateValue(val)) {
			C001_10 = val;
		} else {
			throw new IllegalArgumentException("Field 'C001_10' cannot have value: " + val);
		}
	}

	private java.math.BigDecimal C001_11;
	public java.math.BigDecimal getC001_11() { return C001_11; }
	public void setC001_11(java.math.BigDecimal val) { C001_11 = val; }

	private java.math.BigDecimal C001_12;
	public java.math.BigDecimal getC001_12() { return C001_12; }
	public void setC001_12(java.math.BigDecimal val) { C001_12 = val; }

	private String C001_13;
	public String getC001_13() { return C001_13; }
	public void setC001_13(String val) {
		if (Field355.validateValue(val)) {
			C001_13 = val;
		} else {
			throw new IllegalArgumentException("Field 'C001_13' cannot have value: " + val);
		}
	}

	private java.math.BigDecimal C001_14;
	public java.math.BigDecimal getC001_14() { return C001_14; }
	public void setC001_14(java.math.BigDecimal val) { C001_14 = val; }

	private java.math.BigDecimal C001_15;
	public java.math.BigDecimal getC001_15() { return C001_15; }
	public void setC001_15(java.math.BigDecimal val) { C001_15 = val; }

	public String[] getElements() {
		String[] values = new String[ELEMENT_COUNT];
		values[0] = EDIUtils.stringValue(C001_01);
		values[1] = EDIUtils.stringValue(C001_02);
		values[2] = EDIUtils.stringValue(C001_03);
		values[3] = EDIUtils.stringValue(C001_04);
		values[4] = EDIUtils.stringValue(C001_05);
		values[5] = EDIUtils.stringValue(C001_06);
		values[6] = EDIUtils.stringValue(C001_07);
		values[7] = EDIUtils.stringValue(C001_08);
		values[8] = EDIUtils.stringValue(C001_09);
		values[9] = EDIUtils.stringValue(C001_10);
		values[10] = EDIUtils.stringValue(C001_11);
		values[11] = EDIUtils.stringValue(C001_12);
		values[12] = EDIUtils.stringValue(C001_13);
		values[13] = EDIUtils.stringValue(C001_14);
		values[14] = EDIUtils.stringValue(C001_15);
		return values;
	}

	public void setElements(String[] values) throws EDIParseException {
		if (values == null || values.length != ELEMENT_COUNT) {
			throw new EDIParseException("values array must be non-null and contain " + ELEMENT_COUNT + " elements");
		}
		C001_01 = EDIUtils.getStringValue(values, 0, 2, 2, false);
		String overrideKey0 = ordinal + "-" + 1;
		Object[] lvalues0 = (Object[]) Field355.getLegalValues(overrideKey0);
		if (!EDIUtils.validateValue(C001_01, lvalues0)) {
			throw new EDIParseException("Illegal value '" + C001_01 + "' for field C001_01");
		}
		C001_02 = EDIUtils.getDecimalValue(values, 1, false);
		C001_03 = EDIUtils.getDecimalValue(values, 2, false);
		C001_04 = EDIUtils.getStringValue(values, 3, 2, 2, false);
		String overrideKey3 = ordinal + "-" + 4;
		Object[] lvalues3 = (Object[]) Field355.getLegalValues(overrideKey3);
		if (!EDIUtils.validateValue(C001_04, lvalues3)) {
			throw new EDIParseException("Illegal value '" + C001_04 + "' for field C001_04");
		}
		C001_05 = EDIUtils.getDecimalValue(values, 4, false);
		C001_06 = EDIUtils.getDecimalValue(values, 5, false);
		C001_07 = EDIUtils.getStringValue(values, 6, 2, 2, false);
		String overrideKey6 = ordinal + "-" + 7;
		Object[] lvalues6 = (Object[]) Field355.getLegalValues(overrideKey6);
		if (!EDIUtils.validateValue(C001_07, lvalues6)) {
			throw new EDIParseException("Illegal value '" + C001_07 + "' for field C001_07");
		}
		C001_08 = EDIUtils.getDecimalValue(values, 7, false);
		C001_09 = EDIUtils.getDecimalValue(values, 8, false);
		C001_10 = EDIUtils.getStringValue(values, 9, 2, 2, false);
		String overrideKey9 = ordinal + "-" + 10;
		Object[] lvalues9 = (Object[]) Field355.getLegalValues(overrideKey9);
		if (!EDIUtils.validateValue(C001_10, lvalues9)) {
			throw new EDIParseException("Illegal value '" + C001_10 + "' for field C001_10");
		}
		C001_11 = EDIUtils.getDecimalValue(values, 10, false);
		C001_12 = EDIUtils.getDecimalValue(values, 11, false);
		C001_13 = EDIUtils.getStringValue(values, 12, 2, 2, false);
		String overrideKey12 = ordinal + "-" + 13;
		Object[] lvalues12 = (Object[]) Field355.getLegalValues(overrideKey12);
		if (!EDIUtils.validateValue(C001_13, lvalues12)) {
			throw new EDIParseException("Illegal value '" + C001_13 + "' for field C001_13");
		}
		C001_14 = EDIUtils.getDecimalValue(values, 13, false);
		C001_15 = EDIUtils.getDecimalValue(values, 14, false);
	}

	public void parse(EDIInputStream eis, String fieldValue) throws IOException {
		String[] elements = eis.getCompositeValue(fieldValue, ELEMENT_COUNT);
		C001_01 = eis.getStringValue(elements, 0, 2, 2, false);
		Field355.validateInputValue(eis, "C001_01", C001_01, ordinal, 1);
		C001_02 = eis.getDecimalValue(elements, 1, false);
		C001_03 = eis.getDecimalValue(elements, 2, false);
		C001_04 = eis.getStringValue(elements, 3, 2, 2, false);
		Field355.validateInputValue(eis, "C001_04", C001_04, ordinal, 4);
		C001_05 = eis.getDecimalValue(elements, 4, false);
		C001_06 = eis.getDecimalValue(elements, 5, false);
		C001_07 = eis.getStringValue(elements, 6, 2, 2, false);
		Field355.validateInputValue(eis, "C001_07", C001_07, ordinal, 7);
		C001_08 = eis.getDecimalValue(elements, 7, false);
		C001_09 = eis.getDecimalValue(elements, 8, false);
		C001_10 = eis.getStringValue(elements, 9, 2, 2, false);
		Field355.validateInputValue(eis, "C001_10", C001_10, ordinal, 10);
		C001_11 = eis.getDecimalValue(elements, 10, false);
		C001_12 = eis.getDecimalValue(elements, 11, false);
		C001_13 = eis.getStringValue(elements, 12, 2, 2, false);
		Field355.validateInputValue(eis, "C001_13", C001_13, ordinal, 13);
		C001_14 = eis.getDecimalValue(elements, 13, false);
		C001_15 = eis.getDecimalValue(elements, 14, false);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startComposite();
		eos.writeElement(C001_01);
		eos.writeElement(C001_02);
		eos.writeElement(C001_03);
		eos.writeElement(C001_04);
		eos.writeElement(C001_05);
		eos.writeElement(C001_06);
		eos.writeElement(C001_07);
		eos.writeElement(C001_08);
		eos.writeElement(C001_09);
		eos.writeElement(C001_10);
		eos.writeElement(C001_11);
		eos.writeElement(C001_12);
		eos.writeElement(C001_13);
		eos.writeElement(C001_14);
		eos.writeElement(C001_15);
		eos.endComposite();
	}

	public EDIElement createCopy() {
		CompositeC001 copy = new CompositeC001();
		copy.C001_01 = this.C001_01;
		copy.C001_02 = this.C001_02;
		copy.C001_03 = this.C001_03;
		copy.C001_04 = this.C001_04;
		copy.C001_05 = this.C001_05;
		copy.C001_06 = this.C001_06;
		copy.C001_07 = this.C001_07;
		copy.C001_08 = this.C001_08;
		copy.C001_09 = this.C001_09;
		copy.C001_10 = this.C001_10;
		copy.C001_11 = this.C001_11;
		copy.C001_12 = this.C001_12;
		copy.C001_13 = this.C001_13;
		copy.C001_14 = this.C001_14;
		copy.C001_15 = this.C001_15;
		return copy;
	}
}
