package com.webify.shared.edi.model.hipaa837p.beans;

import com.webify.shared.edi.model.*;
import java.io.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
 * AUTOGENERATED FILE - DO NOT EDIT!!!
 */
public class SegmentCR5_1 implements EDIElement {
	private static final Log log = LogFactory.getLog(SegmentCR5_1.class);

	public static final String SEGMENT_NAME = "CR5";
	public static final int FIELD_COUNT = 15;

	private int lineNumber = 0;
	public int getLineNumber() { return lineNumber; }
	/** Do NOT use this method - it is not public by choice... */
	public void setLineNumber(int foo) { lineNumber = foo; }

	private int ordinal = 0;
	public int getOrdinal() { return ordinal; }
	void setOrdinal(int ord) { ordinal = ord; }

	// Fields
	private String Cr501;
	public String getCr501() { return Cr501; }
	public void setCr501(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'CR501' may not be null");
		}
		if (Field1322.validateValue(val)) {
			Cr501 = val;
		} else {
			throw new IllegalArgumentException("Field 'CR501' cannot have value: " + val);
		}
	}

	private java.math.BigDecimal Cr502;
	public java.math.BigDecimal getCr502() { return Cr502; }
	public void setCr502(java.math.BigDecimal val) { Cr502 = val; }

	private java.math.BigDecimal Cr510;
	public java.math.BigDecimal getCr510() { return Cr510; }
	public void setCr510(java.math.BigDecimal val) { Cr510 = val; }

	private java.math.BigDecimal Cr511;
	public java.math.BigDecimal getCr511() { return Cr511; }
	public void setCr511(java.math.BigDecimal val) { Cr511 = val; }

	private String Cr512;
	public String getCr512() { return Cr512; }
	public void setCr512(String val) {
		if (val == null) {
			throw new NullPointerException("Field 'CR512' may not be null");
		}
		if (Field1349.validateValue(val)) {
			Cr512 = val;
		} else {
			throw new IllegalArgumentException("Field 'CR512' cannot have value: " + val);
		}
	}

	private String Cr513;
	public String getCr513() { return Cr513; }
	public void setCr513(String val) {
		if (Field1350.validateValue(val)) {
			Cr513 = val;
		} else {
			throw new IllegalArgumentException("Field 'CR513' cannot have value: " + val);
		}
	}

	private String Cr514;
	public String getCr514() { return Cr514; }
	public void setCr514(String val) {
		if (Field1350.validateValue(val)) {
			Cr514 = val;
		} else {
			throw new IllegalArgumentException("Field 'CR514' cannot have value: " + val);
		}
	}

	private String Cr515;
	public String getCr515() { return Cr515; }
	public void setCr515(String val) {
		if (Field1350.validateValue(val)) {
			Cr515 = val;
		} else {
			throw new IllegalArgumentException("Field 'CR515' cannot have value: " + val);
		}
	}


	public void parse(EDIInputStream eis) throws IOException {
		lineNumber = eis.getCurrentSegmentNumber();
		if (log.isDebugEnabled()) log.debug("Starting segment CR5 on line " + lineNumber);
		String[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);
		Cr501 = eis.getStringValue(fields, 1, 1, 1, true);
		Field1322.validateInputValue(eis, "CR501", Cr501, ordinal, 1);
		if (Cr501 == null || "".equals(fields[1].trim())) {
			eis.addError("Field 'CR501' missing");
		}
		Cr502 = eis.getDecimalValue(fields, 2, true);
		if (Cr502 == null || "".equals(fields[2].trim())) {
			eis.addError("Field 'CR502' missing");
		}
		Cr510 = eis.getDecimalValue(fields, 10, false);
		Cr511 = eis.getDecimalValue(fields, 11, false);
		Cr512 = eis.getStringValue(fields, 12, 1, 1, true);
		Field1349.validateInputValue(eis, "CR512", Cr512, ordinal, 12);
		if (Cr512 == null || "".equals(fields[12].trim())) {
			eis.addError("Field 'CR512' missing");
		}
		Cr513 = eis.getStringValue(fields, 13, 1, 1, false);
		Field1350.validateInputValue(eis, "CR513", Cr513, ordinal, 13);
		Cr514 = eis.getStringValue(fields, 14, 1, 1, false);
		Field1350.validateInputValue(eis, "CR514", Cr514, ordinal, 14);
		Cr515 = eis.getStringValue(fields, 15, 1, 1, false);
		Field1350.validateInputValue(eis, "CR515", Cr515, ordinal, 15);
	}

	public void emit(EDIOutputStream eos) throws IOException {
		eos.startSegment("CR5");
		if (Cr501 == null) {
			eos.addError("Emitting null mandatory field 'CR501'");
		}

		eos.writeField(Cr501);
		if (Cr502 == null) {
			eos.addError("Emitting null mandatory field 'CR502'");
		}

		eos.writeField(Cr502);
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.writeField(Cr510);
		eos.writeField(Cr511);
		if (Cr512 == null) {
			eos.addError("Emitting null mandatory field 'CR512'");
		}

		eos.writeField(Cr512);
		eos.writeField(Cr513);
		eos.writeField(Cr514);
		eos.writeField(Cr515);
		eos.writeNullField();
		eos.writeNullField();
		eos.writeNullField();
		eos.endSegment();
	}

	public EDIElement createCopy() {
		SegmentCR5_1 copy = new SegmentCR5_1();
		copy.setLineNumber(this.lineNumber);
		copy.Cr501 = this.Cr501;
		copy.Cr502 = this.Cr502;
		copy.Cr510 = this.Cr510;
		copy.Cr511 = this.Cr511;
		copy.Cr512 = this.Cr512;
		copy.Cr513 = this.Cr513;
		copy.Cr514 = this.Cr514;
		copy.Cr515 = this.Cr515;
		return copy;
	}
}
