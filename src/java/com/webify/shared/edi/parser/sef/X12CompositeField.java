package com.webify.shared.edi.parser.sef;


import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;


/**
 * @author mperham
 * @version $Id: X12CompositeField.java 74 2004-09-16 23:04:46Z mperham $
 */
public class X12CompositeField extends X12Field {

    private List fieldRules = null;
    private List subfields = null;
    private List masks = null;
    private int currentField = 1;

    private boolean emitted = false;

    public byte getType() {
        return TYPE_COMPOSITE;
    }

    public void setType(byte b) {
        throw new UnsupportedOperationException("Can't set type of composite field");
    }

    public List getSubfields() {
        if (subfields == null) {
            return Collections.EMPTY_LIST;
        }
        return subfields;
    }

    public void addSubfield(X12FieldReference field) {
        if (subfields == null) {
            subfields = new ArrayList();
        }
        field.setName(getName() + "_" + getPaddedNumber(currentField++));
        subfields.add(field);
    }

    public List getMasks() {
        if (masks == null) {
            return Collections.EMPTY_LIST;
        }
        return masks;
    }

    public void addMask(X12Mask mask) {
        if (masks == null) {
            masks = new ArrayList();
        }
        masks.add(mask);
    }

    public void addFieldRule(int type, String elements) {
        if (fieldRules == null) {
            fieldRules = new ArrayList();
        }
        fieldRules.add(new X12ValidationRule(type, elements));
    }

    public List getFieldRules() {
        if (fieldRules == null) {
            return Collections.EMPTY_LIST;
        }
        return fieldRules;
    }

    public void toDebugString(StringBuffer sb, int lvl) {
        for (int i = 0; i < lvl; i++) {
            sb.append("  ");
        }

        sb.append(getName()).append(": ");
        sb.append(getFieldType());
        sb.append("(");
        sb.append(getMinimumSize());
        sb.append(",");
        sb.append(getMaximumSize());
        sb.append(") #");
        sb.append(getId());
        if (isRequired()) {
            sb.append(" *");
        }
        sb.append("\n");

        for (Iterator it = getSubfields().iterator(); it.hasNext();) {
            X12FieldReference field = (X12FieldReference) it.next();

            field.toDebugString(sb, lvl + 1);
        }
    }

    public String toString() {
        StringBuffer sb = new StringBuffer();

        toDebugString(sb, 0);
        return sb.toString();
    }

    public void emit(String xaType) throws IOException {
        if (emitted) {
            return;
        }
        emitted = true;

        emit(xaType, null, 0);
        // emit any additional segment variations (aka masks)
        if (getMasks().size() > 0) {
            int i = 1;

            for (Iterator it = getMasks().iterator(); it.hasNext(); i++) {
                X12Mask mask = (X12Mask) it.next();

                emit(xaType, mask, i);
            }
        }
    }

    public String getTypeClass(int mask) {
        return "Composite" + getName() + (mask != 0 ? "_" + mask : "");
    }

    // write the various classes for this composite and its masks
    private void emit(String xaType, X12Mask mask, int idx) throws IOException {

        /**
         * An EDI composite field on the wire truncates any trailing element separators so if
         * the CF has 10 elements but the last 3 elements are marked NOT_USED, the field
         * data sent over the wire will only contain 7 elements.
         */
        int elementCount = getSubfields().size();

        while (elementCount > 0) {
            X12FieldReference ref = (X12FieldReference) getSubfields().get(elementCount - 1);

            if (!ref.isUsed(mask, elementCount - 1)) {
                elementCount--;
            }
            else {
                break;
            }
        }
        if (elementCount == 0) {
            return;
        }

        String classname = getTypeClass(idx);
        FileWriter fw = new FileWriter(classname + ".java");
        PrintWriter out = new PrintWriter(fw);
        String type = null;

        try {
            out.println("package com.webify.shared.edi.model.hipaa" + xaType + ".beans;");
            out.println();
            out.println("import com.webify.shared.edi.model.*;");
            out.println("import java.io.IOException;");
            out.println();
            out.println("/*");
            out.println(" * AUTOGENERATED FILE - DO NOT EDIT!!!");
            out.println(" */");
            out.println("public class " + classname + " implements EDICompositeField {");
            out.println();

            out.println("\tpublic static final String COMPOSITE_NAME = \"" + getName() + "\";");
            out.println("\tpublic static final int ELEMENT_COUNT = " + elementCount + ";");
            out.println();

            out.println("\tprivate String ordinal = null;");
            out.println("\tvoid setOrdinal(String ord) { ordinal = ord; }");
            out.println();

            out.println("\t// Elements");
            int i = 0;

            for (Iterator it = getSubfields().iterator(); it.hasNext(); i++) {
                X12FieldReference f = (X12FieldReference) it.next();

                if ((idx == 0 && f.getUsageNote() == X12Element.USAGE_NOT_USED)
                        || (idx > 0
                                && mask.getFieldOverride(i).getUsage() == X12Element.USAGE_NOT_USED)) {
                    continue;
                }

                f.emit(xaType, out, mask, idx);
            }

            emitElementsMethod(xaType, mask, out);
            emitParseMethod(xaType, mask, out);

            if (getFieldRules().size() > 0) {
                out.println("\tprotected void validate(EDIInputStream eis) {");
                for (Iterator it = getFieldRules().iterator(); it.hasNext();) {
                    X12ValidationRule rule = (X12ValidationRule) it.next();

                    rule.emit(out, getName() + "_", getSubfields(), mask);
                }
                out.println("\t}");
                out.println();
            }

            i = 0;
            out.println("\tpublic void emit(EDIOutputStream eos) throws IOException {");
            out.println("\t\teos.startComposite();");
            for (Iterator it = getSubfields().iterator(); it.hasNext(); i++) {
                X12FieldReference f = (X12FieldReference) it.next();

                if (!f.isUsed(mask, i)) {
                    out.println("\t\teos.writeNullElement();");
                    continue;
                }

                if (f.getUsage(mask, i) == X12Element.USAGE_MUST_USE) {
                    out.println("\t\tif (" + f.getCamelName() + " == null) {");
                    out.println(
                            "\t\t\teos.addError(\"Emitting null mandatory field '" + f.getName()
                            + "'\");");
                    out.println("\t\t}");
                }
                out.println("\t\teos.writeElement(" + f.getCamelName() + ");");
            }
            out.println("\t\teos.endComposite();");
            out.println("\t}");
            out.println();

            i = 0;
            out.println("\tpublic EDIElement createCopy() {");
            out.println("\t\t" + classname + " copy = new " + classname + "();");
            for (Iterator it = getSubfields().iterator(); it.hasNext(); i++) {
                X12FieldReference f = (X12FieldReference) it.next();

                if (!f.isUsed(mask, i)) {
                    continue;
                }

                out.println("\t\tcopy." + f.getCamelName() + " = this." + f.getCamelName() + ";");
            }
            out.println("\t\treturn copy;");
            out.println("\t}");

            out.println("}");

        }
        finally {
            out.close();
            fw.close();
        }
    }

    private void emitElementsMethod(String xaType, X12Mask mask, PrintWriter out) throws IOException {
        int i = 0;
        out.println("\tpublic String[] getElements() {");
        out.println("\t\tString[] values = new String[ELEMENT_COUNT];");
        for (Iterator it = getSubfields().iterator(); it.hasNext(); i++) {
            X12FieldReference f = (X12FieldReference) it.next();

            if (!f.isUsed(mask, i)) {
                continue;
            }

            out.println("\t\tvalues[" + i + "] = EDIUtils.stringValue(" + f.getCamelName() + ");");
        }
        out.println("\t\treturn values;");
        out.println("\t}");
        out.println();

        out.println("\tpublic void setElements(String[] values) throws EDIParseException {");
        out.println("\t\tif (values == null || values.length != ELEMENT_COUNT) {");
        out.println("\t\t\tthrow new EDIParseException(\"values array must be non-null and "
                + "contain \" + ELEMENT_COUNT + \" elements\");");
        out.println("\t\t}");
        i = 0;
        for (Iterator it = getSubfields().iterator(); it.hasNext(); i++) {
            X12FieldReference f = (X12FieldReference) it.next();

            if (!f.isUsed(mask, i)) {
                continue;
            }

            X12Field field = f.getField();
            boolean must = (f.getUsage(mask, i) == X12Element.USAGE_MUST_USE);
            out.print("\t\t" + f.getCamelName() + " = EDIUtils.get");
            switch (field.getType()) {
                case X12Field.TYPE_INTEGER:
                    out.println("IntegerValue(values, " + i + ", " + must + ");");
                    break;

                case X12Field.TYPE_DECIMAL:
                    out.println("DecimalValue(values, " + i + ", " + must + ");");
                    break;

                case X12Field.TYPE_PACKED_DECIMAL:
                    out.println(
                            "PackedDecimalValue(values, " + i + ", " + must + ", "
                            + field.getDecimals() + ");");
                    break;

                case X12Field.TYPE_DATE:
                    out.println("DateValue(values, " + i + ", " + must + ");");
                    break;

                default:
                    out.println(
                            "StringValue(values, " + i + ", " + field.getMinimumSize() + ", "
                            + field.getMaximumSize() + ", " + must + ");");
                    if (field.getCodeset() != null) {
                        out.println("\t\tString overrideKey" + i + " = ordinal + \"-\" + "
                                + f.getOrdinal() + ";");
                        out.println("\t\tObject[] lvalues" + i + " = (Object[]) Field" + field.getId()
                                + ".getLegalValues(overrideKey" + i + ");");
                        out.println("\t\tif (!EDIUtils.validateValue(" + f.getCamelName()
                                + ", lvalues" + i + ")) {");
                        out.println("\t\t\tthrow new EDIParseException(\"Illegal value '\" + "
                                + f.getCamelName() + " + \"' for field " + f.getName() + "\");");
                        out.println("\t\t}");
                    }
                    break;
            }

            if (must) {
                out.println("\t\tif (" + f.getCamelName() + " == null) {");
                out.println("\t\t\tthrow new EDIParseException(\"Field '" + f.getName()
                        + "' is mandatory\");");
                out.println("\t\t}");
            }
        }
        out.println("\t}");
        out.println();
    }

    private void emitParseMethod(String xaType, X12Mask mask, PrintWriter out) throws IOException {
        int i;
        out.println(
                "\tpublic void parse(EDIInputStream eis, String fieldValue) throws IOException {");
        out.println("\t\tString[] elements = eis.getCompositeValue(fieldValue, ELEMENT_COUNT);");
        i = 0;
        for (Iterator it = getSubfields().iterator(); it.hasNext(); i++) {
            X12FieldReference f = (X12FieldReference) it.next();

            if (!f.isUsed(mask, i)) {
                continue;
            }

            boolean must = (f.getUsage(mask, i) == X12Element.USAGE_MUST_USE);
            X12Field field = f.getField();

            out.print("\t\t" + f.getCamelName() + " = eis.get");
            switch (field.getType()) {
                case X12Field.TYPE_INTEGER:
                    out.println("IntegerValue(elements, " + i + ", " + must + ");");
                    break;

                case X12Field.TYPE_DECIMAL:
                    out.println("DecimalValue(elements, " + i + ", " + must + ");");
                    break;

                case X12Field.TYPE_PACKED_DECIMAL:
                    out.println(
                            "PackedDecimalValue(fields, " + i + ", " + must + ", "
                            + field.getDecimals() + ");");
                    break;

                case X12Field.TYPE_DATE:
                    out.println("DateValue(elements, " + i + ", " + must + ");");
                    break;

                default:
                    out.println(
                            "StringValue(elements, " + i + ", " + field.getMinimumSize() + ", "
                            + field.getMaximumSize() + ", " + must + ");");
                    if (field.getCodeset() != null) {
                        field.emit(xaType);
                        out.println(
                                "\t\tField" + field.getId() + ".validateInputValue(eis, \""
                                + f.getName() + "\", " + f.getCamelName() + ", ordinal, " + f.getOrdinal()
                                + ");");
                    }
                    break;
            }

            if (must) {
                out.println("\t\tif (" + f.getCamelName() + " == null) {");
                out.println("\t\t\teis.addError(\"Field '" + f.getName() + "' is mandatory\");");
                out.println("\t\t}");
            }
        }
        if (getFieldRules().size() > 0) {
            out.println("\t\tvalidate(eis);");
        }
        out.println("\t}");
        out.println();
    }
}
