package com.webify.shared.edi.parser.sef;


import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;


/**
 * A segment has a set of fields associated with it.
 *
 * @author mperham
 * @version $Id: X12Segment.java 662 2004-11-19 17:02:12Z mperham $
 */
public class X12Segment extends X12Element {

    private List fieldRules = null;
    private List fields = null;
    private List masks = null;

    private byte currentField = 1;
    private BitSet emitted = null;

    public List getMasks() {
        if (masks == null) {
            return Collections.EMPTY_LIST;
        }
        return masks;
    }

    public void addMask(X12Mask mask) {
        if (masks == null) {
            masks = new ArrayList();
        }
        masks.add(mask);
    }

    public List getFields() {
        if (fields == null) {
            return Collections.EMPTY_LIST;
        }
        return fields;
    }

    public void addField(X12FieldReference ref) {
        if (fields == null) {
            fields = new ArrayList();
        }
        ref.setName(getName() + getPaddedNumber(currentField++));
        fields.add(ref);
    }

    public void toDebugString(StringBuffer sb, int lvl) {
        super.toDebugString(sb, lvl);

        String name = this.getClass().getName();

        sb.append(name.substring(name.lastIndexOf('.') + 1)).append(" \"").append(getName()).append(
                "\"");
        sb.append(" [").append(getMaxUsage()).append("]");
        sb.append(" ").append(getReadableUsageNote());

        sb.append((isOptional() ? "" : " *"));
        sb.append("\n");
        for (Iterator iter = getFields().iterator(); iter.hasNext();) {
            X12FieldReference element = (X12FieldReference) iter.next();

            element.toDebugString(sb, lvl + 1);
        }
    }

    public String toString() {
        StringBuffer sb = new StringBuffer();

        toDebugString(sb, 0);
        return sb.toString();
    }

    public void addFieldRule(int type, String elements) {
        if (fieldRules == null) {
            fieldRules = new ArrayList();
        }
        fieldRules.add(new X12ValidationRule(type, elements));
    }

    public List getFieldRules() {
        if (fieldRules == null) {
            return Collections.EMPTY_LIST;
        }
        return fieldRules;
    }

    /** @deprecated */
    public void emit(String xaType) throws IOException {
        // emit base segment type
        emit(xaType, null, 0);

        // emit any additional segment variations (aka masks)
        if (getMasks().size() > 0) {
            int i = 1;

            for (Iterator it = getMasks().iterator(); it.hasNext(); i++) {
                X12Mask mask = (X12Mask) it.next();

                emit(xaType, mask, i);
            }
        }
    }

    public void emit(String xaType, X12Mask mask, int idx) throws IOException {

        if (emitted == null && idx > 0) {
            emitted = new BitSet(getMasks().size());
        }

        if (idx > 0 && emitted.get(idx - 1)) {
            return;
        }

        /**
         * An EDI segment on the wire truncates any trailing field separators so if
         * the segment has 10 fields but the last 3 fields are marked NOT_USED, the segment
         * data sent over the wire will only contain 7 fields.
         */
        int fieldCount = getFields().size();

        while (fieldCount > 0) {
            X12FieldReference ref = (X12FieldReference) getFields().get(fieldCount - 1);

            if (!ref.isUsed(mask, fieldCount - 1)) {
                fieldCount--;
            }
            else {
                break;
            }
        }
        if (fieldCount == 0) {
            return;
        }

        int i = 0;

        String name = getName();
        String classname = "Segment" + getName() + (mask != null ? "_" + idx : "");
        FileWriter fw = new FileWriter(classname + ".java");
        PrintWriter out = new PrintWriter(fw);
        String type = null;

        try {

            out.println("package com.webify.shared.edi.model.hipaa" + xaType + ".beans;");
            out.println();
            out.println("import com.webify.shared.edi.model.*;");
            out.println("import java.io.*;");
            out.println("import java.util.*;");
            out.println("import org.apache.commons.logging.Log;");
            out.println("import org.apache.commons.logging.LogFactory;");
            out.println();
            out.println("/*");
            out.println(" * AUTOGENERATED FILE - DO NOT EDIT!!!");
            out.println(" */");
            out.println("public class " + classname + " implements EDIElement {");
            out.println("\tprivate static final Log log = LogFactory.getLog(" + classname + ".class);");
            out.println();
            out.println("\tpublic static final String SEGMENT_NAME = \"" + name + "\";");
            out.println("\tpublic static final int FIELD_COUNT = " + fieldCount + ";");
            out.println();

            out.println("\tprivate int lineNumber = 0;");
            out.println("\tpublic int getLineNumber() { return lineNumber; }");
            out.println("\t/** Do NOT use this method - it is not public by choice... */");
            out.println("\tpublic void setLineNumber(int foo) { lineNumber = foo; }");
            out.println();

            out.println("\tprivate int ordinal = 0;");
            out.println("\tpublic int getOrdinal() { return ordinal; }");
            out.println("\tvoid setOrdinal(int ord) { ordinal = ord; }");
            out.println();

            out.println("\t// Fields");
            i = 0;
            for (Iterator it = getFields().iterator(); it.hasNext(); i++) {
                X12FieldReference ref = (X12FieldReference) it.next();

                if (ref.isUsed(mask, i)) {
                    ref.emit(xaType, out, mask, i);
                }
            }
            out.println();

            emitParseMethod(xaType, mask, name, out);

            if (getFieldRules().size() > 0) {
                out.println("\tprotected void validate(EDIInputStream eis) {");
                for (Iterator it = getFieldRules().iterator(); it.hasNext();) {
                    X12ValidationRule rule = (X12ValidationRule) it.next();

                    rule.emit(out, getCamelName(), getFields(), mask);
                }
                out.println("\t}");
                out.println();
            }

            emitEmitMethod(mask, name, out);

            out.println("\tpublic EDIElement createCopy() {");
            out.println("\t\t" + classname + " copy = new " + classname + "();");
            out.println("\t\tcopy.setLineNumber(this.lineNumber);");

            i = 0;
            for (Iterator it = getFields().iterator(); it.hasNext(); i++) {
                X12FieldReference f = (X12FieldReference) it.next();

                if (!f.isUsed(mask, i)) {
                    continue;
                }

                X12Field field = (X12Field) f.getField();

                if (field.getType() == X12Field.TYPE_COMPOSITE) {
                    out.println(
                            "\t\tif (get" + f.getCamelName() + "() != null) copy.set" + f.getCamelName()
                            + "((Composite" + f.getId() + ")get" + f.getCamelName() + "().createCopy());");
                }
                else {
                    out.println("\t\tcopy." + f.getCamelName() + " = this." + f.getCamelName() + ";");
                }
            }

            out.println("\t\treturn copy;");
            out.println("\t}");

            out.println("}");

        }
        finally {
            if (idx > 0) {
                emitted.set(idx - 1);
            }
            out.close();
            fw.close();
        }
    }

    private void emitEmitMethod(X12Mask mask, String name, PrintWriter out) {
        int i;
        out.println("\tpublic void emit(EDIOutputStream eos) throws IOException {");
        out.println("\t\teos.startSegment(\"" + name + "\");");

        // hard code SE support so that we can automagically track SE01
        if ("SE".equals(name)) {
            out.println("\t\teos.writeField(eos.getSegmentsWritten());");
            out.println("\t\teos.writeField(Se02);");
        }
        else {
            i = 0;
            for (Iterator it = getFields().iterator(); it.hasNext(); i++) {
                X12FieldReference f = (X12FieldReference) it.next();

                if (!f.isUsed(mask, i)) {
                    out.println("\t\teos.writeNullField();");
                    continue;
                }

                X12Field field = (X12Field) f.getField();

                if (f.getUsage(mask, i) == X12Element.USAGE_MUST_USE) {
                    out.println("\t\tif (" + f.getCamelName() + " == null) {");
                    out.println(
                            "\t\t\teos.addError(\"Emitting null mandatory field '" + f.getName()
                            + "'\");");
                    out.println("\t\t}");
                    out.println();
                }

                if (field.getType() == X12Field.TYPE_COMPOSITE) {
                    out.println("\t\tif (" + f.getCamelName() + " != null) {");
                    out.println("\t\t\t" + f.getCamelName() + ".emit(eos);");
                    out.println("\t\t} else {");
                    out.println("\t\t\teos.writeNullField();");
                    out.println("\t\t}");
                }
                else {
                    out.println("\t\teos.writeField(" + f.getCamelName() + ");");
                }

            }
        }
        out.println("\t\teos.endSegment();");
        out.println("\t}");
        out.println();
    }

    private void emitParseMethod(String xaType, X12Mask mask, String name, PrintWriter out)
        throws IOException {

        int i;
        /*
         * Note that I did some performance tuning around delayed parsing in order to
         * minimize memory and CPU usage.  The idea was to store the segment's line of data
         * "FOO*128*EQ*15A~" instead of the individual fields as separate objects and only
         * parse that line of data when a getXXX was called.
         *
         * In my testing though, this added some ugliness and complexity to the code
         * while only saving about 10% (1.6MB 837p file took 15MB instead of 17MB in memory).
         */
        out.println("\tpublic void parse(EDIInputStream eis) throws IOException {");
        out.println("\t\tlineNumber = eis.getCurrentSegmentNumber();");
        out.println(
                "\t\tif (log.isDebugEnabled()) log.debug(\"Starting segment " + name
                + " on line \" + lineNumber);");
        out.println("\t\tString[] fields = eis.readSegment(SEGMENT_NAME, FIELD_COUNT);");
        i = 0;
        for (Iterator it = getFields().iterator(); it.hasNext(); i++) {
            X12FieldReference f = (X12FieldReference) it.next();

            if (!f.isUsed(mask, i)) {
                continue;
            }

            boolean must = (f.getUsage(mask, i) == X12Element.USAGE_MUST_USE);
            X12Field field = (X12Field) f.getField();

            switch (field.getType()) {
                case X12Field.TYPE_INTEGER:
                    out.println(
                            "\t\t" + f.getCamelName() + " = eis.getIntegerValue(fields, " + (i + 1)
                            + ", " + must + ");");
                    break;

                case X12Field.TYPE_DECIMAL:
                    out.println(
                            "\t\t" + f.getCamelName() + " = eis.getDecimalValue(fields, " + (i + 1)
                            + ", " + must + ");");
                    break;

                case X12Field.TYPE_PACKED_DECIMAL:
                    out.println(
                            "\t\t" + f.getCamelName() + " = eis.getPackedDecimalValue(fields, "
                            + (i + 1) + ", " + must + ", " + field.getDecimals() + ");");
                    break;

                case X12Field.TYPE_DATE:
                    out.println(
                            "\t\t" + f.getCamelName() + " = eis.getDateValue(fields, " + (i + 1)
                            + ", " + must + ");");
                    break;

                case X12Field.TYPE_BINARY:
                    out.println(
                            "\t\t" + f.getCamelName() + " = eis.getBinaryValue(fields, " + (i + 1)
                            + ", " + must + ");");
                    break;

                case X12Field.TYPE_COMPOSITE:
                    out.println(
                            "\t\tif (eis.checkBounds(fields, " + (i + 1) + ", " + must + ")) {");
                    out.println(
                            "\t\t\t" + f.getCamelName() + " = new " + field.getTypeClass(f.getMask())
                            + "();");
                    out.println(
                            "\t\t\t" + f.getCamelName() + ".setOrdinal(ordinal + \"-\" + "
                            + f.getOrdinal() + ");");
                    out.println("\t\t\t" + f.getCamelName() + ".parse(eis, fields[" + (i + 1) + "]);");
                    out.println("\t\t}");
                    field.emit(xaType);
                    break;

                default:
                    out.println(
                            "\t\t" + f.getCamelName() + " = eis.getStringValue(fields, " + (i + 1)
                            + ", " + field.getMinimumSize() + ", " + field.getMaximumSize()
                            + ", " + must + ");");
                    if (field.getCodeset() != null) {
                        field.emit(xaType);
                        out.println(
                                "\t\tField" + field.getId() + ".validateInputValue(eis, \""
                                + f.getName() + "\", " + f.getCamelName() + ", ordinal, " + f.getOrdinal()
                                + ");");
                    }
                    break;
            }

            if (must) {
                if (field.getType() != X12Field.TYPE_BINARY) {
	                out.println(
	                        "\t\tif (" + f.getCamelName() + " == null || \"\".equals(fields[" + (i + 1)
	                        + "].trim())) {");
                }
                else {
	                out.println(
	                        "\t\tif (" + f.getCamelName() + " == null || " 
	                        + f.getCamelName() + ".length == 0) {");
                }
                out.println("\t\t\teis.addError(\"Field '" + f.getName() + "' missing\");");
                out.println("\t\t}");
            }
        }
        if (getFieldRules().size() > 0) {
            out.println("\t\tvalidate(eis);");
        }

        out.println("\t}");
        out.println();
    }
}
